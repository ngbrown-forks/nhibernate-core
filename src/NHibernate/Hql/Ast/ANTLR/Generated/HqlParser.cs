//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Hql.g 2017-07-15 14:31:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using NHibernate.Hql.Ast.ANTLR.Tree;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  NHibernate.Hql.Ast.ANTLR 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class HqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AGGREGATE", "ALIAS", "ALL", "AND", "ANY", "AS", "ASCENDING", "AVG", "BAND", "BETWEEN", "BNOT", "BOR", "BOTH", "BXOR", "CASE", "CASE2", "CLASS", "CLOSE", "CLOSE_BRACKET", "COLON", "COMMA", "CONCAT", "CONSTANT", "CONSTRUCTOR", "COUNT", "DELETE", "DESCENDING", "DISTINCT", "DIV", "DOT", "ELEMENTS", "ELSE", "EMPTY", "END", "EQ", "ESCAPE", "ESCqs", "EXISTS", "EXPONENT", "EXPR_LIST", "FALSE", "FETCH", "FILTER_ENTITY", "FLOAT_SUFFIX", "FROM", "FULL", "GE", "GROUP", "GT", "HAVING", "HEX_DIGIT", "IDENT", "ID_LETTER", "ID_START_LETTER", "IN", "INDEX_OP", "INDICES", "INNER", "INSERT", "INTO", "IN_LIST", "IS", "IS_NOT_NULL", "IS_NULL", "JAVA_CONSTANT", "JOIN", "LE", "LEADING", "LEFT", "LIKE", "LITERAL_by", "LT", "MAX", "MEMBER", "METHOD_CALL", "MIN", "MINUS", "NE", "NEW", "NOT", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NULL", "NUM_DECIMAL", "NUM_DOUBLE", "NUM_FLOAT", "NUM_INT", "NUM_LONG", "OBJECT", "OF", "ON", "OPEN", "OPEN_BRACKET", "OR", "ORDER", "ORDER_ELEMENT", "OUTER", "PARAM", "PLUS", "PROPERTIES", "QUERY", "QUOTED_String", "RANGE", "RIGHT", "ROW_STAR", "SELECT", "SELECT_FROM", "SET", "SKIP", "SOME", "SQL_NE", "STAR", "SUM", "TAKE", "THEN", "TRAILING", "TRUE", "UNARY_MINUS", "UNARY_PLUS", "UNION", "UPDATE", "VECTOR_EXPR", "VERSIONED", "WEIRD_IDENT", "WHEN", "WHERE", "WITH", "WS", "'ascending'", "'descending'"
	};
	public const int EOF=-1;
	public const int AGGREGATE=4;
	public const int ALIAS=5;
	public const int ALL=6;
	public const int AND=7;
	public const int ANY=8;
	public const int AS=9;
	public const int ASCENDING=10;
	public const int AVG=11;
	public const int BAND=12;
	public const int BETWEEN=13;
	public const int BNOT=14;
	public const int BOR=15;
	public const int BOTH=16;
	public const int BXOR=17;
	public const int CASE=18;
	public const int CASE2=19;
	public const int CLASS=20;
	public const int CLOSE=21;
	public const int CLOSE_BRACKET=22;
	public const int COLON=23;
	public const int COMMA=24;
	public const int CONCAT=25;
	public const int CONSTANT=26;
	public const int CONSTRUCTOR=27;
	public const int COUNT=28;
	public const int DELETE=29;
	public const int DESCENDING=30;
	public const int DISTINCT=31;
	public const int DIV=32;
	public const int DOT=33;
	public const int ELEMENTS=34;
	public const int ELSE=35;
	public const int EMPTY=36;
	public const int END=37;
	public const int EQ=38;
	public const int ESCAPE=39;
	public const int ESCqs=40;
	public const int EXISTS=41;
	public const int EXPONENT=42;
	public const int EXPR_LIST=43;
	public const int FALSE=44;
	public const int FETCH=45;
	public const int FILTER_ENTITY=46;
	public const int FLOAT_SUFFIX=47;
	public const int FROM=48;
	public const int FULL=49;
	public const int GE=50;
	public const int GROUP=51;
	public const int GT=52;
	public const int HAVING=53;
	public const int HEX_DIGIT=54;
	public const int IDENT=55;
	public const int ID_LETTER=56;
	public const int ID_START_LETTER=57;
	public const int IN=58;
	public const int INDEX_OP=59;
	public const int INDICES=60;
	public const int INNER=61;
	public const int INSERT=62;
	public const int INTO=63;
	public const int IN_LIST=64;
	public const int IS=65;
	public const int IS_NOT_NULL=66;
	public const int IS_NULL=67;
	public const int JAVA_CONSTANT=68;
	public const int JOIN=69;
	public const int LE=70;
	public const int LEADING=71;
	public const int LEFT=72;
	public const int LIKE=73;
	public const int LITERAL_by=74;
	public const int LT=75;
	public const int MAX=76;
	public const int MEMBER=77;
	public const int METHOD_CALL=78;
	public const int MIN=79;
	public const int MINUS=80;
	public const int NE=81;
	public const int NEW=82;
	public const int NOT=83;
	public const int NOT_BETWEEN=84;
	public const int NOT_IN=85;
	public const int NOT_LIKE=86;
	public const int NULL=87;
	public const int NUM_DECIMAL=88;
	public const int NUM_DOUBLE=89;
	public const int NUM_FLOAT=90;
	public const int NUM_INT=91;
	public const int NUM_LONG=92;
	public const int OBJECT=93;
	public const int OF=94;
	public const int ON=95;
	public const int OPEN=96;
	public const int OPEN_BRACKET=97;
	public const int OR=98;
	public const int ORDER=99;
	public const int ORDER_ELEMENT=100;
	public const int OUTER=101;
	public const int PARAM=102;
	public const int PLUS=103;
	public const int PROPERTIES=104;
	public const int QUERY=105;
	public const int QUOTED_String=106;
	public const int RANGE=107;
	public const int RIGHT=108;
	public const int ROW_STAR=109;
	public const int SELECT=110;
	public const int SELECT_FROM=111;
	public const int SET=112;
	public const int SKIP=113;
	public const int SOME=114;
	public const int SQL_NE=115;
	public const int STAR=116;
	public const int SUM=117;
	public const int TAKE=118;
	public const int THEN=119;
	public const int TRAILING=120;
	public const int TRUE=121;
	public const int UNARY_MINUS=122;
	public const int UNARY_PLUS=123;
	public const int UNION=124;
	public const int UPDATE=125;
	public const int VECTOR_EXPR=126;
	public const int VERSIONED=127;
	public const int WEIRD_IDENT=128;
	public const int WHEN=129;
	public const int WHERE=130;
	public const int WITH=131;
	public const int WS=132;
	public const int T__133=133;
	public const int T__134=134;

	public HqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public HqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return HqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "Hql.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Hql.g:129:8: public statement : ({...}? ( updateStatement | deleteStatement | insertStatement ) | selectStatement ) EOF !;
	[GrammarRule("statement")]
	public AstParserRuleReturnScope<IASTNode, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken EOF5 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> updateStatement1 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> deleteStatement2 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> insertStatement3 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> selectStatement4 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode EOF5_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(129, 1);
		try
		{
			// Hql.g:130:2: ( ({...}? ( updateStatement | deleteStatement | insertStatement ) | selectStatement ) EOF !)
			DebugEnterAlt(1);
			// Hql.g:131:2: ({...}? ( updateStatement | deleteStatement | insertStatement ) | selectStatement ) EOF !
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(131, 2);
			// Hql.g:131:2: ({...}? ( updateStatement | deleteStatement | insertStatement ) | selectStatement )
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==DELETE||LA2_1==INSERT||LA2_1==UPDATE))
			{
				alt2 = 1;
			}
			else if ((LA2_1==EOF||LA2_1==FROM||LA2_1==GROUP||LA2_1==HAVING||LA2_1==ORDER||LA2_1==SELECT||LA2_1==SKIP||LA2_1==TAKE||LA2_1==WHERE))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:132:3: {...}? ( updateStatement | deleteStatement | insertStatement )
				{
				DebugLocation(132, 3);
				if (!(( !filter )))
				{
					throw new FailedPredicateException(input, "statement", " !filter ");
				}
				DebugLocation(132, 16);
				// Hql.g:132:16: ( updateStatement | deleteStatement | insertStatement )
				int alt1=3;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case UPDATE:
					{
					alt1 = 1;
					}
					break;
				case DELETE:
					{
					alt1 = 2;
					}
					break;
				case INSERT:
					{
					alt1 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:132:18: updateStatement
					{
					DebugLocation(132, 18);
					PushFollow(Follow._updateStatement_in_statement620);
					updateStatement1=updateStatement();
					PopFollow();

					adaptor.AddChild(root_0, updateStatement1.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:132:36: deleteStatement
					{
					DebugLocation(132, 36);
					PushFollow(Follow._deleteStatement_in_statement624);
					deleteStatement2=deleteStatement();
					PopFollow();

					adaptor.AddChild(root_0, deleteStatement2.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:132:54: insertStatement
					{
					DebugLocation(132, 54);
					PushFollow(Follow._insertStatement_in_statement628);
					insertStatement3=insertStatement();
					PopFollow();

					adaptor.AddChild(root_0, insertStatement3.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(1); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:133:5: selectStatement
				{
				DebugLocation(133, 5);
				PushFollow(Follow._selectStatement_in_statement637);
				selectStatement4=selectStatement();
				PopFollow();

				adaptor.AddChild(root_0, selectStatement4.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(134, 7);
			EOF5=(IToken)Match(input,EOF,Follow._EOF_in_statement642); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_updateStatement();
	partial void LeaveRule_updateStatement();
	// $ANTLR start "updateStatement"
	// Hql.g:137:1: updateStatement : UPDATE ^ ( VERSIONED )? optionalFromTokenFromClause setClause ( whereClause )? ;
	[GrammarRule("updateStatement")]
	private AstParserRuleReturnScope<IASTNode, IToken> updateStatement()
	{
		EnterRule_updateStatement();
		EnterRule("updateStatement", 2);
		TraceIn("updateStatement", 2);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken UPDATE6 = default(IToken);
		IToken VERSIONED7 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> optionalFromTokenFromClause8 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> setClause9 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> whereClause10 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode UPDATE6_tree = default(IASTNode);
		IASTNode VERSIONED7_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "updateStatement");
		DebugLocation(137, 1);
		try
		{
			// Hql.g:138:2: ( UPDATE ^ ( VERSIONED )? optionalFromTokenFromClause setClause ( whereClause )? )
			DebugEnterAlt(1);
			// Hql.g:138:4: UPDATE ^ ( VERSIONED )? optionalFromTokenFromClause setClause ( whereClause )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(138, 10);
			UPDATE6=(IToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatement654); 
			UPDATE6_tree = (IASTNode)adaptor.Create(UPDATE6);
			root_0 = (IASTNode)adaptor.BecomeRoot(UPDATE6_tree, root_0);
			DebugLocation(138, 12);
			// Hql.g:138:12: ( VERSIONED )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==VERSIONED))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:138:13: VERSIONED
				{
				DebugLocation(138, 13);
				VERSIONED7=(IToken)Match(input,VERSIONED,Follow._VERSIONED_in_updateStatement658); 
				VERSIONED7_tree = (IASTNode)adaptor.Create(VERSIONED7);
				adaptor.AddChild(root_0, VERSIONED7_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(139, 3);
			PushFollow(Follow._optionalFromTokenFromClause_in_updateStatement664);
			optionalFromTokenFromClause8=optionalFromTokenFromClause();
			PopFollow();

			adaptor.AddChild(root_0, optionalFromTokenFromClause8.Tree);
			DebugLocation(140, 3);
			PushFollow(Follow._setClause_in_updateStatement668);
			setClause9=setClause();
			PopFollow();

			adaptor.AddChild(root_0, setClause9.Tree);
			DebugLocation(141, 3);
			// Hql.g:141:3: ( whereClause )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==WHERE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:141:4: whereClause
				{
				DebugLocation(141, 4);
				PushFollow(Follow._whereClause_in_updateStatement673);
				whereClause10=whereClause();
				PopFollow();

				adaptor.AddChild(root_0, whereClause10.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatement", 2);
			LeaveRule("updateStatement", 2);
			LeaveRule_updateStatement();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatement"); }
		return retval;

	}
	// $ANTLR end "updateStatement"

	partial void EnterRule_setClause();
	partial void LeaveRule_setClause();
	// $ANTLR start "setClause"
	// Hql.g:144:1: setClause : ( SET ^ assignment ( COMMA ! assignment )* ) ;
	[GrammarRule("setClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> setClause()
	{
		EnterRule_setClause();
		EnterRule("setClause", 3);
		TraceIn("setClause", 3);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken SET11 = default(IToken);
		IToken COMMA13 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> assignment12 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> assignment14 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode SET11_tree = default(IASTNode);
		IASTNode COMMA13_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "setClause");
		DebugLocation(144, 1);
		try
		{
			// Hql.g:145:2: ( ( SET ^ assignment ( COMMA ! assignment )* ) )
			DebugEnterAlt(1);
			// Hql.g:145:4: ( SET ^ assignment ( COMMA ! assignment )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(145, 4);
			// Hql.g:145:4: ( SET ^ assignment ( COMMA ! assignment )* )
			DebugEnterAlt(1);
			// Hql.g:145:5: SET ^ assignment ( COMMA ! assignment )*
			{
			DebugLocation(145, 8);
			SET11=(IToken)Match(input,SET,Follow._SET_in_setClause687); 
			SET11_tree = (IASTNode)adaptor.Create(SET11);
			root_0 = (IASTNode)adaptor.BecomeRoot(SET11_tree, root_0);
			DebugLocation(145, 10);
			PushFollow(Follow._assignment_in_setClause690);
			assignment12=assignment();
			PopFollow();

			adaptor.AddChild(root_0, assignment12.Tree);
			DebugLocation(145, 21);
			// Hql.g:145:21: ( COMMA ! assignment )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==COMMA))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:145:22: COMMA ! assignment
					{
					DebugLocation(145, 27);
					COMMA13=(IToken)Match(input,COMMA,Follow._COMMA_in_setClause693); 
					DebugLocation(145, 29);
					PushFollow(Follow._assignment_in_setClause696);
					assignment14=assignment();
					PopFollow();

					adaptor.AddChild(root_0, assignment14.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setClause", 3);
			LeaveRule("setClause", 3);
			LeaveRule_setClause();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "setClause"); }
		return retval;

	}
	// $ANTLR end "setClause"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// Hql.g:148:1: assignment : stateField EQ ^ newValue ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<IASTNode, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 4);
		TraceIn("assignment", 4);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken EQ16 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> stateField15 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> newValue17 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode EQ16_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(148, 1);
		try
		{
			// Hql.g:149:2: ( stateField EQ ^ newValue )
			DebugEnterAlt(1);
			// Hql.g:149:4: stateField EQ ^ newValue
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(149, 4);
			PushFollow(Follow._stateField_in_assignment710);
			stateField15=stateField();
			PopFollow();

			adaptor.AddChild(root_0, stateField15.Tree);
			DebugLocation(149, 17);
			EQ16=(IToken)Match(input,EQ,Follow._EQ_in_assignment712); 
			EQ16_tree = (IASTNode)adaptor.Create(EQ16);
			root_0 = (IASTNode)adaptor.BecomeRoot(EQ16_tree, root_0);
			DebugLocation(149, 19);
			PushFollow(Follow._newValue_in_assignment715);
			newValue17=newValue();
			PopFollow();

			adaptor.AddChild(root_0, newValue17.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 4);
			LeaveRule("assignment", 4);
			LeaveRule_assignment();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_stateField();
	partial void LeaveRule_stateField();
	// $ANTLR start "stateField"
	// Hql.g:154:1: stateField : path ;
	[GrammarRule("stateField")]
	private AstParserRuleReturnScope<IASTNode, IToken> stateField()
	{
		EnterRule_stateField();
		EnterRule("stateField", 5);
		TraceIn("stateField", 5);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> path18 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "stateField");
		DebugLocation(154, 1);
		try
		{
			// Hql.g:155:2: ( path )
			DebugEnterAlt(1);
			// Hql.g:155:4: path
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(155, 4);
			PushFollow(Follow._path_in_stateField728);
			path18=path();
			PopFollow();

			adaptor.AddChild(root_0, path18.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stateField", 5);
			LeaveRule("stateField", 5);
			LeaveRule_stateField();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "stateField"); }
		return retval;

	}
	// $ANTLR end "stateField"

	partial void EnterRule_newValue();
	partial void LeaveRule_newValue();
	// $ANTLR start "newValue"
	// Hql.g:160:1: newValue : concatenation ;
	[GrammarRule("newValue")]
	private AstParserRuleReturnScope<IASTNode, IToken> newValue()
	{
		EnterRule_newValue();
		EnterRule("newValue", 6);
		TraceIn("newValue", 6);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> concatenation19 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "newValue");
		DebugLocation(160, 1);
		try
		{
			// Hql.g:161:2: ( concatenation )
			DebugEnterAlt(1);
			// Hql.g:161:4: concatenation
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(161, 4);
			PushFollow(Follow._concatenation_in_newValue741);
			concatenation19=concatenation();
			PopFollow();

			adaptor.AddChild(root_0, concatenation19.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newValue", 6);
			LeaveRule("newValue", 6);
			LeaveRule_newValue();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "newValue"); }
		return retval;

	}
	// $ANTLR end "newValue"

	partial void EnterRule_deleteStatement();
	partial void LeaveRule_deleteStatement();
	// $ANTLR start "deleteStatement"
	// Hql.g:164:1: deleteStatement : DELETE ^ ( optionalFromTokenFromClause ) ( whereClause )? ;
	[GrammarRule("deleteStatement")]
	private AstParserRuleReturnScope<IASTNode, IToken> deleteStatement()
	{
		EnterRule_deleteStatement();
		EnterRule("deleteStatement", 7);
		TraceIn("deleteStatement", 7);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken DELETE20 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> optionalFromTokenFromClause21 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> whereClause22 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode DELETE20_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "deleteStatement");
		DebugLocation(164, 1);
		try
		{
			// Hql.g:165:2: ( DELETE ^ ( optionalFromTokenFromClause ) ( whereClause )? )
			DebugEnterAlt(1);
			// Hql.g:165:4: DELETE ^ ( optionalFromTokenFromClause ) ( whereClause )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(165, 10);
			DELETE20=(IToken)Match(input,DELETE,Follow._DELETE_in_deleteStatement752); 
			DELETE20_tree = (IASTNode)adaptor.Create(DELETE20);
			root_0 = (IASTNode)adaptor.BecomeRoot(DELETE20_tree, root_0);
			DebugLocation(166, 3);
			// Hql.g:166:3: ( optionalFromTokenFromClause )
			DebugEnterAlt(1);
			// Hql.g:166:4: optionalFromTokenFromClause
			{
			DebugLocation(166, 4);
			PushFollow(Follow._optionalFromTokenFromClause_in_deleteStatement758);
			optionalFromTokenFromClause21=optionalFromTokenFromClause();
			PopFollow();

			adaptor.AddChild(root_0, optionalFromTokenFromClause21.Tree);

			}

			DebugLocation(167, 3);
			// Hql.g:167:3: ( whereClause )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==WHERE))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:167:4: whereClause
				{
				DebugLocation(167, 4);
				PushFollow(Follow._whereClause_in_deleteStatement764);
				whereClause22=whereClause();
				PopFollow();

				adaptor.AddChild(root_0, whereClause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("deleteStatement", 7);
			LeaveRule("deleteStatement", 7);
			LeaveRule_deleteStatement();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "deleteStatement"); }
		return retval;

	}
	// $ANTLR end "deleteStatement"

	partial void EnterRule_optionalFromTokenFromClause();
	partial void LeaveRule_optionalFromTokenFromClause();
	// $ANTLR start "optionalFromTokenFromClause"
	// Hql.g:172:1: optionalFromTokenFromClause : optionalFromTokenFromClause2 path ( asAlias )? -> ^( FROM ^( RANGE path ( asAlias )? ) ) ;
	[GrammarRule("optionalFromTokenFromClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> optionalFromTokenFromClause()
	{
		EnterRule_optionalFromTokenFromClause();
		EnterRule("optionalFromTokenFromClause", 8);
		TraceIn("optionalFromTokenFromClause", 8);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> optionalFromTokenFromClause223 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path24 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> asAlias25 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_optionalFromTokenFromClause2=new RewriteRuleSubtreeStream(adaptor,"rule optionalFromTokenFromClause2");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_asAlias=new RewriteRuleSubtreeStream(adaptor,"rule asAlias");
		try { DebugEnterRule(GrammarFileName, "optionalFromTokenFromClause");
		DebugLocation(172, 1);
		try
		{
			// Hql.g:173:2: ( optionalFromTokenFromClause2 path ( asAlias )? -> ^( FROM ^( RANGE path ( asAlias )? ) ) )
			DebugEnterAlt(1);
			// Hql.g:173:4: optionalFromTokenFromClause2 path ( asAlias )?
			{
			DebugLocation(173, 4);
			PushFollow(Follow._optionalFromTokenFromClause2_in_optionalFromTokenFromClause779);
			optionalFromTokenFromClause223=optionalFromTokenFromClause2();
			PopFollow();

			stream_optionalFromTokenFromClause2.Add(optionalFromTokenFromClause223.Tree);
			DebugLocation(173, 33);
			PushFollow(Follow._path_in_optionalFromTokenFromClause781);
			path24=path();
			PopFollow();

			stream_path.Add(path24.Tree);
			DebugLocation(173, 38);
			// Hql.g:173:38: ( asAlias )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==AS||LA7_1==IDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:173:39: asAlias
				{
				DebugLocation(173, 39);
				PushFollow(Follow._asAlias_in_optionalFromTokenFromClause784);
				asAlias25=asAlias();
				PopFollow();

				stream_asAlias.Add(asAlias25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: path, asAlias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 174:3: -> ^( FROM ^( RANGE path ( asAlias )? ) )
			{
				DebugLocation(174, 6);
				// Hql.g:174:6: ^( FROM ^( RANGE path ( asAlias )? ) )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(174, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(FROM, "FROM"), root_1);

				DebugLocation(174, 13);
				// Hql.g:174:13: ^( RANGE path ( asAlias )? )
				{
				IASTNode root_2 = (IASTNode)adaptor.Nil();
				DebugLocation(174, 15);
				root_2 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(RANGE, "RANGE"), root_2);

				DebugLocation(174, 21);
				adaptor.AddChild(root_2, stream_path.NextTree());
				DebugLocation(174, 26);
				// Hql.g:174:26: ( asAlias )?
				if (stream_asAlias.HasNext)
				{
					DebugLocation(174, 26);
					adaptor.AddChild(root_2, stream_asAlias.NextTree());

				}
				stream_asAlias.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("optionalFromTokenFromClause", 8);
			LeaveRule("optionalFromTokenFromClause", 8);
			LeaveRule_optionalFromTokenFromClause();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "optionalFromTokenFromClause"); }
		return retval;

	}
	// $ANTLR end "optionalFromTokenFromClause"

	partial void EnterRule_optionalFromTokenFromClause2();
	partial void LeaveRule_optionalFromTokenFromClause2();
	// $ANTLR start "optionalFromTokenFromClause2"
	// Hql.g:177:1: optionalFromTokenFromClause2 : ( FROM )? ;
	[GrammarRule("optionalFromTokenFromClause2")]
	private AstParserRuleReturnScope<IASTNode, IToken> optionalFromTokenFromClause2()
	{
		EnterRule_optionalFromTokenFromClause2();
		EnterRule("optionalFromTokenFromClause2", 9);
		TraceIn("optionalFromTokenFromClause2", 9);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken FROM26 = default(IToken);

		IASTNode FROM26_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "optionalFromTokenFromClause2");
		DebugLocation(177, 1);
		try
		{
			// Hql.g:178:2: ( ( FROM )? )
			DebugEnterAlt(1);
			// Hql.g:178:4: ( FROM )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(178, 4);
			// Hql.g:178:4: ( FROM )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==FROM))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:178:4: FROM
				{
				DebugLocation(178, 4);
				FROM26=(IToken)Match(input,FROM,Follow._FROM_in_optionalFromTokenFromClause2815); 
				FROM26_tree = (IASTNode)adaptor.Create(FROM26);
				adaptor.AddChild(root_0, FROM26_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("optionalFromTokenFromClause2", 9);
			LeaveRule("optionalFromTokenFromClause2", 9);
			LeaveRule_optionalFromTokenFromClause2();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "optionalFromTokenFromClause2"); }
		return retval;

	}
	// $ANTLR end "optionalFromTokenFromClause2"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Hql.g:181:1: selectStatement : q= queryRule -> ^( QUERY[\"query\"] $q) ;
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<IASTNode, IToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 10);
		TraceIn("selectStatement", 10);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> q = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_queryRule=new RewriteRuleSubtreeStream(adaptor,"rule queryRule");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(181, 1);
		try
		{
			// Hql.g:182:2: (q= queryRule -> ^( QUERY[\"query\"] $q) )
			DebugEnterAlt(1);
			// Hql.g:182:4: q= queryRule
			{
			DebugLocation(182, 5);
			PushFollow(Follow._queryRule_in_selectStatement829);
			q=queryRule();
			PopFollow();

			stream_queryRule.Add(q.Tree);


			{
			// AST REWRITE
			// elements: q
			// token labels: 
			// rule labels: q, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_q=new RewriteRuleSubtreeStream(adaptor,"rule q",q!=null?q.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 183:2: -> ^( QUERY[\"query\"] $q)
			{
				DebugLocation(183, 5);
				// Hql.g:183:5: ^( QUERY[\"query\"] $q)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(183, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(QUERY, "query"), root_1);

				DebugLocation(183, 23);
				adaptor.AddChild(root_1, stream_q.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 10);
			LeaveRule("selectStatement", 10);
			LeaveRule_selectStatement();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Hql.g:186:1: insertStatement : INSERT ^ intoClause selectStatement ;
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<IASTNode, IToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 11);
		TraceIn("insertStatement", 11);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken INSERT27 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> intoClause28 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> selectStatement29 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode INSERT27_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(186, 1);
		try
		{
			// Hql.g:190:2: ( INSERT ^ intoClause selectStatement )
			DebugEnterAlt(1);
			// Hql.g:190:4: INSERT ^ intoClause selectStatement
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(190, 10);
			INSERT27=(IToken)Match(input,INSERT,Follow._INSERT_in_insertStatement858); 
			INSERT27_tree = (IASTNode)adaptor.Create(INSERT27);
			root_0 = (IASTNode)adaptor.BecomeRoot(INSERT27_tree, root_0);
			DebugLocation(190, 12);
			PushFollow(Follow._intoClause_in_insertStatement861);
			intoClause28=intoClause();
			PopFollow();

			adaptor.AddChild(root_0, intoClause28.Tree);
			DebugLocation(190, 23);
			PushFollow(Follow._selectStatement_in_insertStatement863);
			selectStatement29=selectStatement();
			PopFollow();

			adaptor.AddChild(root_0, selectStatement29.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 11);
			LeaveRule("insertStatement", 11);
			LeaveRule_insertStatement();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_intoClause();
	partial void LeaveRule_intoClause();
	// $ANTLR start "intoClause"
	// Hql.g:193:1: intoClause : INTO ^ path insertablePropertySpec ;
	[GrammarRule("intoClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> intoClause()
	{
		EnterRule_intoClause();
		EnterRule("intoClause", 12);
		TraceIn("intoClause", 12);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken INTO30 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path31 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> insertablePropertySpec32 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode INTO30_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "intoClause");
		DebugLocation(193, 1);
		try
		{
			// Hql.g:194:2: ( INTO ^ path insertablePropertySpec )
			DebugEnterAlt(1);
			// Hql.g:194:4: INTO ^ path insertablePropertySpec
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(194, 8);
			INTO30=(IToken)Match(input,INTO,Follow._INTO_in_intoClause874); 
			INTO30_tree = (IASTNode)adaptor.Create(INTO30);
			root_0 = (IASTNode)adaptor.BecomeRoot(INTO30_tree, root_0);
			DebugLocation(194, 10);
			PushFollow(Follow._path_in_intoClause877);
			path31=path();
			PopFollow();

			adaptor.AddChild(root_0, path31.Tree);
			DebugLocation(194, 15);
			 WeakKeywords(); 
			DebugLocation(194, 35);
			PushFollow(Follow._insertablePropertySpec_in_intoClause881);
			insertablePropertySpec32=insertablePropertySpec();
			PopFollow();

			adaptor.AddChild(root_0, insertablePropertySpec32.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("intoClause", 12);
			LeaveRule("intoClause", 12);
			LeaveRule_intoClause();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "intoClause"); }
		return retval;

	}
	// $ANTLR end "intoClause"

	partial void EnterRule_insertablePropertySpec();
	partial void LeaveRule_insertablePropertySpec();
	// $ANTLR start "insertablePropertySpec"
	// Hql.g:197:1: insertablePropertySpec : OPEN primaryExpression ( COMMA primaryExpression )* CLOSE -> ^( RANGE[\"column-spec\"] ( primaryExpression )* ) ;
	[GrammarRule("insertablePropertySpec")]
	private AstParserRuleReturnScope<IASTNode, IToken> insertablePropertySpec()
	{
		EnterRule_insertablePropertySpec();
		EnterRule("insertablePropertySpec", 13);
		TraceIn("insertablePropertySpec", 13);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken OPEN33 = default(IToken);
		IToken COMMA35 = default(IToken);
		IToken CLOSE37 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> primaryExpression34 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> primaryExpression36 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode OPEN33_tree = default(IASTNode);
		IASTNode COMMA35_tree = default(IASTNode);
		IASTNode CLOSE37_tree = default(IASTNode);
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "insertablePropertySpec");
		DebugLocation(197, 1);
		try
		{
			// Hql.g:198:2: ( OPEN primaryExpression ( COMMA primaryExpression )* CLOSE -> ^( RANGE[\"column-spec\"] ( primaryExpression )* ) )
			DebugEnterAlt(1);
			// Hql.g:198:4: OPEN primaryExpression ( COMMA primaryExpression )* CLOSE
			{
			DebugLocation(198, 4);
			OPEN33=(IToken)Match(input,OPEN,Follow._OPEN_in_insertablePropertySpec892);  
			stream_OPEN.Add(OPEN33);

			DebugLocation(198, 9);
			PushFollow(Follow._primaryExpression_in_insertablePropertySpec894);
			primaryExpression34=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(primaryExpression34.Tree);
			DebugLocation(198, 27);
			// Hql.g:198:27: ( COMMA primaryExpression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMA))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:198:29: COMMA primaryExpression
					{
					DebugLocation(198, 29);
					COMMA35=(IToken)Match(input,COMMA,Follow._COMMA_in_insertablePropertySpec898);  
					stream_COMMA.Add(COMMA35);

					DebugLocation(198, 35);
					PushFollow(Follow._primaryExpression_in_insertablePropertySpec900);
					primaryExpression36=primaryExpression();
					PopFollow();

					stream_primaryExpression.Add(primaryExpression36.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(198, 56);
			CLOSE37=(IToken)Match(input,CLOSE,Follow._CLOSE_in_insertablePropertySpec905);  
			stream_CLOSE.Add(CLOSE37);



			{
			// AST REWRITE
			// elements: primaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 199:3: -> ^( RANGE[\"column-spec\"] ( primaryExpression )* )
			{
				DebugLocation(199, 6);
				// Hql.g:199:6: ^( RANGE[\"column-spec\"] ( primaryExpression )* )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(199, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(RANGE, "column-spec"), root_1);

				DebugLocation(199, 29);
				// Hql.g:199:29: ( primaryExpression )*
				while ( stream_primaryExpression.HasNext )
				{
					DebugLocation(199, 29);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

				}
				stream_primaryExpression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertablePropertySpec", 13);
			LeaveRule("insertablePropertySpec", 13);
			LeaveRule_insertablePropertySpec();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "insertablePropertySpec"); }
		return retval;

	}
	// $ANTLR end "insertablePropertySpec"

	partial void EnterRule_queryRule();
	partial void LeaveRule_queryRule();
	// $ANTLR start "queryRule"
	// Hql.g:205:1: queryRule : selectFrom ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( skipClause )? ( takeClause )? ;
	[GrammarRule("queryRule")]
	private AstParserRuleReturnScope<IASTNode, IToken> queryRule()
	{
		EnterRule_queryRule();
		EnterRule("queryRule", 14);
		TraceIn("queryRule", 14);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> selectFrom38 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> whereClause39 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> groupByClause40 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> havingClause41 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> orderByClause42 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> skipClause43 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> takeClause44 = default(AstParserRuleReturnScope<IASTNode, IToken>);


				++queryDepth;
			
		try { DebugEnterRule(GrammarFileName, "queryRule");
		DebugLocation(205, 2);
		try
		{
			// Hql.g:212:2: ( selectFrom ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( skipClause )? ( takeClause )? )
			DebugEnterAlt(1);
			// Hql.g:212:4: selectFrom ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( skipClause )? ( takeClause )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(212, 4);
			PushFollow(Follow._selectFrom_in_queryRule943);
			selectFrom38=selectFrom();
			PopFollow();

			adaptor.AddChild(root_0, selectFrom38.Tree);
			DebugLocation(213, 3);
			// Hql.g:213:3: ( whereClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==WHERE))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:213:4: whereClause
				{
				DebugLocation(213, 4);
				PushFollow(Follow._whereClause_in_queryRule948);
				whereClause39=whereClause();
				PopFollow();

				adaptor.AddChild(root_0, whereClause39.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(214, 3);
			// Hql.g:214:3: ( groupByClause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==GROUP))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:214:4: groupByClause
				{
				DebugLocation(214, 4);
				PushFollow(Follow._groupByClause_in_queryRule955);
				groupByClause40=groupByClause();
				PopFollow();

				adaptor.AddChild(root_0, groupByClause40.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(215, 3);
			// Hql.g:215:3: ( havingClause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==HAVING))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:215:4: havingClause
				{
				DebugLocation(215, 4);
				PushFollow(Follow._havingClause_in_queryRule962);
				havingClause41=havingClause();
				PopFollow();

				adaptor.AddChild(root_0, havingClause41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(216, 3);
			// Hql.g:216:3: ( orderByClause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ORDER))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:216:4: orderByClause
				{
				DebugLocation(216, 4);
				PushFollow(Follow._orderByClause_in_queryRule969);
				orderByClause42=orderByClause();
				PopFollow();

				adaptor.AddChild(root_0, orderByClause42.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(217, 3);
			// Hql.g:217:3: ( skipClause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SKIP))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:217:4: skipClause
				{
				DebugLocation(217, 4);
				PushFollow(Follow._skipClause_in_queryRule976);
				skipClause43=skipClause();
				PopFollow();

				adaptor.AddChild(root_0, skipClause43.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(218, 3);
			// Hql.g:218:3: ( takeClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==TAKE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:218:4: takeClause
				{
				DebugLocation(218, 4);
				PushFollow(Follow._takeClause_in_queryRule983);
				takeClause44=takeClause();
				PopFollow();

				adaptor.AddChild(root_0, takeClause44.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


					--queryDepth;
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("queryRule", 14);
			LeaveRule("queryRule", 14);
			LeaveRule_queryRule();
		}
		DebugLocation(219, 2);
		} finally { DebugExitRule(GrammarFileName, "queryRule"); }
		return retval;

	}
	// $ANTLR end "queryRule"

	partial void EnterRule_selectFrom();
	partial void LeaveRule_selectFrom();
	// $ANTLR start "selectFrom"
	// Hql.g:221:1: selectFrom : (s= selectClause )? (f= fromClause )? -> {$f.tree == null && filter}? ^( SELECT_FROM FROM[\"{filter-implied FROM}\"] ( selectClause )? ) -> ^( SELECT_FROM ( fromClause )? ( selectClause )? ) ;
	[GrammarRule("selectFrom")]
	private AstParserRuleReturnScope<IASTNode, IToken> selectFrom()
	{
		EnterRule_selectFrom();
		EnterRule("selectFrom", 15);
		TraceIn("selectFrom", 15);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> s = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> f = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		try { DebugEnterRule(GrammarFileName, "selectFrom");
		DebugLocation(221, 1);
		try
		{
			// Hql.g:222:2: ( (s= selectClause )? (f= fromClause )? -> {$f.tree == null && filter}? ^( SELECT_FROM FROM[\"{filter-implied FROM}\"] ( selectClause )? ) -> ^( SELECT_FROM ( fromClause )? ( selectClause )? ) )
			DebugEnterAlt(1);
			// Hql.g:222:5: (s= selectClause )? (f= fromClause )?
			{
			DebugLocation(222, 5);
			// Hql.g:222:5: (s= selectClause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==SELECT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:222:6: s= selectClause
				{
				DebugLocation(222, 7);
				PushFollow(Follow._selectClause_in_selectFrom1001);
				s=selectClause();
				PopFollow();

				stream_selectClause.Add(s.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(222, 23);
			// Hql.g:222:23: (f= fromClause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==FROM))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:222:24: f= fromClause
				{
				DebugLocation(222, 25);
				PushFollow(Follow._fromClause_in_selectFrom1008);
				f=fromClause();
				PopFollow();

				stream_fromClause.Add(f.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(223, 3);

						if ((f!=null?((IASTNode)f.Tree):default(IASTNode)) == null && !(filter && queryDepth == 1)) 
							throw new RecognitionException("FROM expected (non-filter queries must contain a FROM clause)");
					


			{
			// AST REWRITE
			// elements: selectClause, fromClause, selectClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 227:3: -> {$f.tree == null && filter}? ^( SELECT_FROM FROM[\"{filter-implied FROM}\"] ( selectClause )? )
			if ((f!=null?((IASTNode)f.Tree):default(IASTNode)) == null && filter)
			{
				DebugLocation(227, 35);
				// Hql.g:227:35: ^( SELECT_FROM FROM[\"{filter-implied FROM}\"] ( selectClause )? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(227, 37);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT_FROM, "SELECT_FROM"), root_1);

				DebugLocation(227, 49);
				adaptor.AddChild(root_1, (IASTNode)adaptor.Create(FROM, "{filter-implied FROM}"));
				DebugLocation(227, 79);
				// Hql.g:227:79: ( selectClause )?
				if (stream_selectClause.HasNext)
				{
					DebugLocation(227, 79);
					adaptor.AddChild(root_1, stream_selectClause.NextTree());

				}
				stream_selectClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 228:3: -> ^( SELECT_FROM ( fromClause )? ( selectClause )? )
			{
				DebugLocation(228, 6);
				// Hql.g:228:6: ^( SELECT_FROM ( fromClause )? ( selectClause )? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(228, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT_FROM, "SELECT_FROM"), root_1);

				DebugLocation(228, 20);
				// Hql.g:228:20: ( fromClause )?
				if (stream_fromClause.HasNext)
				{
					DebugLocation(228, 20);
					adaptor.AddChild(root_1, stream_fromClause.NextTree());

				}
				stream_fromClause.Reset();
				DebugLocation(228, 32);
				// Hql.g:228:32: ( selectClause )?
				if (stream_selectClause.HasNext)
				{
					DebugLocation(228, 32);
					adaptor.AddChild(root_1, stream_selectClause.NextTree());

				}
				stream_selectClause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectFrom", 15);
			LeaveRule("selectFrom", 15);
			LeaveRule_selectFrom();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "selectFrom"); }
		return retval;

	}
	// $ANTLR end "selectFrom"

	partial void EnterRule_selectClause();
	partial void LeaveRule_selectClause();
	// $ANTLR start "selectClause"
	// Hql.g:232:1: selectClause : SELECT ^ ( DISTINCT )? ( selectedPropertiesList | newExpression | selectObject ) ;
	[GrammarRule("selectClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> selectClause()
	{
		EnterRule_selectClause();
		EnterRule("selectClause", 16);
		TraceIn("selectClause", 16);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken SELECT45 = default(IToken);
		IToken DISTINCT46 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> selectedPropertiesList47 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> newExpression48 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> selectObject49 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode SELECT45_tree = default(IASTNode);
		IASTNode DISTINCT46_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "selectClause");
		DebugLocation(232, 1);
		try
		{
			// Hql.g:233:2: ( SELECT ^ ( DISTINCT )? ( selectedPropertiesList | newExpression | selectObject ) )
			DebugEnterAlt(1);
			// Hql.g:233:4: SELECT ^ ( DISTINCT )? ( selectedPropertiesList | newExpression | selectObject )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(233, 10);
			SELECT45=(IToken)Match(input,SELECT,Follow._SELECT_in_selectClause1057); 
			SELECT45_tree = (IASTNode)adaptor.Create(SELECT45);
			root_0 = (IASTNode)adaptor.BecomeRoot(SELECT45_tree, root_0);
			DebugLocation(234, 3);
			 WeakKeywords(); 
			DebugLocation(235, 3);
			// Hql.g:235:3: ( DISTINCT )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==DISTINCT))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:235:4: DISTINCT
				{
				DebugLocation(235, 4);
				DISTINCT46=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_selectClause1069); 
				DISTINCT46_tree = (IASTNode)adaptor.Create(DISTINCT46);
				adaptor.AddChild(root_0, DISTINCT46_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(235, 15);
			// Hql.g:235:15: ( selectedPropertiesList | newExpression | selectObject )
			int alt19=3;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case ALL:
			case ANY:
			case AVG:
			case BNOT:
			case CASE:
			case COLON:
			case COUNT:
			case ELEMENTS:
			case EMPTY:
			case EXISTS:
			case FALSE:
			case IDENT:
			case INDICES:
			case MAX:
			case MIN:
			case MINUS:
			case NOT:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case OPEN:
			case PARAM:
			case PLUS:
			case QUOTED_String:
			case SOME:
			case SUM:
			case TRUE:
				{
				alt19 = 1;
				}
				break;
			case NEW:
				{
				alt19 = 2;
				}
				break;
			case OBJECT:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:235:17: selectedPropertiesList
				{
				DebugLocation(235, 17);
				PushFollow(Follow._selectedPropertiesList_in_selectClause1075);
				selectedPropertiesList47=selectedPropertiesList();
				PopFollow();

				adaptor.AddChild(root_0, selectedPropertiesList47.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:235:42: newExpression
				{
				DebugLocation(235, 42);
				PushFollow(Follow._newExpression_in_selectClause1079);
				newExpression48=newExpression();
				PopFollow();

				adaptor.AddChild(root_0, newExpression48.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:235:58: selectObject
				{
				DebugLocation(235, 58);
				PushFollow(Follow._selectObject_in_selectClause1083);
				selectObject49=selectObject();
				PopFollow();

				adaptor.AddChild(root_0, selectObject49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectClause", 16);
			LeaveRule("selectClause", 16);
			LeaveRule_selectClause();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "selectClause"); }
		return retval;

	}
	// $ANTLR end "selectClause"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();
	// $ANTLR start "newExpression"
	// Hql.g:238:1: newExpression : ( NEW path ) op= OPEN selectedPropertiesList CLOSE -> ^( CONSTRUCTOR[$op] path selectedPropertiesList ) ;
	[GrammarRule("newExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 17);
		TraceIn("newExpression", 17);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken op = default(IToken);
		IToken NEW50 = default(IToken);
		IToken CLOSE53 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path51 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> selectedPropertiesList52 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode op_tree = default(IASTNode);
		IASTNode NEW50_tree = default(IASTNode);
		IASTNode CLOSE53_tree = default(IASTNode);
		RewriteRuleITokenStream stream_NEW=new RewriteRuleITokenStream(adaptor,"token NEW");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_selectedPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule selectedPropertiesList");
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(238, 1);
		try
		{
			// Hql.g:239:2: ( ( NEW path ) op= OPEN selectedPropertiesList CLOSE -> ^( CONSTRUCTOR[$op] path selectedPropertiesList ) )
			DebugEnterAlt(1);
			// Hql.g:239:4: ( NEW path ) op= OPEN selectedPropertiesList CLOSE
			{
			DebugLocation(239, 4);
			// Hql.g:239:4: ( NEW path )
			DebugEnterAlt(1);
			// Hql.g:239:5: NEW path
			{
			DebugLocation(239, 5);
			NEW50=(IToken)Match(input,NEW,Follow._NEW_in_newExpression1097);  
			stream_NEW.Add(NEW50);

			DebugLocation(239, 9);
			PushFollow(Follow._path_in_newExpression1099);
			path51=path();
			PopFollow();

			stream_path.Add(path51.Tree);

			}

			DebugLocation(239, 17);
			op=(IToken)Match(input,OPEN,Follow._OPEN_in_newExpression1104);  
			stream_OPEN.Add(op);

			DebugLocation(239, 23);
			PushFollow(Follow._selectedPropertiesList_in_newExpression1106);
			selectedPropertiesList52=selectedPropertiesList();
			PopFollow();

			stream_selectedPropertiesList.Add(selectedPropertiesList52.Tree);
			DebugLocation(239, 46);
			CLOSE53=(IToken)Match(input,CLOSE,Follow._CLOSE_in_newExpression1108);  
			stream_CLOSE.Add(CLOSE53);



			{
			// AST REWRITE
			// elements: path, selectedPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 240:3: -> ^( CONSTRUCTOR[$op] path selectedPropertiesList )
			{
				DebugLocation(240, 6);
				// Hql.g:240:6: ^( CONSTRUCTOR[$op] path selectedPropertiesList )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(240, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(CONSTRUCTOR, op), root_1);

				DebugLocation(240, 25);
				adaptor.AddChild(root_1, stream_path.NextTree());
				DebugLocation(240, 30);
				adaptor.AddChild(root_1, stream_selectedPropertiesList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 17);
			LeaveRule("newExpression", 17);
			LeaveRule_newExpression();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_selectObject();
	partial void LeaveRule_selectObject();
	// $ANTLR start "selectObject"
	// Hql.g:243:1: selectObject : OBJECT ^ OPEN ! identifier CLOSE !;
	[GrammarRule("selectObject")]
	private AstParserRuleReturnScope<IASTNode, IToken> selectObject()
	{
		EnterRule_selectObject();
		EnterRule("selectObject", 18);
		TraceIn("selectObject", 18);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken OBJECT54 = default(IToken);
		IToken OPEN55 = default(IToken);
		IToken CLOSE57 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identifier56 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode OBJECT54_tree = default(IASTNode);
		IASTNode OPEN55_tree = default(IASTNode);
		IASTNode CLOSE57_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "selectObject");
		DebugLocation(243, 3);
		try
		{
			// Hql.g:244:4: ( OBJECT ^ OPEN ! identifier CLOSE !)
			DebugEnterAlt(1);
			// Hql.g:244:6: OBJECT ^ OPEN ! identifier CLOSE !
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(244, 12);
			OBJECT54=(IToken)Match(input,OBJECT,Follow._OBJECT_in_selectObject1134); 
			OBJECT54_tree = (IASTNode)adaptor.Create(OBJECT54);
			root_0 = (IASTNode)adaptor.BecomeRoot(OBJECT54_tree, root_0);
			DebugLocation(244, 18);
			OPEN55=(IToken)Match(input,OPEN,Follow._OPEN_in_selectObject1137); 
			DebugLocation(244, 20);
			PushFollow(Follow._identifier_in_selectObject1140);
			identifier56=identifier();
			PopFollow();

			adaptor.AddChild(root_0, identifier56.Tree);
			DebugLocation(244, 36);
			CLOSE57=(IToken)Match(input,CLOSE,Follow._CLOSE_in_selectObject1142); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectObject", 18);
			LeaveRule("selectObject", 18);
			LeaveRule_selectObject();
		}
		DebugLocation(245, 3);
		} finally { DebugExitRule(GrammarFileName, "selectObject"); }
		return retval;

	}
	// $ANTLR end "selectObject"

	partial void EnterRule_fromClause();
	partial void LeaveRule_fromClause();
	// $ANTLR start "fromClause"
	// Hql.g:251:1: fromClause : FROM ^ fromRange ( fromJoin | COMMA ! fromRange )* ;
	[GrammarRule("fromClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> fromClause()
	{
		EnterRule_fromClause();
		EnterRule("fromClause", 19);
		TraceIn("fromClause", 19);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken FROM58 = default(IToken);
		IToken COMMA61 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> fromRange59 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> fromJoin60 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> fromRange62 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode FROM58_tree = default(IASTNode);
		IASTNode COMMA61_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "fromClause");
		DebugLocation(251, 1);
		try
		{
			// Hql.g:252:2: ( FROM ^ fromRange ( fromJoin | COMMA ! fromRange )* )
			DebugEnterAlt(1);
			// Hql.g:252:4: FROM ^ fromRange ( fromJoin | COMMA ! fromRange )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(252, 8);
			FROM58=(IToken)Match(input,FROM,Follow._FROM_in_fromClause1160); 
			FROM58_tree = (IASTNode)adaptor.Create(FROM58);
			root_0 = (IASTNode)adaptor.BecomeRoot(FROM58_tree, root_0);
			DebugLocation(252, 10);
			 WeakKeywords(); 
			DebugLocation(252, 30);
			PushFollow(Follow._fromRange_in_fromClause1165);
			fromRange59=fromRange();
			PopFollow();

			adaptor.AddChild(root_0, fromRange59.Tree);
			DebugLocation(252, 40);
			// Hql.g:252:40: ( fromJoin | COMMA ! fromRange )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=3;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==FULL||LA20_1==INNER||LA20_1==JOIN||LA20_1==LEFT||LA20_1==RIGHT))
				{
					alt20 = 1;
				}
				else if ((LA20_1==COMMA))
				{
					alt20 = 2;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:252:42: fromJoin
					{
					DebugLocation(252, 42);
					PushFollow(Follow._fromJoin_in_fromClause1169);
					fromJoin60=fromJoin();
					PopFollow();

					adaptor.AddChild(root_0, fromJoin60.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:252:53: COMMA ! fromRange
					{
					DebugLocation(252, 58);
					COMMA61=(IToken)Match(input,COMMA,Follow._COMMA_in_fromClause1173); 
					DebugLocation(252, 60);
					 WeakKeywords(); 
					DebugLocation(252, 80);
					PushFollow(Follow._fromRange_in_fromClause1178);
					fromRange62=fromRange();
					PopFollow();

					adaptor.AddChild(root_0, fromRange62.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromClause", 19);
			LeaveRule("fromClause", 19);
			LeaveRule_fromClause();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "fromClause"); }
		return retval;

	}
	// $ANTLR end "fromClause"

	partial void EnterRule_fromJoin();
	partial void LeaveRule_fromJoin();
	// $ANTLR start "fromJoin"
	// Hql.g:255:1: fromJoin : ( ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? path ( asAlias )? ( propertyFetch )? ( withClause )? | ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? ELEMENTS ! OPEN ! path CLOSE ! ( asAlias )? ( propertyFetch )? ( withClause )? );
	[GrammarRule("fromJoin")]
	private AstParserRuleReturnScope<IASTNode, IToken> fromJoin()
	{
		EnterRule_fromJoin();
		EnterRule("fromJoin", 20);
		TraceIn("fromJoin", 20);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken set63 = default(IToken);
		IToken OUTER64 = default(IToken);
		IToken FULL65 = default(IToken);
		IToken INNER66 = default(IToken);
		IToken JOIN67 = default(IToken);
		IToken FETCH68 = default(IToken);
		IToken set73 = default(IToken);
		IToken OUTER74 = default(IToken);
		IToken FULL75 = default(IToken);
		IToken INNER76 = default(IToken);
		IToken JOIN77 = default(IToken);
		IToken FETCH78 = default(IToken);
		IToken ELEMENTS79 = default(IToken);
		IToken OPEN80 = default(IToken);
		IToken CLOSE82 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path69 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> asAlias70 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> propertyFetch71 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> withClause72 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path81 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> asAlias83 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> propertyFetch84 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> withClause85 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode set63_tree = default(IASTNode);
		IASTNode OUTER64_tree = default(IASTNode);
		IASTNode FULL65_tree = default(IASTNode);
		IASTNode INNER66_tree = default(IASTNode);
		IASTNode JOIN67_tree = default(IASTNode);
		IASTNode FETCH68_tree = default(IASTNode);
		IASTNode set73_tree = default(IASTNode);
		IASTNode OUTER74_tree = default(IASTNode);
		IASTNode FULL75_tree = default(IASTNode);
		IASTNode INNER76_tree = default(IASTNode);
		IASTNode JOIN77_tree = default(IASTNode);
		IASTNode FETCH78_tree = default(IASTNode);
		IASTNode ELEMENTS79_tree = default(IASTNode);
		IASTNode OPEN80_tree = default(IASTNode);
		IASTNode CLOSE82_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "fromJoin");
		DebugLocation(255, 1);
		try
		{
			// Hql.g:256:2: ( ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? path ( asAlias )? ( propertyFetch )? ( withClause )? | ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? ELEMENTS ! OPEN ! path CLOSE ! ( asAlias )? ( propertyFetch )? ( withClause )? )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case LEFT:
			case RIGHT:
				{
				int LA33_2 = input.LA(2);

				if ((LA33_2==OUTER))
				{
					int LA33_3 = input.LA(3);

					if ((LA33_3==JOIN))
					{
						switch (input.LA(4))
						{
						case FETCH:
							{
							int LA33_5 = input.LA(5);

							if ((LA33_5==IDENT))
							{
								alt33 = 1;
							}
							else if ((LA33_5==ELEMENTS))
							{
								alt33 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 33, 6, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case IDENT:
							{
							alt33 = 1;
							}
							break;
						case ELEMENTS:
							{
							alt33 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA33_2==JOIN))
				{
					switch (input.LA(3))
					{
					case FETCH:
						{
						int LA33_4 = input.LA(4);

						if ((LA33_4==IDENT))
						{
							alt33 = 1;
						}
						else if ((LA33_4==ELEMENTS))
						{
							alt33 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 6, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENT:
						{
						alt33 = 1;
						}
						break;
					case ELEMENTS:
						{
						alt33 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FULL:
				{
				int LA33_2 = input.LA(2);

				if ((LA33_2==JOIN))
				{
					switch (input.LA(3))
					{
					case FETCH:
						{
						int LA33_4 = input.LA(4);

						if ((LA33_4==IDENT))
						{
							alt33 = 1;
						}
						else if ((LA33_4==ELEMENTS))
						{
							alt33 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 6, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENT:
						{
						alt33 = 1;
						}
						break;
					case ELEMENTS:
						{
						alt33 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INNER:
				{
				int LA33_2 = input.LA(2);

				if ((LA33_2==JOIN))
				{
					switch (input.LA(3))
					{
					case FETCH:
						{
						int LA33_4 = input.LA(4);

						if ((LA33_4==IDENT))
						{
							alt33 = 1;
						}
						else if ((LA33_4==ELEMENTS))
						{
							alt33 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 6, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENT:
						{
						alt33 = 1;
						}
						break;
					case ELEMENTS:
						{
						alt33 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case JOIN:
				{
				switch (input.LA(2))
				{
				case FETCH:
					{
					int LA33_3 = input.LA(3);

					if ((LA33_3==IDENT))
					{
						alt33 = 1;
					}
					else if ((LA33_3==ELEMENTS))
					{
						alt33 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					alt33 = 1;
					}
					break;
				case ELEMENTS:
					{
					alt33 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:256:4: ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? path ( asAlias )? ( propertyFetch )? ( withClause )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(256, 4);
				// Hql.g:256:4: ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )?
				int alt22=4;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case LEFT:
				case RIGHT:
					{
					alt22 = 1;
					}
					break;
				case FULL:
					{
					alt22 = 2;
					}
					break;
				case INNER:
					{
					alt22 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:256:6: ( ( LEFT | RIGHT ) ( OUTER )? )
					{
					DebugLocation(256, 6);
					// Hql.g:256:6: ( ( LEFT | RIGHT ) ( OUTER )? )
					DebugEnterAlt(1);
					// Hql.g:256:8: ( LEFT | RIGHT ) ( OUTER )?
					{
					DebugLocation(256, 8);

					set63=(IToken)input.LT(1);
					if (input.LA(1)==LEFT||input.LA(1)==RIGHT)
					{
						input.Consume();
						adaptor.AddChild(root_0, (IASTNode)adaptor.Create(set63));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(256, 25);
					// Hql.g:256:25: ( OUTER )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==OUTER))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:256:26: OUTER
						{
						DebugLocation(256, 26);
						OUTER64=(IToken)Match(input,OUTER,Follow._OUTER_in_fromJoin1207); 
						OUTER64_tree = (IASTNode)adaptor.Create(OUTER64);
						adaptor.AddChild(root_0, OUTER64_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(21); }


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:256:38: FULL
					{
					DebugLocation(256, 38);
					FULL65=(IToken)Match(input,FULL,Follow._FULL_in_fromJoin1215); 
					FULL65_tree = (IASTNode)adaptor.Create(FULL65);
					adaptor.AddChild(root_0, FULL65_tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:256:45: INNER
					{
					DebugLocation(256, 45);
					INNER66=(IToken)Match(input,INNER,Follow._INNER_in_fromJoin1219); 
					INNER66_tree = (IASTNode)adaptor.Create(INNER66);
					adaptor.AddChild(root_0, INNER66_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(256, 58);
				JOIN67=(IToken)Match(input,JOIN,Follow._JOIN_in_fromJoin1224); 
				JOIN67_tree = (IASTNode)adaptor.Create(JOIN67);
				root_0 = (IASTNode)adaptor.BecomeRoot(JOIN67_tree, root_0);
				DebugLocation(256, 60);
				// Hql.g:256:60: ( FETCH )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==FETCH))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:256:61: FETCH
					{
					DebugLocation(256, 61);
					FETCH68=(IToken)Match(input,FETCH,Follow._FETCH_in_fromJoin1228); 
					FETCH68_tree = (IASTNode)adaptor.Create(FETCH68);
					adaptor.AddChild(root_0, FETCH68_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(256, 69);
				PushFollow(Follow._path_in_fromJoin1232);
				path69=path();
				PopFollow();

				adaptor.AddChild(root_0, path69.Tree);
				DebugLocation(256, 74);
				// Hql.g:256:74: ( asAlias )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==AS||LA24_1==IDENT))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:256:75: asAlias
					{
					DebugLocation(256, 75);
					PushFollow(Follow._asAlias_in_fromJoin1235);
					asAlias70=asAlias();
					PopFollow();

					adaptor.AddChild(root_0, asAlias70.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(256, 85);
				// Hql.g:256:85: ( propertyFetch )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==FETCH))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:256:86: propertyFetch
					{
					DebugLocation(256, 86);
					PushFollow(Follow._propertyFetch_in_fromJoin1240);
					propertyFetch71=propertyFetch();
					PopFollow();

					adaptor.AddChild(root_0, propertyFetch71.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(256, 102);
				// Hql.g:256:102: ( withClause )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==WITH))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:256:103: withClause
					{
					DebugLocation(256, 103);
					PushFollow(Follow._withClause_in_fromJoin1245);
					withClause72=withClause();
					PopFollow();

					adaptor.AddChild(root_0, withClause72.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:257:4: ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )? JOIN ^ ( FETCH )? ELEMENTS ! OPEN ! path CLOSE ! ( asAlias )? ( propertyFetch )? ( withClause )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(257, 4);
				// Hql.g:257:4: ( ( ( LEFT | RIGHT ) ( OUTER )? ) | FULL | INNER )?
				int alt28=4;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				switch (input.LA(1))
				{
				case LEFT:
				case RIGHT:
					{
					alt28 = 1;
					}
					break;
				case FULL:
					{
					alt28 = 2;
					}
					break;
				case INNER:
					{
					alt28 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:257:6: ( ( LEFT | RIGHT ) ( OUTER )? )
					{
					DebugLocation(257, 6);
					// Hql.g:257:6: ( ( LEFT | RIGHT ) ( OUTER )? )
					DebugEnterAlt(1);
					// Hql.g:257:8: ( LEFT | RIGHT ) ( OUTER )?
					{
					DebugLocation(257, 8);

					set73=(IToken)input.LT(1);
					if (input.LA(1)==LEFT||input.LA(1)==RIGHT)
					{
						input.Consume();
						adaptor.AddChild(root_0, (IASTNode)adaptor.Create(set73));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(257, 25);
					// Hql.g:257:25: ( OUTER )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==OUTER))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:257:26: OUTER
						{
						DebugLocation(257, 26);
						OUTER74=(IToken)Match(input,OUTER,Follow._OUTER_in_fromJoin1267); 
						OUTER74_tree = (IASTNode)adaptor.Create(OUTER74);
						adaptor.AddChild(root_0, OUTER74_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(27); }


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:257:38: FULL
					{
					DebugLocation(257, 38);
					FULL75=(IToken)Match(input,FULL,Follow._FULL_in_fromJoin1275); 
					FULL75_tree = (IASTNode)adaptor.Create(FULL75);
					adaptor.AddChild(root_0, FULL75_tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:257:45: INNER
					{
					DebugLocation(257, 45);
					INNER76=(IToken)Match(input,INNER,Follow._INNER_in_fromJoin1279); 
					INNER76_tree = (IASTNode)adaptor.Create(INNER76);
					adaptor.AddChild(root_0, INNER76_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(257, 58);
				JOIN77=(IToken)Match(input,JOIN,Follow._JOIN_in_fromJoin1284); 
				JOIN77_tree = (IASTNode)adaptor.Create(JOIN77);
				root_0 = (IASTNode)adaptor.BecomeRoot(JOIN77_tree, root_0);
				DebugLocation(257, 60);
				// Hql.g:257:60: ( FETCH )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==FETCH))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:257:61: FETCH
					{
					DebugLocation(257, 61);
					FETCH78=(IToken)Match(input,FETCH,Follow._FETCH_in_fromJoin1288); 
					FETCH78_tree = (IASTNode)adaptor.Create(FETCH78);
					adaptor.AddChild(root_0, FETCH78_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(257, 77);
				ELEMENTS79=(IToken)Match(input,ELEMENTS,Follow._ELEMENTS_in_fromJoin1292); 
				DebugLocation(257, 83);
				OPEN80=(IToken)Match(input,OPEN,Follow._OPEN_in_fromJoin1295); 
				DebugLocation(257, 85);
				PushFollow(Follow._path_in_fromJoin1298);
				path81=path();
				PopFollow();

				adaptor.AddChild(root_0, path81.Tree);
				DebugLocation(257, 95);
				CLOSE82=(IToken)Match(input,CLOSE,Follow._CLOSE_in_fromJoin1300); 
				DebugLocation(257, 97);
				// Hql.g:257:97: ( asAlias )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==AS||LA30_1==IDENT))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:257:98: asAlias
					{
					DebugLocation(257, 98);
					PushFollow(Follow._asAlias_in_fromJoin1304);
					asAlias83=asAlias();
					PopFollow();

					adaptor.AddChild(root_0, asAlias83.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(257, 108);
				// Hql.g:257:108: ( propertyFetch )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==FETCH))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:257:109: propertyFetch
					{
					DebugLocation(257, 109);
					PushFollow(Follow._propertyFetch_in_fromJoin1309);
					propertyFetch84=propertyFetch();
					PopFollow();

					adaptor.AddChild(root_0, propertyFetch84.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(257, 125);
				// Hql.g:257:125: ( withClause )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==WITH))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:257:126: withClause
					{
					DebugLocation(257, 126);
					PushFollow(Follow._withClause_in_fromJoin1314);
					withClause85=withClause();
					PopFollow();

					adaptor.AddChild(root_0, withClause85.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromJoin", 20);
			LeaveRule("fromJoin", 20);
			LeaveRule_fromJoin();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "fromJoin"); }
		return retval;

	}
	// $ANTLR end "fromJoin"

	partial void EnterRule_withClause();
	partial void LeaveRule_withClause();
	// $ANTLR start "withClause"
	// Hql.g:260:1: withClause : WITH ^ logicalExpression ;
	[GrammarRule("withClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> withClause()
	{
		EnterRule_withClause();
		EnterRule("withClause", 21);
		TraceIn("withClause", 21);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken WITH86 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> logicalExpression87 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode WITH86_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "withClause");
		DebugLocation(260, 1);
		try
		{
			// Hql.g:261:2: ( WITH ^ logicalExpression )
			DebugEnterAlt(1);
			// Hql.g:261:4: WITH ^ logicalExpression
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(261, 8);
			WITH86=(IToken)Match(input,WITH,Follow._WITH_in_withClause1327); 
			WITH86_tree = (IASTNode)adaptor.Create(WITH86);
			root_0 = (IASTNode)adaptor.BecomeRoot(WITH86_tree, root_0);
			DebugLocation(261, 10);
			PushFollow(Follow._logicalExpression_in_withClause1330);
			logicalExpression87=logicalExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalExpression87.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("withClause", 21);
			LeaveRule("withClause", 21);
			LeaveRule_withClause();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "withClause"); }
		return retval;

	}
	// $ANTLR end "withClause"

	partial void EnterRule_fromRange();
	partial void LeaveRule_fromRange();
	// $ANTLR start "fromRange"
	// Hql.g:264:1: fromRange : ( fromClassOrOuterQueryPath | inClassDeclaration | inCollectionDeclaration | inCollectionElementsDeclaration );
	[GrammarRule("fromRange")]
	private AstParserRuleReturnScope<IASTNode, IToken> fromRange()
	{
		EnterRule_fromRange();
		EnterRule("fromRange", 22);
		TraceIn("fromRange", 22);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> fromClassOrOuterQueryPath88 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> inClassDeclaration89 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> inCollectionDeclaration90 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> inCollectionElementsDeclaration91 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "fromRange");
		DebugLocation(264, 1);
		try
		{
			// Hql.g:265:2: ( fromClassOrOuterQueryPath | inClassDeclaration | inCollectionDeclaration | inCollectionElementsDeclaration )
			int alt34=4;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==EOF||LA34_2==AS||LA34_2==CLOSE||LA34_2==COMMA||LA34_2==DOT||LA34_2==FETCH||LA34_2==FULL||LA34_2==GROUP||LA34_2==HAVING||LA34_2==IDENT||LA34_2==INNER||LA34_2==JOIN||LA34_2==LEFT||LA34_2==ORDER||LA34_2==RIGHT||LA34_2==SKIP||LA34_2==TAKE||LA34_2==UNION||LA34_2==WHERE))
				{
					alt34 = 1;
				}
				else if ((LA34_2==IN))
				{
					int LA34_3 = input.LA(3);

					if ((LA34_3==ELEMENTS))
					{
						alt34 = 4;
					}
					else if ((LA34_3==CLASS||LA34_3==IDENT))
					{
						alt34 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IN:
				{
				alt34 = 3;
				}
				break;
			case ELEMENTS:
				{
				alt34 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:265:4: fromClassOrOuterQueryPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(265, 4);
				PushFollow(Follow._fromClassOrOuterQueryPath_in_fromRange1341);
				fromClassOrOuterQueryPath88=fromClassOrOuterQueryPath();
				PopFollow();

				adaptor.AddChild(root_0, fromClassOrOuterQueryPath88.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:266:4: inClassDeclaration
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._inClassDeclaration_in_fromRange1346);
				inClassDeclaration89=inClassDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, inClassDeclaration89.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:267:4: inCollectionDeclaration
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._inCollectionDeclaration_in_fromRange1351);
				inCollectionDeclaration90=inCollectionDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, inCollectionDeclaration90.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Hql.g:268:4: inCollectionElementsDeclaration
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(268, 4);
				PushFollow(Follow._inCollectionElementsDeclaration_in_fromRange1356);
				inCollectionElementsDeclaration91=inCollectionElementsDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, inCollectionElementsDeclaration91.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromRange", 22);
			LeaveRule("fromRange", 22);
			LeaveRule_fromRange();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "fromRange"); }
		return retval;

	}
	// $ANTLR end "fromRange"

	partial void EnterRule_fromClassOrOuterQueryPath();
	partial void LeaveRule_fromClassOrOuterQueryPath();
	// $ANTLR start "fromClassOrOuterQueryPath"
	// Hql.g:271:1: fromClassOrOuterQueryPath : path ( asAlias )? ( propertyFetch )? -> ^( RANGE path ( asAlias )? ( propertyFetch )? ) ;
	[GrammarRule("fromClassOrOuterQueryPath")]
	private AstParserRuleReturnScope<IASTNode, IToken> fromClassOrOuterQueryPath()
	{
		EnterRule_fromClassOrOuterQueryPath();
		EnterRule("fromClassOrOuterQueryPath", 23);
		TraceIn("fromClassOrOuterQueryPath", 23);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> path92 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> asAlias93 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> propertyFetch94 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_asAlias=new RewriteRuleSubtreeStream(adaptor,"rule asAlias");
		RewriteRuleSubtreeStream stream_propertyFetch=new RewriteRuleSubtreeStream(adaptor,"rule propertyFetch");
		try { DebugEnterRule(GrammarFileName, "fromClassOrOuterQueryPath");
		DebugLocation(271, 1);
		try
		{
			// Hql.g:272:2: ( path ( asAlias )? ( propertyFetch )? -> ^( RANGE path ( asAlias )? ( propertyFetch )? ) )
			DebugEnterAlt(1);
			// Hql.g:272:4: path ( asAlias )? ( propertyFetch )?
			{
			DebugLocation(272, 4);
			PushFollow(Follow._path_in_fromClassOrOuterQueryPath1368);
			path92=path();
			PopFollow();

			stream_path.Add(path92.Tree);
			DebugLocation(272, 9);
			 WeakKeywords(); 
			DebugLocation(272, 29);
			// Hql.g:272:29: ( asAlias )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==AS||LA35_1==IDENT))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:272:30: asAlias
				{
				DebugLocation(272, 30);
				PushFollow(Follow._asAlias_in_fromClassOrOuterQueryPath1373);
				asAlias93=asAlias();
				PopFollow();

				stream_asAlias.Add(asAlias93.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(272, 40);
			// Hql.g:272:40: ( propertyFetch )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==FETCH))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:272:41: propertyFetch
				{
				DebugLocation(272, 41);
				PushFollow(Follow._propertyFetch_in_fromClassOrOuterQueryPath1378);
				propertyFetch94=propertyFetch();
				PopFollow();

				stream_propertyFetch.Add(propertyFetch94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: path, asAlias, propertyFetch
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 273:3: -> ^( RANGE path ( asAlias )? ( propertyFetch )? )
			{
				DebugLocation(273, 6);
				// Hql.g:273:6: ^( RANGE path ( asAlias )? ( propertyFetch )? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(273, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(RANGE, "RANGE"), root_1);

				DebugLocation(273, 14);
				adaptor.AddChild(root_1, stream_path.NextTree());
				DebugLocation(273, 19);
				// Hql.g:273:19: ( asAlias )?
				if (stream_asAlias.HasNext)
				{
					DebugLocation(273, 19);
					adaptor.AddChild(root_1, stream_asAlias.NextTree());

				}
				stream_asAlias.Reset();
				DebugLocation(273, 28);
				// Hql.g:273:28: ( propertyFetch )?
				if (stream_propertyFetch.HasNext)
				{
					DebugLocation(273, 28);
					adaptor.AddChild(root_1, stream_propertyFetch.NextTree());

				}
				stream_propertyFetch.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromClassOrOuterQueryPath", 23);
			LeaveRule("fromClassOrOuterQueryPath", 23);
			LeaveRule_fromClassOrOuterQueryPath();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "fromClassOrOuterQueryPath"); }
		return retval;

	}
	// $ANTLR end "fromClassOrOuterQueryPath"

	partial void EnterRule_inClassDeclaration();
	partial void LeaveRule_inClassDeclaration();
	// $ANTLR start "inClassDeclaration"
	// Hql.g:276:1: inClassDeclaration : alias IN ( CLASS )? path -> ^( RANGE path alias ) ;
	[GrammarRule("inClassDeclaration")]
	private AstParserRuleReturnScope<IASTNode, IToken> inClassDeclaration()
	{
		EnterRule_inClassDeclaration();
		EnterRule("inClassDeclaration", 24);
		TraceIn("inClassDeclaration", 24);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken IN96 = default(IToken);
		IToken CLASS97 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> alias95 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path98 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode IN96_tree = default(IASTNode);
		IASTNode CLASS97_tree = default(IASTNode);
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		try { DebugEnterRule(GrammarFileName, "inClassDeclaration");
		DebugLocation(276, 1);
		try
		{
			// Hql.g:277:2: ( alias IN ( CLASS )? path -> ^( RANGE path alias ) )
			DebugEnterAlt(1);
			// Hql.g:277:4: alias IN ( CLASS )? path
			{
			DebugLocation(277, 4);
			PushFollow(Follow._alias_in_inClassDeclaration1408);
			alias95=alias();
			PopFollow();

			stream_alias.Add(alias95.Tree);
			DebugLocation(277, 10);
			IN96=(IToken)Match(input,IN,Follow._IN_in_inClassDeclaration1410);  
			stream_IN.Add(IN96);

			DebugLocation(277, 13);
			// Hql.g:277:13: ( CLASS )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==CLASS))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:277:13: CLASS
				{
				DebugLocation(277, 13);
				CLASS97=(IToken)Match(input,CLASS,Follow._CLASS_in_inClassDeclaration1412);  
				stream_CLASS.Add(CLASS97);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(277, 20);
			PushFollow(Follow._path_in_inClassDeclaration1415);
			path98=path();
			PopFollow();

			stream_path.Add(path98.Tree);


			{
			// AST REWRITE
			// elements: path, alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 278:3: -> ^( RANGE path alias )
			{
				DebugLocation(278, 6);
				// Hql.g:278:6: ^( RANGE path alias )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(278, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(RANGE, "RANGE"), root_1);

				DebugLocation(278, 14);
				adaptor.AddChild(root_1, stream_path.NextTree());
				DebugLocation(278, 19);
				adaptor.AddChild(root_1, stream_alias.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inClassDeclaration", 24);
			LeaveRule("inClassDeclaration", 24);
			LeaveRule_inClassDeclaration();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "inClassDeclaration"); }
		return retval;

	}
	// $ANTLR end "inClassDeclaration"

	partial void EnterRule_inCollectionDeclaration();
	partial void LeaveRule_inCollectionDeclaration();
	// $ANTLR start "inCollectionDeclaration"
	// Hql.g:281:1: inCollectionDeclaration : IN OPEN path CLOSE alias -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) ;
	[GrammarRule("inCollectionDeclaration")]
	private AstParserRuleReturnScope<IASTNode, IToken> inCollectionDeclaration()
	{
		EnterRule_inCollectionDeclaration();
		EnterRule("inCollectionDeclaration", 25);
		TraceIn("inCollectionDeclaration", 25);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken IN99 = default(IToken);
		IToken OPEN100 = default(IToken);
		IToken CLOSE102 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path101 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> alias103 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode IN99_tree = default(IASTNode);
		IASTNode OPEN100_tree = default(IASTNode);
		IASTNode CLOSE102_tree = default(IASTNode);
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
		try { DebugEnterRule(GrammarFileName, "inCollectionDeclaration");
		DebugLocation(281, 4);
		try
		{
			// Hql.g:282:5: ( IN OPEN path CLOSE alias -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) )
			DebugEnterAlt(1);
			// Hql.g:282:7: IN OPEN path CLOSE alias
			{
			DebugLocation(282, 7);
			IN99=(IToken)Match(input,IN,Follow._IN_in_inCollectionDeclaration1443);  
			stream_IN.Add(IN99);

			DebugLocation(282, 10);
			OPEN100=(IToken)Match(input,OPEN,Follow._OPEN_in_inCollectionDeclaration1445);  
			stream_OPEN.Add(OPEN100);

			DebugLocation(282, 15);
			PushFollow(Follow._path_in_inCollectionDeclaration1447);
			path101=path();
			PopFollow();

			stream_path.Add(path101.Tree);
			DebugLocation(282, 20);
			CLOSE102=(IToken)Match(input,CLOSE,Follow._CLOSE_in_inCollectionDeclaration1449);  
			stream_CLOSE.Add(CLOSE102);

			DebugLocation(282, 26);
			PushFollow(Follow._alias_in_inCollectionDeclaration1451);
			alias103=alias();
			PopFollow();

			stream_alias.Add(alias103.Tree);


			{
			// AST REWRITE
			// elements: path, alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 283:6: -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
			{
				DebugLocation(283, 9);
				// Hql.g:283:9: ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(283, 11);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(JOIN, "join"), root_1);

				DebugLocation(283, 24);
				adaptor.AddChild(root_1, (IASTNode)adaptor.Create(INNER, "inner"));
				DebugLocation(283, 39);
				adaptor.AddChild(root_1, stream_path.NextTree());
				DebugLocation(283, 44);
				adaptor.AddChild(root_1, stream_alias.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inCollectionDeclaration", 25);
			LeaveRule("inCollectionDeclaration", 25);
			LeaveRule_inCollectionDeclaration();
		}
		DebugLocation(284, 4);
		} finally { DebugExitRule(GrammarFileName, "inCollectionDeclaration"); }
		return retval;

	}
	// $ANTLR end "inCollectionDeclaration"

	partial void EnterRule_inCollectionElementsDeclaration();
	partial void LeaveRule_inCollectionElementsDeclaration();
	// $ANTLR start "inCollectionElementsDeclaration"
	// Hql.g:286:1: inCollectionElementsDeclaration : ( alias IN ELEMENTS OPEN path CLOSE -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) | ELEMENTS OPEN path CLOSE AS alias -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) );
	[GrammarRule("inCollectionElementsDeclaration")]
	private AstParserRuleReturnScope<IASTNode, IToken> inCollectionElementsDeclaration()
	{
		EnterRule_inCollectionElementsDeclaration();
		EnterRule("inCollectionElementsDeclaration", 26);
		TraceIn("inCollectionElementsDeclaration", 26);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken IN105 = default(IToken);
		IToken ELEMENTS106 = default(IToken);
		IToken OPEN107 = default(IToken);
		IToken CLOSE109 = default(IToken);
		IToken ELEMENTS110 = default(IToken);
		IToken OPEN111 = default(IToken);
		IToken CLOSE113 = default(IToken);
		IToken AS114 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> alias104 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path108 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path112 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> alias115 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode IN105_tree = default(IASTNode);
		IASTNode ELEMENTS106_tree = default(IASTNode);
		IASTNode OPEN107_tree = default(IASTNode);
		IASTNode CLOSE109_tree = default(IASTNode);
		IASTNode ELEMENTS110_tree = default(IASTNode);
		IASTNode OPEN111_tree = default(IASTNode);
		IASTNode CLOSE113_tree = default(IASTNode);
		IASTNode AS114_tree = default(IASTNode);
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_ELEMENTS=new RewriteRuleITokenStream(adaptor,"token ELEMENTS");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		try { DebugEnterRule(GrammarFileName, "inCollectionElementsDeclaration");
		DebugLocation(286, 4);
		try
		{
			// Hql.g:287:2: ( alias IN ELEMENTS OPEN path CLOSE -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) | ELEMENTS OPEN path CLOSE AS alias -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==IDENT))
			{
				alt38 = 1;
			}
			else if ((LA38_1==ELEMENTS))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:287:4: alias IN ELEMENTS OPEN path CLOSE
				{
				DebugLocation(287, 4);
				PushFollow(Follow._alias_in_inCollectionElementsDeclaration1485);
				alias104=alias();
				PopFollow();

				stream_alias.Add(alias104.Tree);
				DebugLocation(287, 10);
				IN105=(IToken)Match(input,IN,Follow._IN_in_inCollectionElementsDeclaration1487);  
				stream_IN.Add(IN105);

				DebugLocation(287, 13);
				ELEMENTS106=(IToken)Match(input,ELEMENTS,Follow._ELEMENTS_in_inCollectionElementsDeclaration1489);  
				stream_ELEMENTS.Add(ELEMENTS106);

				DebugLocation(287, 22);
				OPEN107=(IToken)Match(input,OPEN,Follow._OPEN_in_inCollectionElementsDeclaration1491);  
				stream_OPEN.Add(OPEN107);

				DebugLocation(287, 27);
				PushFollow(Follow._path_in_inCollectionElementsDeclaration1493);
				path108=path();
				PopFollow();

				stream_path.Add(path108.Tree);
				DebugLocation(287, 32);
				CLOSE109=(IToken)Match(input,CLOSE,Follow._CLOSE_in_inCollectionElementsDeclaration1495);  
				stream_CLOSE.Add(CLOSE109);



				{
				// AST REWRITE
				// elements: path, alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 288:3: -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
				{
					DebugLocation(288, 6);
					// Hql.g:288:6: ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(288, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(JOIN, "join"), root_1);

					DebugLocation(288, 21);
					adaptor.AddChild(root_1, (IASTNode)adaptor.Create(INNER, "inner"));
					DebugLocation(288, 36);
					adaptor.AddChild(root_1, stream_path.NextTree());
					DebugLocation(288, 41);
					adaptor.AddChild(root_1, stream_alias.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:289:4: ELEMENTS OPEN path CLOSE AS alias
				{
				DebugLocation(289, 4);
				ELEMENTS110=(IToken)Match(input,ELEMENTS,Follow._ELEMENTS_in_inCollectionElementsDeclaration1517);  
				stream_ELEMENTS.Add(ELEMENTS110);

				DebugLocation(289, 13);
				OPEN111=(IToken)Match(input,OPEN,Follow._OPEN_in_inCollectionElementsDeclaration1519);  
				stream_OPEN.Add(OPEN111);

				DebugLocation(289, 18);
				PushFollow(Follow._path_in_inCollectionElementsDeclaration1521);
				path112=path();
				PopFollow();

				stream_path.Add(path112.Tree);
				DebugLocation(289, 23);
				CLOSE113=(IToken)Match(input,CLOSE,Follow._CLOSE_in_inCollectionElementsDeclaration1523);  
				stream_CLOSE.Add(CLOSE113);

				DebugLocation(289, 29);
				AS114=(IToken)Match(input,AS,Follow._AS_in_inCollectionElementsDeclaration1525);  
				stream_AS.Add(AS114);

				DebugLocation(289, 32);
				PushFollow(Follow._alias_in_inCollectionElementsDeclaration1527);
				alias115=alias();
				PopFollow();

				stream_alias.Add(alias115.Tree);


				{
				// AST REWRITE
				// elements: path, alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 290:3: -> ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
				{
					DebugLocation(290, 6);
					// Hql.g:290:6: ^( JOIN[\"join\"] INNER[\"inner\"] path alias )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(290, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(JOIN, "join"), root_1);

					DebugLocation(290, 21);
					adaptor.AddChild(root_1, (IASTNode)adaptor.Create(INNER, "inner"));
					DebugLocation(290, 36);
					adaptor.AddChild(root_1, stream_path.NextTree());
					DebugLocation(290, 41);
					adaptor.AddChild(root_1, stream_alias.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inCollectionElementsDeclaration", 26);
			LeaveRule("inCollectionElementsDeclaration", 26);
			LeaveRule_inCollectionElementsDeclaration();
		}
		DebugLocation(291, 4);
		} finally { DebugExitRule(GrammarFileName, "inCollectionElementsDeclaration"); }
		return retval;

	}
	// $ANTLR end "inCollectionElementsDeclaration"

	partial void EnterRule_asAlias();
	partial void LeaveRule_asAlias();
	// $ANTLR start "asAlias"
	// Hql.g:294:1: asAlias : ( AS !)? alias ;
	[GrammarRule("asAlias")]
	private AstParserRuleReturnScope<IASTNode, IToken> asAlias()
	{
		EnterRule_asAlias();
		EnterRule("asAlias", 27);
		TraceIn("asAlias", 27);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken AS116 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> alias117 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode AS116_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "asAlias");
		DebugLocation(294, 1);
		try
		{
			// Hql.g:295:2: ( ( AS !)? alias )
			DebugEnterAlt(1);
			// Hql.g:295:4: ( AS !)? alias
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(295, 4);
			// Hql.g:295:4: ( AS !)?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==AS))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:295:5: AS !
				{
				DebugLocation(295, 7);
				AS116=(IToken)Match(input,AS,Follow._AS_in_asAlias1559); 

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(295, 11);
			PushFollow(Follow._alias_in_asAlias1564);
			alias117=alias();
			PopFollow();

			adaptor.AddChild(root_0, alias117.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("asAlias", 27);
			LeaveRule("asAlias", 27);
			LeaveRule_asAlias();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "asAlias"); }
		return retval;

	}
	// $ANTLR end "asAlias"

	partial void EnterRule_alias();
	partial void LeaveRule_alias();
	// $ANTLR start "alias"
	// Hql.g:297:1: alias : i= identifier -> ^( ALIAS[$i.start] ) ;
	[GrammarRule("alias")]
	private AstParserRuleReturnScope<IASTNode, IToken> alias()
	{
		EnterRule_alias();
		EnterRule("alias", 28);
		TraceIn("alias", 28);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> i = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "alias");
		DebugLocation(297, 1);
		try
		{
			// Hql.g:298:2: (i= identifier -> ^( ALIAS[$i.start] ) )
			DebugEnterAlt(1);
			// Hql.g:298:4: i= identifier
			{
			DebugLocation(298, 5);
			PushFollow(Follow._identifier_in_alias1576);
			i=identifier();
			PopFollow();

			stream_identifier.Add(i.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 299:2: -> ^( ALIAS[$i.start] )
			{
				DebugLocation(299, 5);
				// Hql.g:299:5: ^( ALIAS[$i.start] )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(299, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(ALIAS, (i!=null?((IToken)i.Start):default(IToken))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alias", 28);
			LeaveRule("alias", 28);
			LeaveRule_alias();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "alias"); }
		return retval;

	}
	// $ANTLR end "alias"

	partial void EnterRule_propertyFetch();
	partial void LeaveRule_propertyFetch();
	// $ANTLR start "propertyFetch"
	// Hql.g:302:1: propertyFetch : FETCH ALL ! PROPERTIES !;
	[GrammarRule("propertyFetch")]
	private AstParserRuleReturnScope<IASTNode, IToken> propertyFetch()
	{
		EnterRule_propertyFetch();
		EnterRule("propertyFetch", 29);
		TraceIn("propertyFetch", 29);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken FETCH118 = default(IToken);
		IToken ALL119 = default(IToken);
		IToken PROPERTIES120 = default(IToken);

		IASTNode FETCH118_tree = default(IASTNode);
		IASTNode ALL119_tree = default(IASTNode);
		IASTNode PROPERTIES120_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "propertyFetch");
		DebugLocation(302, 1);
		try
		{
			// Hql.g:303:2: ( FETCH ALL ! PROPERTIES !)
			DebugEnterAlt(1);
			// Hql.g:303:4: FETCH ALL ! PROPERTIES !
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(303, 4);
			FETCH118=(IToken)Match(input,FETCH,Follow._FETCH_in_propertyFetch1595); 
			FETCH118_tree = (IASTNode)adaptor.Create(FETCH118);
			adaptor.AddChild(root_0, FETCH118_tree);
			DebugLocation(303, 13);
			ALL119=(IToken)Match(input,ALL,Follow._ALL_in_propertyFetch1597); 
			DebugLocation(303, 25);
			PROPERTIES120=(IToken)Match(input,PROPERTIES,Follow._PROPERTIES_in_propertyFetch1600); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyFetch", 29);
			LeaveRule("propertyFetch", 29);
			LeaveRule_propertyFetch();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyFetch"); }
		return retval;

	}
	// $ANTLR end "propertyFetch"

	partial void EnterRule_groupByClause();
	partial void LeaveRule_groupByClause();
	// $ANTLR start "groupByClause"
	// Hql.g:306:1: groupByClause : GROUP ^ 'by' ! expression ( COMMA ! expression )* ;
	[GrammarRule("groupByClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> groupByClause()
	{
		EnterRule_groupByClause();
		EnterRule("groupByClause", 30);
		TraceIn("groupByClause", 30);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken GROUP121 = default(IToken);
		IToken string_literal122 = default(IToken);
		IToken COMMA124 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> expression123 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression125 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode GROUP121_tree = default(IASTNode);
		IASTNode string_literal122_tree = default(IASTNode);
		IASTNode COMMA124_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "groupByClause");
		DebugLocation(306, 1);
		try
		{
			// Hql.g:307:2: ( GROUP ^ 'by' ! expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// Hql.g:307:4: GROUP ^ 'by' ! expression ( COMMA ! expression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(307, 9);
			GROUP121=(IToken)Match(input,GROUP,Follow._GROUP_in_groupByClause1612); 
			GROUP121_tree = (IASTNode)adaptor.Create(GROUP121);
			root_0 = (IASTNode)adaptor.BecomeRoot(GROUP121_tree, root_0);
			DebugLocation(308, 7);
			string_literal122=(IToken)Match(input,LITERAL_by,Follow._LITERAL_by_in_groupByClause1618); 
			DebugLocation(308, 9);
			PushFollow(Follow._expression_in_groupByClause1621);
			expression123=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression123.Tree);
			DebugLocation(308, 20);
			// Hql.g:308:20: ( COMMA ! expression )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==COMMA))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:308:22: COMMA ! expression
					{
					DebugLocation(308, 27);
					COMMA124=(IToken)Match(input,COMMA,Follow._COMMA_in_groupByClause1625); 
					DebugLocation(308, 29);
					PushFollow(Follow._expression_in_groupByClause1628);
					expression125=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression125.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupByClause", 30);
			LeaveRule("groupByClause", 30);
			LeaveRule_groupByClause();
		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "groupByClause"); }
		return retval;

	}
	// $ANTLR end "groupByClause"

	partial void EnterRule_orderByClause();
	partial void LeaveRule_orderByClause();
	// $ANTLR start "orderByClause"
	// Hql.g:311:1: orderByClause : ORDER ^ 'by' ! orderElement ( COMMA ! orderElement )* ;
	[GrammarRule("orderByClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> orderByClause()
	{
		EnterRule_orderByClause();
		EnterRule("orderByClause", 31);
		TraceIn("orderByClause", 31);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken ORDER126 = default(IToken);
		IToken string_literal127 = default(IToken);
		IToken COMMA129 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> orderElement128 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> orderElement130 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode ORDER126_tree = default(IASTNode);
		IASTNode string_literal127_tree = default(IASTNode);
		IASTNode COMMA129_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "orderByClause");
		DebugLocation(311, 1);
		try
		{
			// Hql.g:312:2: ( ORDER ^ 'by' ! orderElement ( COMMA ! orderElement )* )
			DebugEnterAlt(1);
			// Hql.g:312:4: ORDER ^ 'by' ! orderElement ( COMMA ! orderElement )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(312, 9);
			ORDER126=(IToken)Match(input,ORDER,Follow._ORDER_in_orderByClause1642); 
			ORDER126_tree = (IASTNode)adaptor.Create(ORDER126);
			root_0 = (IASTNode)adaptor.BecomeRoot(ORDER126_tree, root_0);
			DebugLocation(312, 15);
			string_literal127=(IToken)Match(input,LITERAL_by,Follow._LITERAL_by_in_orderByClause1645); 
			DebugLocation(312, 17);
			PushFollow(Follow._orderElement_in_orderByClause1648);
			orderElement128=orderElement();
			PopFollow();

			adaptor.AddChild(root_0, orderElement128.Tree);
			DebugLocation(312, 30);
			// Hql.g:312:30: ( COMMA ! orderElement )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==COMMA))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:312:32: COMMA ! orderElement
					{
					DebugLocation(312, 37);
					COMMA129=(IToken)Match(input,COMMA,Follow._COMMA_in_orderByClause1652); 
					DebugLocation(312, 39);
					PushFollow(Follow._orderElement_in_orderByClause1655);
					orderElement130=orderElement();
					PopFollow();

					adaptor.AddChild(root_0, orderElement130.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderByClause", 31);
			LeaveRule("orderByClause", 31);
			LeaveRule_orderByClause();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "orderByClause"); }
		return retval;

	}
	// $ANTLR end "orderByClause"

	partial void EnterRule_skipClause();
	partial void LeaveRule_skipClause();
	// $ANTLR start "skipClause"
	// Hql.g:315:1: skipClause : SKIP ^ ( NUM_INT | parameter ) ;
	[GrammarRule("skipClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> skipClause()
	{
		EnterRule_skipClause();
		EnterRule("skipClause", 32);
		TraceIn("skipClause", 32);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken SKIP131 = default(IToken);
		IToken NUM_INT132 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> parameter133 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode SKIP131_tree = default(IASTNode);
		IASTNode NUM_INT132_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "skipClause");
		DebugLocation(315, 1);
		try
		{
			// Hql.g:316:2: ( SKIP ^ ( NUM_INT | parameter ) )
			DebugEnterAlt(1);
			// Hql.g:316:4: SKIP ^ ( NUM_INT | parameter )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(316, 8);
			SKIP131=(IToken)Match(input,SKIP,Follow._SKIP_in_skipClause1669); 
			SKIP131_tree = (IASTNode)adaptor.Create(SKIP131);
			root_0 = (IASTNode)adaptor.BecomeRoot(SKIP131_tree, root_0);
			DebugLocation(316, 10);
			// Hql.g:316:10: ( NUM_INT | parameter )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==NUM_INT))
			{
				alt42 = 1;
			}
			else if ((LA42_1==COLON||LA42_1==PARAM))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:316:11: NUM_INT
				{
				DebugLocation(316, 11);
				NUM_INT132=(IToken)Match(input,NUM_INT,Follow._NUM_INT_in_skipClause1673); 
				NUM_INT132_tree = (IASTNode)adaptor.Create(NUM_INT132);
				adaptor.AddChild(root_0, NUM_INT132_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:316:21: parameter
				{
				DebugLocation(316, 21);
				PushFollow(Follow._parameter_in_skipClause1677);
				parameter133=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter133.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skipClause", 32);
			LeaveRule("skipClause", 32);
			LeaveRule_skipClause();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "skipClause"); }
		return retval;

	}
	// $ANTLR end "skipClause"

	partial void EnterRule_takeClause();
	partial void LeaveRule_takeClause();
	// $ANTLR start "takeClause"
	// Hql.g:319:1: takeClause : TAKE ^ ( NUM_INT | parameter ) ;
	[GrammarRule("takeClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> takeClause()
	{
		EnterRule_takeClause();
		EnterRule("takeClause", 33);
		TraceIn("takeClause", 33);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken TAKE134 = default(IToken);
		IToken NUM_INT135 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> parameter136 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode TAKE134_tree = default(IASTNode);
		IASTNode NUM_INT135_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "takeClause");
		DebugLocation(319, 1);
		try
		{
			// Hql.g:320:2: ( TAKE ^ ( NUM_INT | parameter ) )
			DebugEnterAlt(1);
			// Hql.g:320:4: TAKE ^ ( NUM_INT | parameter )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(320, 8);
			TAKE134=(IToken)Match(input,TAKE,Follow._TAKE_in_takeClause1689); 
			TAKE134_tree = (IASTNode)adaptor.Create(TAKE134);
			root_0 = (IASTNode)adaptor.BecomeRoot(TAKE134_tree, root_0);
			DebugLocation(320, 10);
			// Hql.g:320:10: ( NUM_INT | parameter )
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==NUM_INT))
			{
				alt43 = 1;
			}
			else if ((LA43_1==COLON||LA43_1==PARAM))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:320:11: NUM_INT
				{
				DebugLocation(320, 11);
				NUM_INT135=(IToken)Match(input,NUM_INT,Follow._NUM_INT_in_takeClause1693); 
				NUM_INT135_tree = (IASTNode)adaptor.Create(NUM_INT135);
				adaptor.AddChild(root_0, NUM_INT135_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:320:21: parameter
				{
				DebugLocation(320, 21);
				PushFollow(Follow._parameter_in_takeClause1697);
				parameter136=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeClause", 33);
			LeaveRule("takeClause", 33);
			LeaveRule_takeClause();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "takeClause"); }
		return retval;

	}
	// $ANTLR end "takeClause"

	partial void EnterRule_parameter();
	partial void LeaveRule_parameter();
	// $ANTLR start "parameter"
	// Hql.g:323:1: parameter : ( COLON ^ identifier | PARAM ^ ( NUM_INT )? );
	[GrammarRule("parameter")]
	private AstParserRuleReturnScope<IASTNode, IToken> parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 34);
		TraceIn("parameter", 34);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken COLON137 = default(IToken);
		IToken PARAM139 = default(IToken);
		IToken NUM_INT140 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identifier138 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode COLON137_tree = default(IASTNode);
		IASTNode PARAM139_tree = default(IASTNode);
		IASTNode NUM_INT140_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(323, 1);
		try
		{
			// Hql.g:324:2: ( COLON ^ identifier | PARAM ^ ( NUM_INT )? )
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==COLON))
			{
				alt45 = 1;
			}
			else if ((LA45_1==PARAM))
			{
				alt45 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:324:4: COLON ^ identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(324, 9);
				COLON137=(IToken)Match(input,COLON,Follow._COLON_in_parameter1709); 
				COLON137_tree = (IASTNode)adaptor.Create(COLON137);
				root_0 = (IASTNode)adaptor.BecomeRoot(COLON137_tree, root_0);
				DebugLocation(324, 11);
				PushFollow(Follow._identifier_in_parameter1712);
				identifier138=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier138.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:325:4: PARAM ^ ( NUM_INT )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(325, 9);
				PARAM139=(IToken)Match(input,PARAM,Follow._PARAM_in_parameter1717); 
				PARAM139_tree = (IASTNode)adaptor.Create(PARAM139);
				root_0 = (IASTNode)adaptor.BecomeRoot(PARAM139_tree, root_0);
				DebugLocation(325, 11);
				// Hql.g:325:11: ( NUM_INT )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==NUM_INT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:325:12: NUM_INT
					{
					DebugLocation(325, 12);
					NUM_INT140=(IToken)Match(input,NUM_INT,Follow._NUM_INT_in_parameter1721); 
					NUM_INT140_tree = (IASTNode)adaptor.Create(NUM_INT140);
					adaptor.AddChild(root_0, NUM_INT140_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter", 34);
			LeaveRule("parameter", 34);
			LeaveRule_parameter();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return retval;

	}
	// $ANTLR end "parameter"

	partial void EnterRule_orderElement();
	partial void LeaveRule_orderElement();
	// $ANTLR start "orderElement"
	// Hql.g:328:1: orderElement : expression ( ascendingOrDescending )? ;
	[GrammarRule("orderElement")]
	private AstParserRuleReturnScope<IASTNode, IToken> orderElement()
	{
		EnterRule_orderElement();
		EnterRule("orderElement", 35);
		TraceIn("orderElement", 35);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> expression141 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> ascendingOrDescending142 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "orderElement");
		DebugLocation(328, 1);
		try
		{
			// Hql.g:329:2: ( expression ( ascendingOrDescending )? )
			DebugEnterAlt(1);
			// Hql.g:329:4: expression ( ascendingOrDescending )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(329, 4);
			PushFollow(Follow._expression_in_orderElement1734);
			expression141=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression141.Tree);
			DebugLocation(329, 15);
			// Hql.g:329:15: ( ascendingOrDescending )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==ASCENDING||LA46_1==DESCENDING||(LA46_1>=133 && LA46_1<=134)))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:329:17: ascendingOrDescending
				{
				DebugLocation(329, 17);
				PushFollow(Follow._ascendingOrDescending_in_orderElement1738);
				ascendingOrDescending142=ascendingOrDescending();
				PopFollow();

				adaptor.AddChild(root_0, ascendingOrDescending142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderElement", 35);
			LeaveRule("orderElement", 35);
			LeaveRule_orderElement();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "orderElement"); }
		return retval;

	}
	// $ANTLR end "orderElement"

	partial void EnterRule_ascendingOrDescending();
	partial void LeaveRule_ascendingOrDescending();
	// $ANTLR start "ascendingOrDescending"
	// Hql.g:332:1: ascendingOrDescending : ( (a= 'asc' |a= 'ascending' ) -> ^( ASCENDING[$a.Text] ) | (d= 'desc' |d= 'descending' ) -> ^( DESCENDING[$d.Text] ) );
	[GrammarRule("ascendingOrDescending")]
	private AstParserRuleReturnScope<IASTNode, IToken> ascendingOrDescending()
	{
		EnterRule_ascendingOrDescending();
		EnterRule("ascendingOrDescending", 36);
		TraceIn("ascendingOrDescending", 36);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken a = default(IToken);
		IToken d = default(IToken);

		IASTNode a_tree = default(IASTNode);
		IASTNode d_tree = default(IASTNode);
		RewriteRuleITokenStream stream_ASCENDING=new RewriteRuleITokenStream(adaptor,"token ASCENDING");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DESCENDING=new RewriteRuleITokenStream(adaptor,"token DESCENDING");
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		try { DebugEnterRule(GrammarFileName, "ascendingOrDescending");
		DebugLocation(332, 1);
		try
		{
			// Hql.g:333:2: ( (a= 'asc' |a= 'ascending' ) -> ^( ASCENDING[$a.Text] ) | (d= 'desc' |d= 'descending' ) -> ^( DESCENDING[$d.Text] ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==ASCENDING||LA49_1==133))
			{
				alt49 = 1;
			}
			else if ((LA49_1==DESCENDING||LA49_1==134))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:333:4: (a= 'asc' |a= 'ascending' )
				{
				DebugLocation(333, 4);
				// Hql.g:333:4: (a= 'asc' |a= 'ascending' )
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==ASCENDING))
				{
					alt47 = 1;
				}
				else if ((LA47_1==133))
				{
					alt47 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:333:6: a= 'asc'
					{
					DebugLocation(333, 7);
					a=(IToken)Match(input,ASCENDING,Follow._ASCENDING_in_ascendingOrDescending1756);  
					stream_ASCENDING.Add(a);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:333:16: a= 'ascending'
					{
					DebugLocation(333, 17);
					a=(IToken)Match(input,133,Follow._133_in_ascendingOrDescending1762);  
					stream_133.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 334:3: -> ^( ASCENDING[$a.Text] )
				{
					DebugLocation(334, 6);
					// Hql.g:334:6: ^( ASCENDING[$a.Text] )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(334, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(ASCENDING, a.Text), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:335:4: (d= 'desc' |d= 'descending' )
				{
				DebugLocation(335, 4);
				// Hql.g:335:4: (d= 'desc' |d= 'descending' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==DESCENDING))
				{
					alt48 = 1;
				}
				else if ((LA48_1==134))
				{
					alt48 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:335:6: d= 'desc'
					{
					DebugLocation(335, 7);
					d=(IToken)Match(input,DESCENDING,Follow._DESCENDING_in_ascendingOrDescending1782);  
					stream_DESCENDING.Add(d);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:335:17: d= 'descending'
					{
					DebugLocation(335, 18);
					d=(IToken)Match(input,134,Follow._134_in_ascendingOrDescending1788);  
					stream_134.Add(d);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 336:3: -> ^( DESCENDING[$d.Text] )
				{
					DebugLocation(336, 6);
					// Hql.g:336:6: ^( DESCENDING[$d.Text] )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(336, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(DESCENDING, d.Text), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ascendingOrDescending", 36);
			LeaveRule("ascendingOrDescending", 36);
			LeaveRule_ascendingOrDescending();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "ascendingOrDescending"); }
		return retval;

	}
	// $ANTLR end "ascendingOrDescending"

	partial void EnterRule_havingClause();
	partial void LeaveRule_havingClause();
	// $ANTLR start "havingClause"
	// Hql.g:339:1: havingClause : HAVING ^ logicalExpression ;
	[GrammarRule("havingClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> havingClause()
	{
		EnterRule_havingClause();
		EnterRule("havingClause", 37);
		TraceIn("havingClause", 37);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken HAVING143 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> logicalExpression144 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode HAVING143_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "havingClause");
		DebugLocation(339, 1);
		try
		{
			// Hql.g:340:2: ( HAVING ^ logicalExpression )
			DebugEnterAlt(1);
			// Hql.g:340:4: HAVING ^ logicalExpression
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(340, 10);
			HAVING143=(IToken)Match(input,HAVING,Follow._HAVING_in_havingClause1809); 
			HAVING143_tree = (IASTNode)adaptor.Create(HAVING143);
			root_0 = (IASTNode)adaptor.BecomeRoot(HAVING143_tree, root_0);
			DebugLocation(340, 12);
			PushFollow(Follow._logicalExpression_in_havingClause1812);
			logicalExpression144=logicalExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalExpression144.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("havingClause", 37);
			LeaveRule("havingClause", 37);
			LeaveRule_havingClause();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "havingClause"); }
		return retval;

	}
	// $ANTLR end "havingClause"

	partial void EnterRule_whereClause();
	partial void LeaveRule_whereClause();
	// $ANTLR start "whereClause"
	// Hql.g:343:1: whereClause : WHERE ^ logicalExpression ;
	[GrammarRule("whereClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> whereClause()
	{
		EnterRule_whereClause();
		EnterRule("whereClause", 38);
		TraceIn("whereClause", 38);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken WHERE145 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> logicalExpression146 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode WHERE145_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "whereClause");
		DebugLocation(343, 1);
		try
		{
			// Hql.g:344:2: ( WHERE ^ logicalExpression )
			DebugEnterAlt(1);
			// Hql.g:344:4: WHERE ^ logicalExpression
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(344, 9);
			WHERE145=(IToken)Match(input,WHERE,Follow._WHERE_in_whereClause1823); 
			WHERE145_tree = (IASTNode)adaptor.Create(WHERE145);
			root_0 = (IASTNode)adaptor.BecomeRoot(WHERE145_tree, root_0);
			DebugLocation(344, 11);
			PushFollow(Follow._logicalExpression_in_whereClause1826);
			logicalExpression146=logicalExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalExpression146.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereClause", 38);
			LeaveRule("whereClause", 38);
			LeaveRule_whereClause();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "whereClause"); }
		return retval;

	}
	// $ANTLR end "whereClause"

	partial void EnterRule_selectedPropertiesList();
	partial void LeaveRule_selectedPropertiesList();
	// $ANTLR start "selectedPropertiesList"
	// Hql.g:347:1: selectedPropertiesList : aliasedExpression ( COMMA ! aliasedExpression )* ;
	[GrammarRule("selectedPropertiesList")]
	private AstParserRuleReturnScope<IASTNode, IToken> selectedPropertiesList()
	{
		EnterRule_selectedPropertiesList();
		EnterRule("selectedPropertiesList", 39);
		TraceIn("selectedPropertiesList", 39);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken COMMA148 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> aliasedExpression147 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> aliasedExpression149 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode COMMA148_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "selectedPropertiesList");
		DebugLocation(347, 1);
		try
		{
			// Hql.g:348:2: ( aliasedExpression ( COMMA ! aliasedExpression )* )
			DebugEnterAlt(1);
			// Hql.g:348:4: aliasedExpression ( COMMA ! aliasedExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(348, 4);
			PushFollow(Follow._aliasedExpression_in_selectedPropertiesList1837);
			aliasedExpression147=aliasedExpression();
			PopFollow();

			adaptor.AddChild(root_0, aliasedExpression147.Tree);
			DebugLocation(348, 22);
			// Hql.g:348:22: ( COMMA ! aliasedExpression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:348:24: COMMA ! aliasedExpression
					{
					DebugLocation(348, 29);
					COMMA148=(IToken)Match(input,COMMA,Follow._COMMA_in_selectedPropertiesList1841); 
					DebugLocation(348, 31);
					PushFollow(Follow._aliasedExpression_in_selectedPropertiesList1844);
					aliasedExpression149=aliasedExpression();
					PopFollow();

					adaptor.AddChild(root_0, aliasedExpression149.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectedPropertiesList", 39);
			LeaveRule("selectedPropertiesList", 39);
			LeaveRule_selectedPropertiesList();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "selectedPropertiesList"); }
		return retval;

	}
	// $ANTLR end "selectedPropertiesList"

	partial void EnterRule_aliasedExpression();
	partial void LeaveRule_aliasedExpression();
	// $ANTLR start "aliasedExpression"
	// Hql.g:351:1: aliasedExpression : expression ( AS ^ identifier )? ;
	[GrammarRule("aliasedExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> aliasedExpression()
	{
		EnterRule_aliasedExpression();
		EnterRule("aliasedExpression", 40);
		TraceIn("aliasedExpression", 40);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken AS151 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> expression150 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier152 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode AS151_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "aliasedExpression");
		DebugLocation(351, 1);
		try
		{
			// Hql.g:352:2: ( expression ( AS ^ identifier )? )
			DebugEnterAlt(1);
			// Hql.g:352:4: expression ( AS ^ identifier )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(352, 4);
			PushFollow(Follow._expression_in_aliasedExpression1859);
			expression150=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression150.Tree);
			DebugLocation(352, 15);
			// Hql.g:352:15: ( AS ^ identifier )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==AS))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:352:17: AS ^ identifier
				{
				DebugLocation(352, 19);
				AS151=(IToken)Match(input,AS,Follow._AS_in_aliasedExpression1863); 
				AS151_tree = (IASTNode)adaptor.Create(AS151);
				root_0 = (IASTNode)adaptor.BecomeRoot(AS151_tree, root_0);
				DebugLocation(352, 21);
				PushFollow(Follow._identifier_in_aliasedExpression1866);
				identifier152=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier152.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aliasedExpression", 40);
			LeaveRule("aliasedExpression", 40);
			LeaveRule_aliasedExpression();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasedExpression"); }
		return retval;

	}
	// $ANTLR end "aliasedExpression"

	partial void EnterRule_logicalExpression();
	partial void LeaveRule_logicalExpression();
	// $ANTLR start "logicalExpression"
	// Hql.g:380:1: logicalExpression : expression ;
	[GrammarRule("logicalExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> logicalExpression()
	{
		EnterRule_logicalExpression();
		EnterRule("logicalExpression", 41);
		TraceIn("logicalExpression", 41);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> expression153 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "logicalExpression");
		DebugLocation(380, 1);
		try
		{
			// Hql.g:381:2: ( expression )
			DebugEnterAlt(1);
			// Hql.g:381:4: expression
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(381, 4);
			PushFollow(Follow._expression_in_logicalExpression1905);
			expression153=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression153.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalExpression", 41);
			LeaveRule("logicalExpression", 41);
			LeaveRule_logicalExpression();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalExpression"); }
		return retval;

	}
	// $ANTLR end "logicalExpression"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Hql.g:385:1: expression : logicalOrExpression ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<IASTNode, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 42);
		TraceIn("expression", 42);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> logicalOrExpression154 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(385, 1);
		try
		{
			// Hql.g:386:2: ( logicalOrExpression )
			DebugEnterAlt(1);
			// Hql.g:386:4: logicalOrExpression
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(386, 4);
			PushFollow(Follow._logicalOrExpression_in_expression1917);
			logicalOrExpression154=logicalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalOrExpression154.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 42);
			LeaveRule("expression", 42);
			LeaveRule_expression();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// Hql.g:390:1: logicalOrExpression : logicalAndExpression ( OR ^ logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 43);
		TraceIn("logicalOrExpression", 43);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken OR156 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> logicalAndExpression155 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> logicalAndExpression157 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode OR156_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(390, 1);
		try
		{
			// Hql.g:391:2: ( logicalAndExpression ( OR ^ logicalAndExpression )* )
			DebugEnterAlt(1);
			// Hql.g:391:4: logicalAndExpression ( OR ^ logicalAndExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(391, 4);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression1929);
			logicalAndExpression155=logicalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalAndExpression155.Tree);
			DebugLocation(391, 25);
			// Hql.g:391:25: ( OR ^ logicalAndExpression )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==OR))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:391:27: OR ^ logicalAndExpression
					{
					DebugLocation(391, 29);
					OR156=(IToken)Match(input,OR,Follow._OR_in_logicalOrExpression1933); 
					OR156_tree = (IASTNode)adaptor.Create(OR156);
					root_0 = (IASTNode)adaptor.BecomeRoot(OR156_tree, root_0);
					DebugLocation(391, 31);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression1936);
					logicalAndExpression157=logicalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, logicalAndExpression157.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 43);
			LeaveRule("logicalOrExpression", 43);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// Hql.g:395:1: logicalAndExpression : negatedExpression ( AND ^ negatedExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 44);
		TraceIn("logicalAndExpression", 44);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken AND159 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> negatedExpression158 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> negatedExpression160 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode AND159_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(395, 1);
		try
		{
			// Hql.g:396:2: ( negatedExpression ( AND ^ negatedExpression )* )
			DebugEnterAlt(1);
			// Hql.g:396:4: negatedExpression ( AND ^ negatedExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(396, 4);
			PushFollow(Follow._negatedExpression_in_logicalAndExpression1951);
			negatedExpression158=negatedExpression();
			PopFollow();

			adaptor.AddChild(root_0, negatedExpression158.Tree);
			DebugLocation(396, 22);
			// Hql.g:396:22: ( AND ^ negatedExpression )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==AND))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:396:24: AND ^ negatedExpression
					{
					DebugLocation(396, 27);
					AND159=(IToken)Match(input,AND,Follow._AND_in_logicalAndExpression1955); 
					AND159_tree = (IASTNode)adaptor.Create(AND159);
					root_0 = (IASTNode)adaptor.BecomeRoot(AND159_tree, root_0);
					DebugLocation(396, 29);
					PushFollow(Follow._negatedExpression_in_logicalAndExpression1958);
					negatedExpression160=negatedExpression();
					PopFollow();

					adaptor.AddChild(root_0, negatedExpression160.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 44);
			LeaveRule("logicalAndExpression", 44);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_negatedExpression();
	partial void LeaveRule_negatedExpression();
	// $ANTLR start "negatedExpression"
	// Hql.g:401:1: negatedExpression : ( NOT x= negatedExpression -> ^() | equalityExpression );
	[GrammarRule("negatedExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> negatedExpression()
	{
		EnterRule_negatedExpression();
		EnterRule("negatedExpression", 45);
		TraceIn("negatedExpression", 45);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken NOT161 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> x = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> equalityExpression162 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode NOT161_tree = default(IASTNode);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleSubtreeStream stream_negatedExpression=new RewriteRuleSubtreeStream(adaptor,"rule negatedExpression");
		 WeakKeywords(); 
		try { DebugEnterRule(GrammarFileName, "negatedExpression");
		DebugLocation(401, 1);
		try
		{
			// Hql.g:403:2: ( NOT x= negatedExpression -> ^() | equalityExpression )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==NOT))
			{
				alt54 = 1;
			}
			else if ((LA54_1==ALL||LA54_1==ANY||LA54_1==AVG||LA54_1==BNOT||LA54_1==CASE||LA54_1==COLON||LA54_1==COUNT||LA54_1==ELEMENTS||LA54_1==EMPTY||LA54_1==EXISTS||LA54_1==FALSE||LA54_1==IDENT||LA54_1==INDICES||LA54_1==MAX||(LA54_1>=MIN && LA54_1<=MINUS)||(LA54_1>=NULL && LA54_1<=NUM_LONG)||LA54_1==OPEN||(LA54_1>=PARAM && LA54_1<=PLUS)||LA54_1==QUOTED_String||LA54_1==SOME||LA54_1==SUM||LA54_1==TRUE))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:403:4: NOT x= negatedExpression
				{
				DebugLocation(403, 4);
				NOT161=(IToken)Match(input,NOT,Follow._NOT_in_negatedExpression1979);  
				stream_NOT.Add(NOT161);

				DebugLocation(403, 9);
				PushFollow(Follow._negatedExpression_in_negatedExpression1983);
				x=negatedExpression();
				PopFollow();

				stream_negatedExpression.Add(x.Tree);


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 404:3: -> ^()
				{
					DebugLocation(404, 6);
					// Hql.g:404:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(404, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(NegateNode((x!=null?((IASTNode)x.Tree):default(IASTNode))), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:405:4: equalityExpression
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._equalityExpression_in_negatedExpression1996);
				equalityExpression162=equalityExpression();
				PopFollow();

				adaptor.AddChild(root_0, equalityExpression162.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negatedExpression", 45);
			LeaveRule("negatedExpression", 45);
			LeaveRule_negatedExpression();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "negatedExpression"); }
		return retval;

	}
	// $ANTLR end "negatedExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Hql.g:411:1: equalityExpression : x= relationalExpression ( ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^) y= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 46);
		TraceIn("equalityExpression", 46);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken isx = default(IToken);
		IToken ne = default(IToken);
		IToken EQ163 = default(IToken);
		IToken NOT164 = default(IToken);
		IToken NE165 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> x = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> y = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode isx_tree = default(IASTNode);
		IASTNode ne_tree = default(IASTNode);
		IASTNode EQ163_tree = default(IASTNode);
		IASTNode NOT164_tree = default(IASTNode);
		IASTNode NE165_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(411, 1);
		try
		{
			// Hql.g:416:2: (x= relationalExpression ( ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^) y= relationalExpression )* )
			DebugEnterAlt(1);
			// Hql.g:416:4: x= relationalExpression ( ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^) y= relationalExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(416, 5);
			PushFollow(Follow._relationalExpression_in_equalityExpression2018);
			x=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, x.Tree);
			DebugLocation(416, 27);
			// Hql.g:416:27: ( ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^) y= relationalExpression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==EQ||LA57_1==IS||LA57_1==NE||LA57_1==SQL_NE))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:417:3: ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^) y= relationalExpression
					{
					DebugLocation(417, 3);
					// Hql.g:417:3: ( EQ ^|isx= IS ^ ( NOT !)? | NE ^|ne= SQL_NE ^)
					int alt56=4;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt56 = 1;
						}
						break;
					case IS:
						{
						alt56 = 2;
						}
						break;
					case NE:
						{
						alt56 = 3;
						}
						break;
					case SQL_NE:
						{
						alt56 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:417:5: EQ ^
						{
						DebugLocation(417, 7);
						EQ163=(IToken)Match(input,EQ,Follow._EQ_in_equalityExpression2026); 
						EQ163_tree = (IASTNode)adaptor.Create(EQ163);
						root_0 = (IASTNode)adaptor.BecomeRoot(EQ163_tree, root_0);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Hql.g:418:5: isx= IS ^ ( NOT !)?
						{
						DebugLocation(418, 8);
						isx=(IToken)Match(input,IS,Follow._IS_in_equalityExpression2035); 
						isx_tree = (IASTNode)adaptor.Create(isx);
						root_0 = (IASTNode)adaptor.BecomeRoot(isx_tree, root_0);
						DebugLocation(418, 13);
						 isx.Type = EQ; 
						DebugLocation(418, 33);
						// Hql.g:418:33: ( NOT !)?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, false);
						int LA55_1 = input.LA(1);

						if ((LA55_1==NOT))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// Hql.g:418:34: NOT !
							{
							DebugLocation(418, 37);
							NOT164=(IToken)Match(input,NOT,Follow._NOT_in_equalityExpression2041); 
							DebugLocation(418, 39);
							 isx.Type =NE; 

							}
							break;

						}
						} finally { DebugExitSubRule(55); }


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Hql.g:419:5: NE ^
						{
						DebugLocation(419, 7);
						NE165=(IToken)Match(input,NE,Follow._NE_in_equalityExpression2053); 
						NE165_tree = (IASTNode)adaptor.Create(NE165);
						root_0 = (IASTNode)adaptor.BecomeRoot(NE165_tree, root_0);

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Hql.g:420:5: ne= SQL_NE ^
						{
						DebugLocation(420, 7);
						ne=(IToken)Match(input,SQL_NE,Follow._SQL_NE_in_equalityExpression2062); 
						ne_tree = (IASTNode)adaptor.Create(ne);
						root_0 = (IASTNode)adaptor.BecomeRoot(ne_tree, root_0);
						DebugLocation(420, 16);
						 ne.Type = NE; 

						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(421, 6);
					PushFollow(Follow._relationalExpression_in_equalityExpression2073);
					y=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, y.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


						// Post process the equality expression to clean up 'is null', etc.
						retval.Tree =  ProcessEqualityExpression(retval.Tree);
					
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 46);
			LeaveRule("equalityExpression", 46);
			LeaveRule_equalityExpression();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Hql.g:428:1: relationalExpression : concatenation ( ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* ) | (n= NOT !)? ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) ) ) ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 47);
		TraceIn("relationalExpression", 47);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken n = default(IToken);
		IToken i = default(IToken);
		IToken b = default(IToken);
		IToken l = default(IToken);
		IToken LT167 = default(IToken);
		IToken GT168 = default(IToken);
		IToken LE169 = default(IToken);
		IToken GE170 = default(IToken);
		IToken MEMBER176 = default(IToken);
		IToken OF177 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> p = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> concatenation166 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseNotExpression171 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> inList172 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> betweenList173 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> concatenation174 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> likeEscape175 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode n_tree = default(IASTNode);
		IASTNode i_tree = default(IASTNode);
		IASTNode b_tree = default(IASTNode);
		IASTNode l_tree = default(IASTNode);
		IASTNode LT167_tree = default(IASTNode);
		IASTNode GT168_tree = default(IASTNode);
		IASTNode LE169_tree = default(IASTNode);
		IASTNode GE170_tree = default(IASTNode);
		IASTNode MEMBER176_tree = default(IASTNode);
		IASTNode OF177_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(428, 1);
		try
		{
			// Hql.g:429:2: ( concatenation ( ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* ) | (n= NOT !)? ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) ) ) )
			DebugEnterAlt(1);
			// Hql.g:429:4: concatenation ( ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* ) | (n= NOT !)? ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(429, 4);
			PushFollow(Follow._concatenation_in_relationalExpression2090);
			concatenation166=concatenation();
			PopFollow();

			adaptor.AddChild(root_0, concatenation166.Tree);
			DebugLocation(429, 18);
			// Hql.g:429:18: ( ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* ) | (n= NOT !)? ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) ) )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==EOF||LA63_1==AND||(LA63_1>=AS && LA63_1<=ASCENDING)||(LA63_1>=CLOSE && LA63_1<=CLOSE_BRACKET)||LA63_1==COMMA||LA63_1==DESCENDING||LA63_1==ELSE||(LA63_1>=END && LA63_1<=EQ)||(LA63_1>=FROM && LA63_1<=HAVING)||LA63_1==INNER||LA63_1==IS||(LA63_1>=JOIN && LA63_1<=LE)||LA63_1==LEFT||LA63_1==LT||LA63_1==NE||(LA63_1>=OR && LA63_1<=ORDER)||LA63_1==RIGHT||LA63_1==SKIP||LA63_1==SQL_NE||(LA63_1>=TAKE && LA63_1<=THEN)||LA63_1==UNION||(LA63_1>=WHEN && LA63_1<=WHERE)||(LA63_1>=133 && LA63_1<=134)))
			{
				alt63 = 1;
			}
			else if ((LA63_1==BETWEEN||LA63_1==IN||LA63_1==LIKE||LA63_1==MEMBER||LA63_1==NOT))
			{
				alt63 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:430:3: ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* )
				{
				DebugLocation(430, 3);
				// Hql.g:430:3: ( ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )* )
				DebugEnterAlt(1);
				// Hql.g:430:5: ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )*
				{
				DebugLocation(430, 5);
				// Hql.g:430:5: ( ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==GE||LA59_1==GT||LA59_1==LE||LA59_1==LT))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:430:7: ( LT ^| GT ^| LE ^| GE ^) bitwiseNotExpression
						{
						DebugLocation(430, 7);
						// Hql.g:430:7: ( LT ^| GT ^| LE ^| GE ^)
						int alt58=4;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, false);
						switch (input.LA(1))
						{
						case LT:
							{
							alt58 = 1;
							}
							break;
						case GT:
							{
							alt58 = 2;
							}
							break;
						case LE:
							{
							alt58 = 3;
							}
							break;
						case GE:
							{
							alt58 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// Hql.g:430:9: LT ^
							{
							DebugLocation(430, 11);
							LT167=(IToken)Match(input,LT,Follow._LT_in_relationalExpression2102); 
							LT167_tree = (IASTNode)adaptor.Create(LT167);
							root_0 = (IASTNode)adaptor.BecomeRoot(LT167_tree, root_0);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Hql.g:430:15: GT ^
							{
							DebugLocation(430, 17);
							GT168=(IToken)Match(input,GT,Follow._GT_in_relationalExpression2107); 
							GT168_tree = (IASTNode)adaptor.Create(GT168);
							root_0 = (IASTNode)adaptor.BecomeRoot(GT168_tree, root_0);

							}
							break;
						case 3:
							DebugEnterAlt(3);
							// Hql.g:430:21: LE ^
							{
							DebugLocation(430, 23);
							LE169=(IToken)Match(input,LE,Follow._LE_in_relationalExpression2112); 
							LE169_tree = (IASTNode)adaptor.Create(LE169);
							root_0 = (IASTNode)adaptor.BecomeRoot(LE169_tree, root_0);

							}
							break;
						case 4:
							DebugEnterAlt(4);
							// Hql.g:430:27: GE ^
							{
							DebugLocation(430, 29);
							GE170=(IToken)Match(input,GE,Follow._GE_in_relationalExpression2117); 
							GE170_tree = (IASTNode)adaptor.Create(GE170);
							root_0 = (IASTNode)adaptor.BecomeRoot(GE170_tree, root_0);

							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(430, 33);
						PushFollow(Follow._bitwiseNotExpression_in_relationalExpression2122);
						bitwiseNotExpression171=bitwiseNotExpression();
						PopFollow();

						adaptor.AddChild(root_0, bitwiseNotExpression171.Tree);

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:432:5: (n= NOT !)? ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) )
				{
				DebugLocation(432, 5);
				// Hql.g:432:5: (n= NOT !)?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==NOT))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:432:6: n= NOT !
					{
					DebugLocation(432, 7);
					n=(IToken)Match(input,NOT,Follow._NOT_in_relationalExpression2139); 

					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(432, 15);
				// Hql.g:432:15: ( (i= IN ^ inList ) | (b= BETWEEN ^ betweenList ) | (l= LIKE ^ concatenation likeEscape ) | ( MEMBER ! ( OF !)? p= path !) )
				int alt62=4;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				switch (input.LA(1))
				{
				case IN:
					{
					alt62 = 1;
					}
					break;
				case BETWEEN:
					{
					alt62 = 2;
					}
					break;
				case LIKE:
					{
					alt62 = 3;
					}
					break;
				case MEMBER:
					{
					alt62 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:435:4: (i= IN ^ inList )
					{
					DebugLocation(435, 4);
					// Hql.g:435:4: (i= IN ^ inList )
					DebugEnterAlt(1);
					// Hql.g:435:5: i= IN ^ inList
					{
					DebugLocation(435, 6);
					i=(IToken)Match(input,IN,Follow._IN_in_relationalExpression2160); 
					i_tree = (IASTNode)adaptor.Create(i);
					root_0 = (IASTNode)adaptor.BecomeRoot(i_tree, root_0);
					DebugLocation(435, 11);

										i.Type = (n == null) ? IN : NOT_IN;
										i.Text = (n == null) ? "in" : "not in";
									
					DebugLocation(439, 5);
					PushFollow(Follow._inList_in_relationalExpression2169);
					inList172=inList();
					PopFollow();

					adaptor.AddChild(root_0, inList172.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:440:6: (b= BETWEEN ^ betweenList )
					{
					DebugLocation(440, 6);
					// Hql.g:440:6: (b= BETWEEN ^ betweenList )
					DebugEnterAlt(1);
					// Hql.g:440:7: b= BETWEEN ^ betweenList
					{
					DebugLocation(440, 8);
					b=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_relationalExpression2180); 
					b_tree = (IASTNode)adaptor.Create(b);
					root_0 = (IASTNode)adaptor.BecomeRoot(b_tree, root_0);
					DebugLocation(440, 18);

										b.Type = (n == null) ? BETWEEN : NOT_BETWEEN;
										b.Text = (n == null) ? "between" : "not between";
									
					DebugLocation(444, 5);
					PushFollow(Follow._betweenList_in_relationalExpression2189);
					betweenList173=betweenList();
					PopFollow();

					adaptor.AddChild(root_0, betweenList173.Tree);

					}


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:445:6: (l= LIKE ^ concatenation likeEscape )
					{
					DebugLocation(445, 6);
					// Hql.g:445:6: (l= LIKE ^ concatenation likeEscape )
					DebugEnterAlt(1);
					// Hql.g:445:7: l= LIKE ^ concatenation likeEscape
					{
					DebugLocation(445, 8);
					l=(IToken)Match(input,LIKE,Follow._LIKE_in_relationalExpression2201); 
					l_tree = (IASTNode)adaptor.Create(l);
					root_0 = (IASTNode)adaptor.BecomeRoot(l_tree, root_0);
					DebugLocation(445, 15);

										l.Type = (n == null) ? LIKE : NOT_LIKE;
										l.Text = (n == null) ? "like" : "not like";
									
					DebugLocation(449, 5);
					PushFollow(Follow._concatenation_in_relationalExpression2210);
					concatenation174=concatenation();
					PopFollow();

					adaptor.AddChild(root_0, concatenation174.Tree);
					DebugLocation(449, 19);
					PushFollow(Follow._likeEscape_in_relationalExpression2212);
					likeEscape175=likeEscape();
					PopFollow();

					adaptor.AddChild(root_0, likeEscape175.Tree);

					}


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Hql.g:450:6: ( MEMBER ! ( OF !)? p= path !)
					{
					DebugLocation(450, 6);
					// Hql.g:450:6: ( MEMBER ! ( OF !)? p= path !)
					DebugEnterAlt(1);
					// Hql.g:450:7: MEMBER ! ( OF !)? p= path !
					{
					DebugLocation(450, 13);
					MEMBER176=(IToken)Match(input,MEMBER,Follow._MEMBER_in_relationalExpression2221); 
					DebugLocation(450, 15);
					// Hql.g:450:15: ( OF !)?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, false);
					int LA61_1 = input.LA(1);

					if ((LA61_1==OF))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:450:16: OF !
						{
						DebugLocation(450, 18);
						OF177=(IToken)Match(input,OF,Follow._OF_in_relationalExpression2225); 

						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(450, 23);
					PushFollow(Follow._path_in_relationalExpression2232);
					p=path();
					PopFollow();

					DebugLocation(450, 30);

									root_0 = ProcessMemberOf(n,(p!=null?((IASTNode)p.Tree):default(IASTNode)), root_0);
								  

					}


					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 47);
			LeaveRule("relationalExpression", 47);
			LeaveRule_relationalExpression();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_likeEscape();
	partial void LeaveRule_likeEscape();
	// $ANTLR start "likeEscape"
	// Hql.g:457:1: likeEscape : ( ESCAPE ^ concatenation )? ;
	[GrammarRule("likeEscape")]
	private AstParserRuleReturnScope<IASTNode, IToken> likeEscape()
	{
		EnterRule_likeEscape();
		EnterRule("likeEscape", 48);
		TraceIn("likeEscape", 48);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken ESCAPE178 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> concatenation179 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode ESCAPE178_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "likeEscape");
		DebugLocation(457, 1);
		try
		{
			// Hql.g:458:2: ( ( ESCAPE ^ concatenation )? )
			DebugEnterAlt(1);
			// Hql.g:458:4: ( ESCAPE ^ concatenation )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(458, 4);
			// Hql.g:458:4: ( ESCAPE ^ concatenation )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==ESCAPE))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:458:5: ESCAPE ^ concatenation
				{
				DebugLocation(458, 11);
				ESCAPE178=(IToken)Match(input,ESCAPE,Follow._ESCAPE_in_likeEscape2259); 
				ESCAPE178_tree = (IASTNode)adaptor.Create(ESCAPE178);
				root_0 = (IASTNode)adaptor.BecomeRoot(ESCAPE178_tree, root_0);
				DebugLocation(458, 13);
				PushFollow(Follow._concatenation_in_likeEscape2262);
				concatenation179=concatenation();
				PopFollow();

				adaptor.AddChild(root_0, concatenation179.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("likeEscape", 48);
			LeaveRule("likeEscape", 48);
			LeaveRule_likeEscape();
		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "likeEscape"); }
		return retval;

	}
	// $ANTLR end "likeEscape"

	partial void EnterRule_inList();
	partial void LeaveRule_inList();
	// $ANTLR start "inList"
	// Hql.g:461:1: inList : compoundExpr -> ^( IN_LIST[\"inList\"] compoundExpr ) ;
	[GrammarRule("inList")]
	private AstParserRuleReturnScope<IASTNode, IToken> inList()
	{
		EnterRule_inList();
		EnterRule("inList", 49);
		TraceIn("inList", 49);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> compoundExpr180 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_compoundExpr=new RewriteRuleSubtreeStream(adaptor,"rule compoundExpr");
		try { DebugEnterRule(GrammarFileName, "inList");
		DebugLocation(461, 1);
		try
		{
			// Hql.g:462:2: ( compoundExpr -> ^( IN_LIST[\"inList\"] compoundExpr ) )
			DebugEnterAlt(1);
			// Hql.g:462:4: compoundExpr
			{
			DebugLocation(462, 4);
			PushFollow(Follow._compoundExpr_in_inList2275);
			compoundExpr180=compoundExpr();
			PopFollow();

			stream_compoundExpr.Add(compoundExpr180.Tree);


			{
			// AST REWRITE
			// elements: compoundExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 463:2: -> ^( IN_LIST[\"inList\"] compoundExpr )
			{
				DebugLocation(463, 5);
				// Hql.g:463:5: ^( IN_LIST[\"inList\"] compoundExpr )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(463, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(IN_LIST, "inList"), root_1);

				DebugLocation(463, 25);
				adaptor.AddChild(root_1, stream_compoundExpr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inList", 49);
			LeaveRule("inList", 49);
			LeaveRule_inList();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "inList"); }
		return retval;

	}
	// $ANTLR end "inList"

	partial void EnterRule_betweenList();
	partial void LeaveRule_betweenList();
	// $ANTLR start "betweenList"
	// Hql.g:466:1: betweenList : concatenation AND ! concatenation ;
	[GrammarRule("betweenList")]
	private AstParserRuleReturnScope<IASTNode, IToken> betweenList()
	{
		EnterRule_betweenList();
		EnterRule("betweenList", 50);
		TraceIn("betweenList", 50);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken AND182 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> concatenation181 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> concatenation183 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode AND182_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "betweenList");
		DebugLocation(466, 1);
		try
		{
			// Hql.g:467:2: ( concatenation AND ! concatenation )
			DebugEnterAlt(1);
			// Hql.g:467:4: concatenation AND ! concatenation
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(467, 4);
			PushFollow(Follow._concatenation_in_betweenList2296);
			concatenation181=concatenation();
			PopFollow();

			adaptor.AddChild(root_0, concatenation181.Tree);
			DebugLocation(467, 21);
			AND182=(IToken)Match(input,AND,Follow._AND_in_betweenList2298); 
			DebugLocation(467, 23);
			PushFollow(Follow._concatenation_in_betweenList2301);
			concatenation183=concatenation();
			PopFollow();

			adaptor.AddChild(root_0, concatenation183.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("betweenList", 50);
			LeaveRule("betweenList", 50);
			LeaveRule_betweenList();
		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "betweenList"); }
		return retval;

	}
	// $ANTLR end "betweenList"

	partial void EnterRule_concatenation();
	partial void LeaveRule_concatenation();
	// $ANTLR start "concatenation"
	// Hql.g:471:1: concatenation : a= bitwiseNotExpression (c= CONCAT ^ bitwiseNotExpression ( CONCAT ! bitwiseNotExpression )* )? ;
	[GrammarRule("concatenation")]
	private AstParserRuleReturnScope<IASTNode, IToken> concatenation()
	{
		EnterRule_concatenation();
		EnterRule("concatenation", 51);
		TraceIn("concatenation", 51);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken c = default(IToken);
		IToken CONCAT185 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> a = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseNotExpression184 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseNotExpression186 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode c_tree = default(IASTNode);
		IASTNode CONCAT185_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "concatenation");
		DebugLocation(471, 1);
		try
		{
			// Hql.g:482:2: (a= bitwiseNotExpression (c= CONCAT ^ bitwiseNotExpression ( CONCAT ! bitwiseNotExpression )* )? )
			DebugEnterAlt(1);
			// Hql.g:482:4: a= bitwiseNotExpression (c= CONCAT ^ bitwiseNotExpression ( CONCAT ! bitwiseNotExpression )* )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(482, 5);
			PushFollow(Follow._bitwiseNotExpression_in_concatenation2320);
			a=bitwiseNotExpression();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(483, 2);
			// Hql.g:483:2: (c= CONCAT ^ bitwiseNotExpression ( CONCAT ! bitwiseNotExpression )* )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==CONCAT))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:483:4: c= CONCAT ^ bitwiseNotExpression ( CONCAT ! bitwiseNotExpression )*
				{
				DebugLocation(483, 5);
				c=(IToken)Match(input,CONCAT,Follow._CONCAT_in_concatenation2328); 
				c_tree = (IASTNode)adaptor.Create(c);
				root_0 = (IASTNode)adaptor.BecomeRoot(c_tree, root_0);
				DebugLocation(483, 14);
				 c.Type = EXPR_LIST; c.Text = "concatList"; 
				DebugLocation(484, 4);
				PushFollow(Follow._bitwiseNotExpression_in_concatenation2337);
				bitwiseNotExpression184=bitwiseNotExpression();
				PopFollow();

				adaptor.AddChild(root_0, bitwiseNotExpression184.Tree);
				DebugLocation(485, 4);
				// Hql.g:485:4: ( CONCAT ! bitwiseNotExpression )*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_1 = input.LA(1);

					if ((LA65_1==CONCAT))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:485:6: CONCAT ! bitwiseNotExpression
						{
						DebugLocation(485, 12);
						CONCAT185=(IToken)Match(input,CONCAT,Follow._CONCAT_in_concatenation2344); 
						DebugLocation(485, 14);
						PushFollow(Follow._bitwiseNotExpression_in_concatenation2347);
						bitwiseNotExpression186=bitwiseNotExpression();
						PopFollow();

						adaptor.AddChild(root_0, bitwiseNotExpression186.Tree);

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }


				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			   if (c != null)
			   {
			      IASTNode mc = (IASTNode) adaptor.Create(METHOD_CALL, "||");
			      IASTNode concat = (IASTNode) adaptor.Create(IDENT, "concat");
			      mc.AddChild(concat);
			      mc.AddChild((IASTNode) retval.Tree);
			      retval.Tree = mc;
			   }

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("concatenation", 51);
			LeaveRule("concatenation", 51);
			LeaveRule_concatenation();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "concatenation"); }
		return retval;

	}
	// $ANTLR end "concatenation"

	partial void EnterRule_bitwiseNotExpression();
	partial void LeaveRule_bitwiseNotExpression();
	// $ANTLR start "bitwiseNotExpression"
	// Hql.g:490:1: bitwiseNotExpression : ( ( BNOT ^ bitwiseOrExpression ) | bitwiseOrExpression );
	[GrammarRule("bitwiseNotExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> bitwiseNotExpression()
	{
		EnterRule_bitwiseNotExpression();
		EnterRule("bitwiseNotExpression", 52);
		TraceIn("bitwiseNotExpression", 52);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken BNOT187 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseOrExpression188 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseOrExpression189 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode BNOT187_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "bitwiseNotExpression");
		DebugLocation(490, 1);
		try
		{
			// Hql.g:491:2: ( ( BNOT ^ bitwiseOrExpression ) | bitwiseOrExpression )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==BNOT))
			{
				alt67 = 1;
			}
			else if ((LA67_1==ALL||LA67_1==ANY||LA67_1==AVG||LA67_1==CASE||LA67_1==COLON||LA67_1==COUNT||LA67_1==ELEMENTS||LA67_1==EMPTY||LA67_1==EXISTS||LA67_1==FALSE||LA67_1==IDENT||LA67_1==INDICES||LA67_1==MAX||(LA67_1>=MIN && LA67_1<=MINUS)||(LA67_1>=NULL && LA67_1<=NUM_LONG)||LA67_1==OPEN||(LA67_1>=PARAM && LA67_1<=PLUS)||LA67_1==QUOTED_String||LA67_1==SOME||LA67_1==SUM||LA67_1==TRUE))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:491:4: ( BNOT ^ bitwiseOrExpression )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(491, 4);
				// Hql.g:491:4: ( BNOT ^ bitwiseOrExpression )
				DebugEnterAlt(1);
				// Hql.g:491:5: BNOT ^ bitwiseOrExpression
				{
				DebugLocation(491, 9);
				BNOT187=(IToken)Match(input,BNOT,Follow._BNOT_in_bitwiseNotExpression2371); 
				BNOT187_tree = (IASTNode)adaptor.Create(BNOT187);
				root_0 = (IASTNode)adaptor.BecomeRoot(BNOT187_tree, root_0);
				DebugLocation(491, 11);
				PushFollow(Follow._bitwiseOrExpression_in_bitwiseNotExpression2374);
				bitwiseOrExpression188=bitwiseOrExpression();
				PopFollow();

				adaptor.AddChild(root_0, bitwiseOrExpression188.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:492:4: bitwiseOrExpression
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(492, 4);
				PushFollow(Follow._bitwiseOrExpression_in_bitwiseNotExpression2380);
				bitwiseOrExpression189=bitwiseOrExpression();
				PopFollow();

				adaptor.AddChild(root_0, bitwiseOrExpression189.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseNotExpression", 52);
			LeaveRule("bitwiseNotExpression", 52);
			LeaveRule_bitwiseNotExpression();
		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseNotExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseNotExpression"

	partial void EnterRule_bitwiseOrExpression();
	partial void LeaveRule_bitwiseOrExpression();
	// $ANTLR start "bitwiseOrExpression"
	// Hql.g:495:1: bitwiseOrExpression : bitwiseXOrExpression ( BOR ^ bitwiseXOrExpression )* ;
	[GrammarRule("bitwiseOrExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> bitwiseOrExpression()
	{
		EnterRule_bitwiseOrExpression();
		EnterRule("bitwiseOrExpression", 53);
		TraceIn("bitwiseOrExpression", 53);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken BOR191 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseXOrExpression190 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseXOrExpression192 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode BOR191_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "bitwiseOrExpression");
		DebugLocation(495, 1);
		try
		{
			// Hql.g:496:2: ( bitwiseXOrExpression ( BOR ^ bitwiseXOrExpression )* )
			DebugEnterAlt(1);
			// Hql.g:496:4: bitwiseXOrExpression ( BOR ^ bitwiseXOrExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(496, 4);
			PushFollow(Follow._bitwiseXOrExpression_in_bitwiseOrExpression2392);
			bitwiseXOrExpression190=bitwiseXOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, bitwiseXOrExpression190.Tree);
			DebugLocation(496, 25);
			// Hql.g:496:25: ( BOR ^ bitwiseXOrExpression )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==BOR))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:496:26: BOR ^ bitwiseXOrExpression
					{
					DebugLocation(496, 29);
					BOR191=(IToken)Match(input,BOR,Follow._BOR_in_bitwiseOrExpression2395); 
					BOR191_tree = (IASTNode)adaptor.Create(BOR191);
					root_0 = (IASTNode)adaptor.BecomeRoot(BOR191_tree, root_0);
					DebugLocation(496, 31);
					PushFollow(Follow._bitwiseXOrExpression_in_bitwiseOrExpression2398);
					bitwiseXOrExpression192=bitwiseXOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, bitwiseXOrExpression192.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOrExpression", 53);
			LeaveRule("bitwiseOrExpression", 53);
			LeaveRule_bitwiseOrExpression();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOrExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseOrExpression"

	partial void EnterRule_bitwiseXOrExpression();
	partial void LeaveRule_bitwiseXOrExpression();
	// $ANTLR start "bitwiseXOrExpression"
	// Hql.g:499:1: bitwiseXOrExpression : bitwiseAndExpression ( BXOR ^ bitwiseAndExpression )* ;
	[GrammarRule("bitwiseXOrExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> bitwiseXOrExpression()
	{
		EnterRule_bitwiseXOrExpression();
		EnterRule("bitwiseXOrExpression", 54);
		TraceIn("bitwiseXOrExpression", 54);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken BXOR194 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseAndExpression193 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> bitwiseAndExpression195 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode BXOR194_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "bitwiseXOrExpression");
		DebugLocation(499, 1);
		try
		{
			// Hql.g:500:2: ( bitwiseAndExpression ( BXOR ^ bitwiseAndExpression )* )
			DebugEnterAlt(1);
			// Hql.g:500:4: bitwiseAndExpression ( BXOR ^ bitwiseAndExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(500, 4);
			PushFollow(Follow._bitwiseAndExpression_in_bitwiseXOrExpression2412);
			bitwiseAndExpression193=bitwiseAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, bitwiseAndExpression193.Tree);
			DebugLocation(500, 25);
			// Hql.g:500:25: ( BXOR ^ bitwiseAndExpression )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_1 = input.LA(1);

				if ((LA69_1==BXOR))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:500:26: BXOR ^ bitwiseAndExpression
					{
					DebugLocation(500, 30);
					BXOR194=(IToken)Match(input,BXOR,Follow._BXOR_in_bitwiseXOrExpression2415); 
					BXOR194_tree = (IASTNode)adaptor.Create(BXOR194);
					root_0 = (IASTNode)adaptor.BecomeRoot(BXOR194_tree, root_0);
					DebugLocation(500, 32);
					PushFollow(Follow._bitwiseAndExpression_in_bitwiseXOrExpression2418);
					bitwiseAndExpression195=bitwiseAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, bitwiseAndExpression195.Tree);

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXOrExpression", 54);
			LeaveRule("bitwiseXOrExpression", 54);
			LeaveRule_bitwiseXOrExpression();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXOrExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXOrExpression"

	partial void EnterRule_bitwiseAndExpression();
	partial void LeaveRule_bitwiseAndExpression();
	// $ANTLR start "bitwiseAndExpression"
	// Hql.g:503:1: bitwiseAndExpression : additiveExpression ( BAND ^ additiveExpression )* ;
	[GrammarRule("bitwiseAndExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> bitwiseAndExpression()
	{
		EnterRule_bitwiseAndExpression();
		EnterRule("bitwiseAndExpression", 55);
		TraceIn("bitwiseAndExpression", 55);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken BAND197 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> additiveExpression196 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> additiveExpression198 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode BAND197_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "bitwiseAndExpression");
		DebugLocation(503, 1);
		try
		{
			// Hql.g:504:2: ( additiveExpression ( BAND ^ additiveExpression )* )
			DebugEnterAlt(1);
			// Hql.g:504:4: additiveExpression ( BAND ^ additiveExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(504, 4);
			PushFollow(Follow._additiveExpression_in_bitwiseAndExpression2432);
			additiveExpression196=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression196.Tree);
			DebugLocation(504, 23);
			// Hql.g:504:23: ( BAND ^ additiveExpression )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==BAND))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:504:24: BAND ^ additiveExpression
					{
					DebugLocation(504, 28);
					BAND197=(IToken)Match(input,BAND,Follow._BAND_in_bitwiseAndExpression2435); 
					BAND197_tree = (IASTNode)adaptor.Create(BAND197);
					root_0 = (IASTNode)adaptor.BecomeRoot(BAND197_tree, root_0);
					DebugLocation(504, 30);
					PushFollow(Follow._additiveExpression_in_bitwiseAndExpression2438);
					additiveExpression198=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression198.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseAndExpression", 55);
			LeaveRule("bitwiseAndExpression", 55);
			LeaveRule_bitwiseAndExpression();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseAndExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseAndExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Hql.g:508:1: additiveExpression : multiplyExpression ( ( PLUS ^| MINUS ^) multiplyExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 56);
		TraceIn("additiveExpression", 56);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken PLUS200 = default(IToken);
		IToken MINUS201 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> multiplyExpression199 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> multiplyExpression202 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode PLUS200_tree = default(IASTNode);
		IASTNode MINUS201_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(508, 1);
		try
		{
			// Hql.g:509:2: ( multiplyExpression ( ( PLUS ^| MINUS ^) multiplyExpression )* )
			DebugEnterAlt(1);
			// Hql.g:509:4: multiplyExpression ( ( PLUS ^| MINUS ^) multiplyExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(509, 4);
			PushFollow(Follow._multiplyExpression_in_additiveExpression2452);
			multiplyExpression199=multiplyExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplyExpression199.Tree);
			DebugLocation(509, 23);
			// Hql.g:509:23: ( ( PLUS ^| MINUS ^) multiplyExpression )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_1 = input.LA(1);

				if ((LA72_1==MINUS||LA72_1==PLUS))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:509:25: ( PLUS ^| MINUS ^) multiplyExpression
					{
					DebugLocation(509, 25);
					// Hql.g:509:25: ( PLUS ^| MINUS ^)
					int alt71=2;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==PLUS))
					{
						alt71 = 1;
					}
					else if ((LA71_1==MINUS))
					{
						alt71 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:509:27: PLUS ^
						{
						DebugLocation(509, 31);
						PLUS200=(IToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression2458); 
						PLUS200_tree = (IASTNode)adaptor.Create(PLUS200);
						root_0 = (IASTNode)adaptor.BecomeRoot(PLUS200_tree, root_0);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Hql.g:509:35: MINUS ^
						{
						DebugLocation(509, 40);
						MINUS201=(IToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression2463); 
						MINUS201_tree = (IASTNode)adaptor.Create(MINUS201);
						root_0 = (IASTNode)adaptor.BecomeRoot(MINUS201_tree, root_0);

						}
						break;

					}
					} finally { DebugExitSubRule(71); }

					DebugLocation(509, 44);
					PushFollow(Follow._multiplyExpression_in_additiveExpression2468);
					multiplyExpression202=multiplyExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplyExpression202.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 56);
			LeaveRule("additiveExpression", 56);
			LeaveRule_additiveExpression();
		}
		DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplyExpression();
	partial void LeaveRule_multiplyExpression();
	// $ANTLR start "multiplyExpression"
	// Hql.g:513:1: multiplyExpression : unaryExpression ( ( STAR ^| DIV ^) unaryExpression )* ;
	[GrammarRule("multiplyExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> multiplyExpression()
	{
		EnterRule_multiplyExpression();
		EnterRule("multiplyExpression", 57);
		TraceIn("multiplyExpression", 57);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken STAR204 = default(IToken);
		IToken DIV205 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> unaryExpression203 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> unaryExpression206 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode STAR204_tree = default(IASTNode);
		IASTNode DIV205_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "multiplyExpression");
		DebugLocation(513, 1);
		try
		{
			// Hql.g:514:2: ( unaryExpression ( ( STAR ^| DIV ^) unaryExpression )* )
			DebugEnterAlt(1);
			// Hql.g:514:4: unaryExpression ( ( STAR ^| DIV ^) unaryExpression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(514, 4);
			PushFollow(Follow._unaryExpression_in_multiplyExpression2483);
			unaryExpression203=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression203.Tree);
			DebugLocation(514, 20);
			// Hql.g:514:20: ( ( STAR ^| DIV ^) unaryExpression )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==DIV||LA74_1==STAR))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:514:22: ( STAR ^| DIV ^) unaryExpression
					{
					DebugLocation(514, 22);
					// Hql.g:514:22: ( STAR ^| DIV ^)
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, false);
					int LA73_1 = input.LA(1);

					if ((LA73_1==STAR))
					{
						alt73 = 1;
					}
					else if ((LA73_1==DIV))
					{
						alt73 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:514:24: STAR ^
						{
						DebugLocation(514, 28);
						STAR204=(IToken)Match(input,STAR,Follow._STAR_in_multiplyExpression2489); 
						STAR204_tree = (IASTNode)adaptor.Create(STAR204);
						root_0 = (IASTNode)adaptor.BecomeRoot(STAR204_tree, root_0);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Hql.g:514:32: DIV ^
						{
						DebugLocation(514, 35);
						DIV205=(IToken)Match(input,DIV,Follow._DIV_in_multiplyExpression2494); 
						DIV205_tree = (IASTNode)adaptor.Create(DIV205);
						root_0 = (IASTNode)adaptor.BecomeRoot(DIV205_tree, root_0);

						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(514, 39);
					PushFollow(Follow._unaryExpression_in_multiplyExpression2499);
					unaryExpression206=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression206.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplyExpression", 57);
			LeaveRule("multiplyExpression", 57);
			LeaveRule_multiplyExpression();
		}
		DebugLocation(515, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplyExpression"); }
		return retval;

	}
	// $ANTLR end "multiplyExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Hql.g:518:1: unaryExpression : (m= MINUS mu= unaryExpression -> ^( UNARY_MINUS[$m] $mu) |p= PLUS pu= unaryExpression -> ^( UNARY_PLUS[$p] $pu) | caseExpression | quantifiedExpression | atom );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 58);
		TraceIn("unaryExpression", 58);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken m = default(IToken);
		IToken p = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> mu = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> pu = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> caseExpression207 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> quantifiedExpression208 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> atom209 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode m_tree = default(IASTNode);
		IASTNode p_tree = default(IASTNode);
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(518, 1);
		try
		{
			// Hql.g:519:2: (m= MINUS mu= unaryExpression -> ^( UNARY_MINUS[$m] $mu) |p= PLUS pu= unaryExpression -> ^( UNARY_PLUS[$p] $pu) | caseExpression | quantifiedExpression | atom )
			int alt75=5;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case MINUS:
				{
				alt75 = 1;
				}
				break;
			case PLUS:
				{
				alt75 = 2;
				}
				break;
			case CASE:
				{
				alt75 = 3;
				}
				break;
			case ALL:
			case ANY:
			case EXISTS:
			case SOME:
				{
				alt75 = 4;
				}
				break;
			case AVG:
			case COLON:
			case COUNT:
			case ELEMENTS:
			case EMPTY:
			case FALSE:
			case IDENT:
			case INDICES:
			case MAX:
			case MIN:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case OPEN:
			case PARAM:
			case QUOTED_String:
			case SUM:
			case TRUE:
				{
				alt75 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:519:4: m= MINUS mu= unaryExpression
				{
				DebugLocation(519, 5);
				m=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression2517);  
				stream_MINUS.Add(m);

				DebugLocation(519, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression2521);
				mu=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(mu.Tree);


				{
				// AST REWRITE
				// elements: mu
				// token labels: 
				// rule labels: mu, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_mu=new RewriteRuleSubtreeStream(adaptor,"rule mu",mu!=null?mu.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 519:31: -> ^( UNARY_MINUS[$m] $mu)
				{
					DebugLocation(519, 34);
					// Hql.g:519:34: ^( UNARY_MINUS[$m] $mu)
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(519, 36);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(UNARY_MINUS, m), root_1);

					DebugLocation(519, 53);
					adaptor.AddChild(root_1, stream_mu.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:520:4: p= PLUS pu= unaryExpression
				{
				DebugLocation(520, 5);
				p=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression2538);  
				stream_PLUS.Add(p);

				DebugLocation(520, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression2542);
				pu=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(pu.Tree);


				{
				// AST REWRITE
				// elements: pu
				// token labels: 
				// rule labels: pu, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_pu=new RewriteRuleSubtreeStream(adaptor,"rule pu",pu!=null?pu.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 520:30: -> ^( UNARY_PLUS[$p] $pu)
				{
					DebugLocation(520, 33);
					// Hql.g:520:33: ^( UNARY_PLUS[$p] $pu)
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(520, 35);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(UNARY_PLUS, p), root_1);

					DebugLocation(520, 51);
					adaptor.AddChild(root_1, stream_pu.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:521:4: caseExpression
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(521, 4);
				PushFollow(Follow._caseExpression_in_unaryExpression2557);
				caseExpression207=caseExpression();
				PopFollow();

				adaptor.AddChild(root_0, caseExpression207.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Hql.g:522:4: quantifiedExpression
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(522, 4);
				PushFollow(Follow._quantifiedExpression_in_unaryExpression2562);
				quantifiedExpression208=quantifiedExpression();
				PopFollow();

				adaptor.AddChild(root_0, quantifiedExpression208.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Hql.g:523:4: atom
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(523, 4);
				PushFollow(Follow._atom_in_unaryExpression2567);
				atom209=atom();
				PopFollow();

				adaptor.AddChild(root_0, atom209.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 58);
			LeaveRule("unaryExpression", 58);
			LeaveRule_unaryExpression();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Hql.g:526:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END -> ^( CASE ( whenClause )+ ( elseClause )? ) | CASE unaryExpression ( altWhenClause )+ ( elseClause )? END -> ^( CASE2 unaryExpression ( altWhenClause )+ ( elseClause )? ) );
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 59);
		TraceIn("caseExpression", 59);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken CASE210 = default(IToken);
		IToken END213 = default(IToken);
		IToken CASE214 = default(IToken);
		IToken END218 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> whenClause211 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> elseClause212 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> unaryExpression215 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> altWhenClause216 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> elseClause217 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode CASE210_tree = default(IASTNode);
		IASTNode END213_tree = default(IASTNode);
		IASTNode CASE214_tree = default(IASTNode);
		IASTNode END218_tree = default(IASTNode);
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
		RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_altWhenClause=new RewriteRuleSubtreeStream(adaptor,"rule altWhenClause");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(526, 1);
		try
		{
			// Hql.g:527:2: ( CASE ( whenClause )+ ( elseClause )? END -> ^( CASE ( whenClause )+ ( elseClause )? ) | CASE unaryExpression ( altWhenClause )+ ( elseClause )? END -> ^( CASE2 unaryExpression ( altWhenClause )+ ( elseClause )? ) )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==CASE))
			{
				int LA80_2 = input.LA(2);

				if ((LA80_2==WHEN))
				{
					alt80 = 1;
				}
				else if ((LA80_2==ALL||LA80_2==ANY||LA80_2==AVG||LA80_2==CASE||LA80_2==COLON||LA80_2==COUNT||LA80_2==ELEMENTS||LA80_2==EMPTY||LA80_2==EXISTS||LA80_2==FALSE||LA80_2==IDENT||LA80_2==INDICES||LA80_2==MAX||(LA80_2>=MIN && LA80_2<=MINUS)||(LA80_2>=NULL && LA80_2<=NUM_LONG)||LA80_2==OPEN||(LA80_2>=PARAM && LA80_2<=PLUS)||LA80_2==QUOTED_String||LA80_2==SOME||LA80_2==SUM||LA80_2==TRUE))
				{
					alt80 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 80, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:527:4: CASE ( whenClause )+ ( elseClause )? END
				{
				DebugLocation(527, 4);
				CASE210=(IToken)Match(input,CASE,Follow._CASE_in_caseExpression2579);  
				stream_CASE.Add(CASE210);

				DebugLocation(527, 9);
				// Hql.g:527:9: ( whenClause )+
				int cnt76=0;
				try { DebugEnterSubRule(76);
				while (true)
				{
					int alt76=2;
					try { DebugEnterDecision(76, false);
					int LA76_1 = input.LA(1);

					if ((LA76_1==WHEN))
					{
						alt76 = 1;
					}


					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:527:10: whenClause
						{
						DebugLocation(527, 10);
						PushFollow(Follow._whenClause_in_caseExpression2582);
						whenClause211=whenClause();
						PopFollow();

						stream_whenClause.Add(whenClause211.Tree);

						}
						break;

					default:
						if (cnt76 >= 1)
							goto loop76;

						EarlyExitException eee76 = new EarlyExitException( 76, input );
						DebugRecognitionException(eee76);
						throw eee76;
					}
					cnt76++;
				}
				loop76:
					;

				} finally { DebugExitSubRule(76); }

				DebugLocation(527, 23);
				// Hql.g:527:23: ( elseClause )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==ELSE))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:527:24: elseClause
					{
					DebugLocation(527, 24);
					PushFollow(Follow._elseClause_in_caseExpression2587);
					elseClause212=elseClause();
					PopFollow();

					stream_elseClause.Add(elseClause212.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(527, 37);
				END213=(IToken)Match(input,END,Follow._END_in_caseExpression2591);  
				stream_END.Add(END213);



				{
				// AST REWRITE
				// elements: CASE, whenClause, elseClause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 528:3: -> ^( CASE ( whenClause )+ ( elseClause )? )
				{
					DebugLocation(528, 6);
					// Hql.g:528:6: ^( CASE ( whenClause )+ ( elseClause )? )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(528, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(stream_CASE.NextNode(), root_1);

					DebugLocation(528, 13);
					if (!(stream_whenClause.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenClause.HasNext )
					{
						DebugLocation(528, 13);
						adaptor.AddChild(root_1, stream_whenClause.NextTree());

					}
					stream_whenClause.Reset();
					DebugLocation(528, 25);
					// Hql.g:528:25: ( elseClause )?
					if (stream_elseClause.HasNext)
					{
						DebugLocation(528, 25);
						adaptor.AddChild(root_1, stream_elseClause.NextTree());

					}
					stream_elseClause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:529:4: CASE unaryExpression ( altWhenClause )+ ( elseClause )? END
				{
				DebugLocation(529, 4);
				CASE214=(IToken)Match(input,CASE,Follow._CASE_in_caseExpression2611);  
				stream_CASE.Add(CASE214);

				DebugLocation(529, 9);
				PushFollow(Follow._unaryExpression_in_caseExpression2613);
				unaryExpression215=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression215.Tree);
				DebugLocation(529, 25);
				// Hql.g:529:25: ( altWhenClause )+
				int cnt78=0;
				try { DebugEnterSubRule(78);
				while (true)
				{
					int alt78=2;
					try { DebugEnterDecision(78, false);
					int LA78_1 = input.LA(1);

					if ((LA78_1==WHEN))
					{
						alt78 = 1;
					}


					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:529:26: altWhenClause
						{
						DebugLocation(529, 26);
						PushFollow(Follow._altWhenClause_in_caseExpression2616);
						altWhenClause216=altWhenClause();
						PopFollow();

						stream_altWhenClause.Add(altWhenClause216.Tree);

						}
						break;

					default:
						if (cnt78 >= 1)
							goto loop78;

						EarlyExitException eee78 = new EarlyExitException( 78, input );
						DebugRecognitionException(eee78);
						throw eee78;
					}
					cnt78++;
				}
				loop78:
					;

				} finally { DebugExitSubRule(78); }

				DebugLocation(529, 42);
				// Hql.g:529:42: ( elseClause )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==ELSE))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:529:43: elseClause
					{
					DebugLocation(529, 43);
					PushFollow(Follow._elseClause_in_caseExpression2621);
					elseClause217=elseClause();
					PopFollow();

					stream_elseClause.Add(elseClause217.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(529, 56);
				END218=(IToken)Match(input,END,Follow._END_in_caseExpression2625);  
				stream_END.Add(END218);



				{
				// AST REWRITE
				// elements: unaryExpression, altWhenClause, elseClause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 530:3: -> ^( CASE2 unaryExpression ( altWhenClause )+ ( elseClause )? )
				{
					DebugLocation(530, 6);
					// Hql.g:530:6: ^( CASE2 unaryExpression ( altWhenClause )+ ( elseClause )? )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(530, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(CASE2, "CASE2"), root_1);

					DebugLocation(530, 14);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());
					DebugLocation(530, 30);
					if (!(stream_altWhenClause.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_altWhenClause.HasNext )
					{
						DebugLocation(530, 30);
						adaptor.AddChild(root_1, stream_altWhenClause.NextTree());

					}
					stream_altWhenClause.Reset();
					DebugLocation(530, 45);
					// Hql.g:530:45: ( elseClause )?
					if (stream_elseClause.HasNext)
					{
						DebugLocation(530, 45);
						adaptor.AddChild(root_1, stream_elseClause.NextTree());

					}
					stream_elseClause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 59);
			LeaveRule("caseExpression", 59);
			LeaveRule_caseExpression();
		}
		DebugLocation(531, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenClause();
	partial void LeaveRule_whenClause();
	// $ANTLR start "whenClause"
	// Hql.g:533:1: whenClause : ( WHEN ^ logicalExpression THEN ! expression ) ;
	[GrammarRule("whenClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> whenClause()
	{
		EnterRule_whenClause();
		EnterRule("whenClause", 60);
		TraceIn("whenClause", 60);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken WHEN219 = default(IToken);
		IToken THEN221 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> logicalExpression220 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression222 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode WHEN219_tree = default(IASTNode);
		IASTNode THEN221_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "whenClause");
		DebugLocation(533, 1);
		try
		{
			// Hql.g:534:2: ( ( WHEN ^ logicalExpression THEN ! expression ) )
			DebugEnterAlt(1);
			// Hql.g:534:4: ( WHEN ^ logicalExpression THEN ! expression )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(534, 4);
			// Hql.g:534:4: ( WHEN ^ logicalExpression THEN ! expression )
			DebugEnterAlt(1);
			// Hql.g:534:5: WHEN ^ logicalExpression THEN ! expression
			{
			DebugLocation(534, 9);
			WHEN219=(IToken)Match(input,WHEN,Follow._WHEN_in_whenClause2654); 
			WHEN219_tree = (IASTNode)adaptor.Create(WHEN219);
			root_0 = (IASTNode)adaptor.BecomeRoot(WHEN219_tree, root_0);
			DebugLocation(534, 11);
			PushFollow(Follow._logicalExpression_in_whenClause2657);
			logicalExpression220=logicalExpression();
			PopFollow();

			adaptor.AddChild(root_0, logicalExpression220.Tree);
			DebugLocation(534, 33);
			THEN221=(IToken)Match(input,THEN,Follow._THEN_in_whenClause2659); 
			DebugLocation(534, 35);
			PushFollow(Follow._expression_in_whenClause2662);
			expression222=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression222.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenClause", 60);
			LeaveRule("whenClause", 60);
			LeaveRule_whenClause();
		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "whenClause"); }
		return retval;

	}
	// $ANTLR end "whenClause"

	partial void EnterRule_altWhenClause();
	partial void LeaveRule_altWhenClause();
	// $ANTLR start "altWhenClause"
	// Hql.g:537:1: altWhenClause : ( WHEN ^ unaryExpression THEN ! expression ) ;
	[GrammarRule("altWhenClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> altWhenClause()
	{
		EnterRule_altWhenClause();
		EnterRule("altWhenClause", 61);
		TraceIn("altWhenClause", 61);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken WHEN223 = default(IToken);
		IToken THEN225 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> unaryExpression224 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression226 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode WHEN223_tree = default(IASTNode);
		IASTNode THEN225_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "altWhenClause");
		DebugLocation(537, 1);
		try
		{
			// Hql.g:538:2: ( ( WHEN ^ unaryExpression THEN ! expression ) )
			DebugEnterAlt(1);
			// Hql.g:538:4: ( WHEN ^ unaryExpression THEN ! expression )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(538, 4);
			// Hql.g:538:4: ( WHEN ^ unaryExpression THEN ! expression )
			DebugEnterAlt(1);
			// Hql.g:538:5: WHEN ^ unaryExpression THEN ! expression
			{
			DebugLocation(538, 9);
			WHEN223=(IToken)Match(input,WHEN,Follow._WHEN_in_altWhenClause2676); 
			WHEN223_tree = (IASTNode)adaptor.Create(WHEN223);
			root_0 = (IASTNode)adaptor.BecomeRoot(WHEN223_tree, root_0);
			DebugLocation(538, 11);
			PushFollow(Follow._unaryExpression_in_altWhenClause2679);
			unaryExpression224=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression224.Tree);
			DebugLocation(538, 31);
			THEN225=(IToken)Match(input,THEN,Follow._THEN_in_altWhenClause2681); 
			DebugLocation(538, 33);
			PushFollow(Follow._expression_in_altWhenClause2684);
			expression226=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression226.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("altWhenClause", 61);
			LeaveRule("altWhenClause", 61);
			LeaveRule_altWhenClause();
		}
		DebugLocation(539, 1);
		} finally { DebugExitRule(GrammarFileName, "altWhenClause"); }
		return retval;

	}
	// $ANTLR end "altWhenClause"

	partial void EnterRule_elseClause();
	partial void LeaveRule_elseClause();
	// $ANTLR start "elseClause"
	// Hql.g:541:1: elseClause : ( ELSE ^ expression ) ;
	[GrammarRule("elseClause")]
	private AstParserRuleReturnScope<IASTNode, IToken> elseClause()
	{
		EnterRule_elseClause();
		EnterRule("elseClause", 62);
		TraceIn("elseClause", 62);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken ELSE227 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> expression228 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode ELSE227_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "elseClause");
		DebugLocation(541, 1);
		try
		{
			// Hql.g:542:2: ( ( ELSE ^ expression ) )
			DebugEnterAlt(1);
			// Hql.g:542:4: ( ELSE ^ expression )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(542, 4);
			// Hql.g:542:4: ( ELSE ^ expression )
			DebugEnterAlt(1);
			// Hql.g:542:5: ELSE ^ expression
			{
			DebugLocation(542, 9);
			ELSE227=(IToken)Match(input,ELSE,Follow._ELSE_in_elseClause2698); 
			ELSE227_tree = (IASTNode)adaptor.Create(ELSE227);
			root_0 = (IASTNode)adaptor.BecomeRoot(ELSE227_tree, root_0);
			DebugLocation(542, 11);
			PushFollow(Follow._expression_in_elseClause2701);
			expression228=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression228.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elseClause", 62);
			LeaveRule("elseClause", 62);
			LeaveRule_elseClause();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "elseClause"); }
		return retval;

	}
	// $ANTLR end "elseClause"

	partial void EnterRule_quantifiedExpression();
	partial void LeaveRule_quantifiedExpression();
	// $ANTLR start "quantifiedExpression"
	// Hql.g:545:1: quantifiedExpression : ( SOME ^| EXISTS ^| ALL ^| ANY ^) ( identifier | collectionExpr | ( OPEN ! ( subQuery ) CLOSE !) ) ;
	[GrammarRule("quantifiedExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> quantifiedExpression()
	{
		EnterRule_quantifiedExpression();
		EnterRule("quantifiedExpression", 63);
		TraceIn("quantifiedExpression", 63);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken SOME229 = default(IToken);
		IToken EXISTS230 = default(IToken);
		IToken ALL231 = default(IToken);
		IToken ANY232 = default(IToken);
		IToken OPEN235 = default(IToken);
		IToken CLOSE237 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identifier233 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> collectionExpr234 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> subQuery236 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode SOME229_tree = default(IASTNode);
		IASTNode EXISTS230_tree = default(IASTNode);
		IASTNode ALL231_tree = default(IASTNode);
		IASTNode ANY232_tree = default(IASTNode);
		IASTNode OPEN235_tree = default(IASTNode);
		IASTNode CLOSE237_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "quantifiedExpression");
		DebugLocation(545, 1);
		try
		{
			// Hql.g:546:2: ( ( SOME ^| EXISTS ^| ALL ^| ANY ^) ( identifier | collectionExpr | ( OPEN ! ( subQuery ) CLOSE !) ) )
			DebugEnterAlt(1);
			// Hql.g:546:4: ( SOME ^| EXISTS ^| ALL ^| ANY ^) ( identifier | collectionExpr | ( OPEN ! ( subQuery ) CLOSE !) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(546, 4);
			// Hql.g:546:4: ( SOME ^| EXISTS ^| ALL ^| ANY ^)
			int alt81=4;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case SOME:
				{
				alt81 = 1;
				}
				break;
			case EXISTS:
				{
				alt81 = 2;
				}
				break;
			case ALL:
				{
				alt81 = 3;
				}
				break;
			case ANY:
				{
				alt81 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:546:6: SOME ^
				{
				DebugLocation(546, 10);
				SOME229=(IToken)Match(input,SOME,Follow._SOME_in_quantifiedExpression2716); 
				SOME229_tree = (IASTNode)adaptor.Create(SOME229);
				root_0 = (IASTNode)adaptor.BecomeRoot(SOME229_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:546:14: EXISTS ^
				{
				DebugLocation(546, 20);
				EXISTS230=(IToken)Match(input,EXISTS,Follow._EXISTS_in_quantifiedExpression2721); 
				EXISTS230_tree = (IASTNode)adaptor.Create(EXISTS230);
				root_0 = (IASTNode)adaptor.BecomeRoot(EXISTS230_tree, root_0);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:546:24: ALL ^
				{
				DebugLocation(546, 27);
				ALL231=(IToken)Match(input,ALL,Follow._ALL_in_quantifiedExpression2726); 
				ALL231_tree = (IASTNode)adaptor.Create(ALL231);
				root_0 = (IASTNode)adaptor.BecomeRoot(ALL231_tree, root_0);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Hql.g:546:31: ANY ^
				{
				DebugLocation(546, 34);
				ANY232=(IToken)Match(input,ANY,Follow._ANY_in_quantifiedExpression2731); 
				ANY232_tree = (IASTNode)adaptor.Create(ANY232);
				root_0 = (IASTNode)adaptor.BecomeRoot(ANY232_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(547, 2);
			// Hql.g:547:2: ( identifier | collectionExpr | ( OPEN ! ( subQuery ) CLOSE !) )
			int alt82=3;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt82 = 1;
				}
				break;
			case ELEMENTS:
			case INDICES:
				{
				alt82 = 2;
				}
				break;
			case OPEN:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:547:4: identifier
				{
				DebugLocation(547, 4);
				PushFollow(Follow._identifier_in_quantifiedExpression2740);
				identifier233=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier233.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:547:17: collectionExpr
				{
				DebugLocation(547, 17);
				PushFollow(Follow._collectionExpr_in_quantifiedExpression2744);
				collectionExpr234=collectionExpr();
				PopFollow();

				adaptor.AddChild(root_0, collectionExpr234.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:547:34: ( OPEN ! ( subQuery ) CLOSE !)
				{
				DebugLocation(547, 34);
				// Hql.g:547:34: ( OPEN ! ( subQuery ) CLOSE !)
				DebugEnterAlt(1);
				// Hql.g:547:35: OPEN ! ( subQuery ) CLOSE !
				{
				DebugLocation(547, 39);
				OPEN235=(IToken)Match(input,OPEN,Follow._OPEN_in_quantifiedExpression2749); 
				DebugLocation(547, 41);
				// Hql.g:547:41: ( subQuery )
				DebugEnterAlt(1);
				// Hql.g:547:43: subQuery
				{
				DebugLocation(547, 43);
				PushFollow(Follow._subQuery_in_quantifiedExpression2754);
				subQuery236=subQuery();
				PopFollow();

				adaptor.AddChild(root_0, subQuery236.Tree);

				}

				DebugLocation(547, 59);
				CLOSE237=(IToken)Match(input,CLOSE,Follow._CLOSE_in_quantifiedExpression2758); 

				}


				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("quantifiedExpression", 63);
			LeaveRule("quantifiedExpression", 63);
			LeaveRule_quantifiedExpression();
		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "quantifiedExpression"); }
		return retval;

	}
	// $ANTLR end "quantifiedExpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Hql.g:553:1: atom : primaryExpression ( DOT ^ identifier ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )? |lb= OPEN_BRACKET ^ expression CLOSE_BRACKET !)* ;
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<IASTNode, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 64);
		TraceIn("atom", 64);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken op = default(IToken);
		IToken lb = default(IToken);
		IToken DOT239 = default(IToken);
		IToken CLOSE242 = default(IToken);
		IToken CLOSE_BRACKET244 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> primaryExpression238 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier240 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> exprList241 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression243 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode op_tree = default(IASTNode);
		IASTNode lb_tree = default(IASTNode);
		IASTNode DOT239_tree = default(IASTNode);
		IASTNode CLOSE242_tree = default(IASTNode);
		IASTNode CLOSE_BRACKET244_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(553, 1);
		try
		{
			// Hql.g:554:3: ( primaryExpression ( DOT ^ identifier ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )? |lb= OPEN_BRACKET ^ expression CLOSE_BRACKET !)* )
			DebugEnterAlt(1);
			// Hql.g:554:5: primaryExpression ( DOT ^ identifier ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )? |lb= OPEN_BRACKET ^ expression CLOSE_BRACKET !)*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(554, 5);
			PushFollow(Follow._primaryExpression_in_atom2777);
			primaryExpression238=primaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, primaryExpression238.Tree);
			DebugLocation(555, 3);
			// Hql.g:555:3: ( DOT ^ identifier ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )? |lb= OPEN_BRACKET ^ expression CLOSE_BRACKET !)*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=3;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==DOT))
				{
					alt84 = 1;
				}
				else if ((LA84_1==OPEN_BRACKET))
				{
					alt84 = 2;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:556:4: DOT ^ identifier ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )?
					{
					DebugLocation(556, 7);
					DOT239=(IToken)Match(input,DOT,Follow._DOT_in_atom2786); 
					DOT239_tree = (IASTNode)adaptor.Create(DOT239);
					root_0 = (IASTNode)adaptor.BecomeRoot(DOT239_tree, root_0);
					DebugLocation(556, 9);
					PushFollow(Follow._identifier_in_atom2789);
					identifier240=identifier();
					PopFollow();

					adaptor.AddChild(root_0, identifier240.Tree);
					DebugLocation(557, 5);
					// Hql.g:557:5: ( options {greedy=true; } : (op= OPEN ^ exprList CLOSE !) )?
					int alt83=2;
					try { DebugEnterSubRule(83);
					try { DebugEnterDecision(83, false);
					int LA83_1 = input.LA(1);

					if ((LA83_1==OPEN))
					{
						alt83 = 1;
					}
					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:558:6: (op= OPEN ^ exprList CLOSE !)
						{
						DebugLocation(558, 6);
						// Hql.g:558:6: (op= OPEN ^ exprList CLOSE !)
						DebugEnterAlt(1);
						// Hql.g:558:8: op= OPEN ^ exprList CLOSE !
						{
						DebugLocation(558, 10);
						op=(IToken)Match(input,OPEN,Follow._OPEN_in_atom2817); 
						op_tree = (IASTNode)adaptor.Create(op);
						root_0 = (IASTNode)adaptor.BecomeRoot(op_tree, root_0);
						DebugLocation(558, 17);
						op.Type = METHOD_CALL; 
						DebugLocation(558, 44);
						PushFollow(Follow._exprList_in_atom2822);
						exprList241=exprList();
						PopFollow();

						adaptor.AddChild(root_0, exprList241.Tree);
						DebugLocation(558, 58);
						CLOSE242=(IToken)Match(input,CLOSE,Follow._CLOSE_in_atom2824); 

						}


						}
						break;

					}
					} finally { DebugExitSubRule(83); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:559:5: lb= OPEN_BRACKET ^ expression CLOSE_BRACKET !
					{
					DebugLocation(559, 7);
					lb=(IToken)Match(input,OPEN_BRACKET,Follow._OPEN_BRACKET_in_atom2838); 
					lb_tree = (IASTNode)adaptor.Create(lb);
					root_0 = (IASTNode)adaptor.BecomeRoot(lb_tree, root_0);
					DebugLocation(559, 22);
					lb.Type = INDEX_OP; 
					DebugLocation(559, 46);
					PushFollow(Follow._expression_in_atom2843);
					expression243=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression243.Tree);
					DebugLocation(559, 70);
					CLOSE_BRACKET244=(IToken)Match(input,CLOSE_BRACKET,Follow._CLOSE_BRACKET_in_atom2845); 

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 64);
			LeaveRule("atom", 64);
			LeaveRule_atom();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// Hql.g:564:1: primaryExpression : ( identPrimary ( options {greedy=true; } : DOT ^ 'class' )? | constant | COLON ^ identifier | OPEN ! ( expressionOrVector | subQuery ) CLOSE !| PARAM ^ ( NUM_INT )? );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<IASTNode, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 65);
		TraceIn("primaryExpression", 65);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken DOT246 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken COLON249 = default(IToken);
		IToken OPEN251 = default(IToken);
		IToken CLOSE254 = default(IToken);
		IToken PARAM255 = default(IToken);
		IToken NUM_INT256 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identPrimary245 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> constant248 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier250 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expressionOrVector252 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> subQuery253 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode DOT246_tree = default(IASTNode);
		IASTNode string_literal247_tree = default(IASTNode);
		IASTNode COLON249_tree = default(IASTNode);
		IASTNode OPEN251_tree = default(IASTNode);
		IASTNode CLOSE254_tree = default(IASTNode);
		IASTNode PARAM255_tree = default(IASTNode);
		IASTNode NUM_INT256_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(564, 1);
		try
		{
			// Hql.g:565:2: ( identPrimary ( options {greedy=true; } : DOT ^ 'class' )? | constant | COLON ^ identifier | OPEN ! ( expressionOrVector | subQuery ) CLOSE !| PARAM ^ ( NUM_INT )? )
			int alt88=5;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case AVG:
			case COUNT:
			case ELEMENTS:
			case IDENT:
			case INDICES:
			case MAX:
			case MIN:
			case SUM:
				{
				alt88 = 1;
				}
				break;
			case EMPTY:
			case FALSE:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
			case TRUE:
				{
				alt88 = 2;
				}
				break;
			case COLON:
				{
				alt88 = 3;
				}
				break;
			case OPEN:
				{
				alt88 = 4;
				}
				break;
			case PARAM:
				{
				alt88 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:565:6: identPrimary ( options {greedy=true; } : DOT ^ 'class' )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(565, 6);
				PushFollow(Follow._identPrimary_in_primaryExpression2865);
				identPrimary245=identPrimary();
				PopFollow();

				adaptor.AddChild(root_0, identPrimary245.Tree);
				DebugLocation(565, 19);
				// Hql.g:565:19: ( options {greedy=true; } : DOT ^ 'class' )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==DOT))
				{
					int LA85_2 = input.LA(2);

					if ((LA85_2==CLASS))
					{
						alt85 = 1;
					}
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:565:46: DOT ^ 'class'
					{
					DebugLocation(565, 49);
					DOT246=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2878); 
					DOT246_tree = (IASTNode)adaptor.Create(DOT246);
					root_0 = (IASTNode)adaptor.BecomeRoot(DOT246_tree, root_0);
					DebugLocation(565, 51);
					string_literal247=(IToken)Match(input,CLASS,Follow._CLASS_in_primaryExpression2881); 
					string_literal247_tree = (IASTNode)adaptor.Create(string_literal247);
					adaptor.AddChild(root_0, string_literal247_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(85); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:566:6: constant
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(566, 6);
				PushFollow(Follow._constant_in_primaryExpression2891);
				constant248=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant248.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:567:6: COLON ^ identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(567, 11);
				COLON249=(IToken)Match(input,COLON,Follow._COLON_in_primaryExpression2898); 
				COLON249_tree = (IASTNode)adaptor.Create(COLON249);
				root_0 = (IASTNode)adaptor.BecomeRoot(COLON249_tree, root_0);
				DebugLocation(567, 13);
				PushFollow(Follow._identifier_in_primaryExpression2901);
				identifier250=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier250.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Hql.g:569:6: OPEN ! ( expressionOrVector | subQuery ) CLOSE !
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(569, 10);
				OPEN251=(IToken)Match(input,OPEN,Follow._OPEN_in_primaryExpression2910); 
				DebugLocation(569, 12);
				// Hql.g:569:12: ( expressionOrVector | subQuery )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==ALL||LA86_1==ANY||LA86_1==AVG||LA86_1==BNOT||LA86_1==CASE||LA86_1==COLON||LA86_1==COUNT||LA86_1==ELEMENTS||LA86_1==EMPTY||LA86_1==EXISTS||LA86_1==FALSE||LA86_1==IDENT||LA86_1==INDICES||LA86_1==MAX||(LA86_1>=MIN && LA86_1<=MINUS)||LA86_1==NOT||(LA86_1>=NULL && LA86_1<=NUM_LONG)||LA86_1==OPEN||(LA86_1>=PARAM && LA86_1<=PLUS)||LA86_1==QUOTED_String||LA86_1==SOME||LA86_1==SUM||LA86_1==TRUE))
				{
					alt86 = 1;
				}
				else if ((LA86_1==EOF||LA86_1==CLOSE||LA86_1==FROM||LA86_1==GROUP||LA86_1==HAVING||LA86_1==ORDER||LA86_1==SELECT||LA86_1==SKIP||LA86_1==TAKE||LA86_1==UNION||LA86_1==WHERE))
				{
					alt86 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:569:13: expressionOrVector
					{
					DebugLocation(569, 13);
					PushFollow(Follow._expressionOrVector_in_primaryExpression2914);
					expressionOrVector252=expressionOrVector();
					PopFollow();

					adaptor.AddChild(root_0, expressionOrVector252.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:569:34: subQuery
					{
					DebugLocation(569, 34);
					PushFollow(Follow._subQuery_in_primaryExpression2918);
					subQuery253=subQuery();
					PopFollow();

					adaptor.AddChild(root_0, subQuery253.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(569, 49);
				CLOSE254=(IToken)Match(input,CLOSE,Follow._CLOSE_in_primaryExpression2921); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Hql.g:570:6: PARAM ^ ( NUM_INT )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(570, 11);
				PARAM255=(IToken)Match(input,PARAM,Follow._PARAM_in_primaryExpression2929); 
				PARAM255_tree = (IASTNode)adaptor.Create(PARAM255);
				root_0 = (IASTNode)adaptor.BecomeRoot(PARAM255_tree, root_0);
				DebugLocation(570, 13);
				// Hql.g:570:13: ( NUM_INT )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==NUM_INT))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:570:14: NUM_INT
					{
					DebugLocation(570, 14);
					NUM_INT256=(IToken)Match(input,NUM_INT,Follow._NUM_INT_in_primaryExpression2933); 
					NUM_INT256_tree = (IASTNode)adaptor.Create(NUM_INT256);
					adaptor.AddChild(root_0, NUM_INT256_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 65);
			LeaveRule("primaryExpression", 65);
			LeaveRule_primaryExpression();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_expressionOrVector();
	partial void LeaveRule_expressionOrVector();
	// $ANTLR start "expressionOrVector"
	// Hql.g:575:1: expressionOrVector : e= expression (v= vectorExpr )? -> {v != null}? ^( VECTOR_EXPR[\"{vector}\"] $e $v) -> $e;
	[GrammarRule("expressionOrVector")]
	private AstParserRuleReturnScope<IASTNode, IToken> expressionOrVector()
	{
		EnterRule_expressionOrVector();
		EnterRule("expressionOrVector", 66);
		TraceIn("expressionOrVector", 66);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> e = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> v = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_vectorExpr=new RewriteRuleSubtreeStream(adaptor,"rule vectorExpr");
		try { DebugEnterRule(GrammarFileName, "expressionOrVector");
		DebugLocation(575, 1);
		try
		{
			// Hql.g:576:2: (e= expression (v= vectorExpr )? -> {v != null}? ^( VECTOR_EXPR[\"{vector}\"] $e $v) -> $e)
			DebugEnterAlt(1);
			// Hql.g:576:4: e= expression (v= vectorExpr )?
			{
			DebugLocation(576, 5);
			PushFollow(Follow._expression_in_expressionOrVector2951);
			e=expression();
			PopFollow();

			stream_expression.Add(e.Tree);
			DebugLocation(576, 17);
			// Hql.g:576:17: (v= vectorExpr )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_1 = input.LA(1);

			if ((LA89_1==COMMA))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:576:19: v= vectorExpr
				{
				DebugLocation(576, 20);
				PushFollow(Follow._vectorExpr_in_expressionOrVector2957);
				v=vectorExpr();
				PopFollow();

				stream_vectorExpr.Add(v.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(89); }



			{
			// AST REWRITE
			// elements: e, v, e
			// token labels: 
			// rule labels: e, v, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.Tree:null);
			RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 577:2: -> {v != null}? ^( VECTOR_EXPR[\"{vector}\"] $e $v)
			if (v != null)
			{
				DebugLocation(577, 18);
				// Hql.g:577:18: ^( VECTOR_EXPR[\"{vector}\"] $e $v)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(577, 20);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(VECTOR_EXPR, "{vector}"), root_1);

				DebugLocation(577, 45);
				adaptor.AddChild(root_1, stream_e.NextTree());
				DebugLocation(577, 48);
				adaptor.AddChild(root_1, stream_v.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 578:2: -> $e
			{
				DebugLocation(578, 6);
				adaptor.AddChild(root_0, stream_e.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionOrVector", 66);
			LeaveRule("expressionOrVector", 66);
			LeaveRule_expressionOrVector();
		}
		DebugLocation(579, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionOrVector"); }
		return retval;

	}
	// $ANTLR end "expressionOrVector"

	partial void EnterRule_vectorExpr();
	partial void LeaveRule_vectorExpr();
	// $ANTLR start "vectorExpr"
	// Hql.g:581:1: vectorExpr : COMMA ! expression ( COMMA ! expression )* ;
	[GrammarRule("vectorExpr")]
	private AstParserRuleReturnScope<IASTNode, IToken> vectorExpr()
	{
		EnterRule_vectorExpr();
		EnterRule("vectorExpr", 67);
		TraceIn("vectorExpr", 67);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken COMMA257 = default(IToken);
		IToken COMMA259 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> expression258 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression260 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode COMMA257_tree = default(IASTNode);
		IASTNode COMMA259_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "vectorExpr");
		DebugLocation(581, 1);
		try
		{
			// Hql.g:582:2: ( COMMA ! expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// Hql.g:582:4: COMMA ! expression ( COMMA ! expression )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(582, 9);
			COMMA257=(IToken)Match(input,COMMA,Follow._COMMA_in_vectorExpr2994); 
			DebugLocation(582, 11);
			PushFollow(Follow._expression_in_vectorExpr2997);
			expression258=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression258.Tree);
			DebugLocation(582, 22);
			// Hql.g:582:22: ( COMMA ! expression )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==COMMA))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:582:23: COMMA ! expression
					{
					DebugLocation(582, 28);
					COMMA259=(IToken)Match(input,COMMA,Follow._COMMA_in_vectorExpr3000); 
					DebugLocation(582, 30);
					PushFollow(Follow._expression_in_vectorExpr3003);
					expression260=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression260.Tree);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("vectorExpr", 67);
			LeaveRule("vectorExpr", 67);
			LeaveRule_vectorExpr();
		}
		DebugLocation(583, 1);
		} finally { DebugExitRule(GrammarFileName, "vectorExpr"); }
		return retval;

	}
	// $ANTLR end "vectorExpr"

	partial void EnterRule_identPrimary();
	partial void LeaveRule_identPrimary();
	// $ANTLR start "identPrimary"
	// Hql.g:588:1: identPrimary : ( identifier ( options {greedy=true; } : DOT ^ ( identifier |o= OBJECT ) )* ( (op= OPEN ^ exprList CLOSE !) )? | aggregate );
	[GrammarRule("identPrimary")]
	private AstParserRuleReturnScope<IASTNode, IToken> identPrimary()
	{
		EnterRule_identPrimary();
		EnterRule("identPrimary", 68);
		TraceIn("identPrimary", 68);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken o = default(IToken);
		IToken op = default(IToken);
		IToken DOT262 = default(IToken);
		IToken CLOSE265 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identifier261 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier263 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> exprList264 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> aggregate266 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode o_tree = default(IASTNode);
		IASTNode op_tree = default(IASTNode);
		IASTNode DOT262_tree = default(IASTNode);
		IASTNode CLOSE265_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "identPrimary");
		DebugLocation(588, 1);
		try
		{
			// Hql.g:589:2: ( identifier ( options {greedy=true; } : DOT ^ ( identifier |o= OBJECT ) )* ( (op= OPEN ^ exprList CLOSE !) )? | aggregate )
			int alt94=2;
			try { DebugEnterDecision(94, false);
			int LA94_1 = input.LA(1);

			if ((LA94_1==IDENT))
			{
				alt94 = 1;
			}
			else if ((LA94_1==AVG||LA94_1==COUNT||LA94_1==ELEMENTS||LA94_1==INDICES||LA94_1==MAX||LA94_1==MIN||LA94_1==SUM))
			{
				alt94 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 94, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:589:4: identifier ( options {greedy=true; } : DOT ^ ( identifier |o= OBJECT ) )* ( (op= OPEN ^ exprList CLOSE !) )?
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(589, 4);
				PushFollow(Follow._identifier_in_identPrimary3019);
				identifier261=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier261.Tree);
				DebugLocation(589, 15);
				 HandleDotIdent(); 
				DebugLocation(590, 4);
				// Hql.g:590:4: ( options {greedy=true; } : DOT ^ ( identifier |o= OBJECT ) )*
				try { DebugEnterSubRule(92);
				while (true)
				{
					int alt92=2;
					try { DebugEnterDecision(92, false);
					int LA92_1 = input.LA(1);

					if ((LA92_1==DOT))
					{
						int LA92_2 = input.LA(2);

						if ((LA92_2==IDENT||LA92_2==OBJECT))
						{
							alt92 = 1;
						}


					}


					} finally { DebugExitDecision(92); }
					switch ( alt92 )
					{
					case 1:
						DebugEnterAlt(1);
						// Hql.g:590:31: DOT ^ ( identifier |o= OBJECT )
						{
						DebugLocation(590, 34);
						DOT262=(IToken)Match(input,DOT,Follow._DOT_in_identPrimary3037); 
						DOT262_tree = (IASTNode)adaptor.Create(DOT262);
						root_0 = (IASTNode)adaptor.BecomeRoot(DOT262_tree, root_0);
						DebugLocation(590, 36);
						// Hql.g:590:36: ( identifier |o= OBJECT )
						int alt91=2;
						try { DebugEnterSubRule(91);
						try { DebugEnterDecision(91, false);
						int LA91_1 = input.LA(1);

						if ((LA91_1==IDENT))
						{
							alt91 = 1;
						}
						else if ((LA91_1==OBJECT))
						{
							alt91 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// Hql.g:590:38: identifier
							{
							DebugLocation(590, 38);
							PushFollow(Follow._identifier_in_identPrimary3042);
							identifier263=identifier();
							PopFollow();

							adaptor.AddChild(root_0, identifier263.Tree);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Hql.g:590:51: o= OBJECT
							{
							DebugLocation(590, 52);
							o=(IToken)Match(input,OBJECT,Follow._OBJECT_in_identPrimary3048); 
							o_tree = (IASTNode)adaptor.Create(o);
							adaptor.AddChild(root_0, o_tree);
							DebugLocation(590, 60);
							 o.Type = IDENT; 

							}
							break;

						}
						} finally { DebugExitSubRule(91); }


						}
						break;

					default:
						goto loop92;
					}
				}

				loop92:
					;

				} finally { DebugExitSubRule(92); }

				DebugLocation(591, 4);
				// Hql.g:591:4: ( (op= OPEN ^ exprList CLOSE !) )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==OPEN))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:591:6: (op= OPEN ^ exprList CLOSE !)
					{
					DebugLocation(591, 6);
					// Hql.g:591:6: (op= OPEN ^ exprList CLOSE !)
					DebugEnterAlt(1);
					// Hql.g:591:8: op= OPEN ^ exprList CLOSE !
					{
					DebugLocation(591, 10);
					op=(IToken)Match(input,OPEN,Follow._OPEN_in_identPrimary3066); 
					op_tree = (IASTNode)adaptor.Create(op);
					root_0 = (IASTNode)adaptor.BecomeRoot(op_tree, root_0);
					DebugLocation(591, 17);
					 op.Type = METHOD_CALL;
					DebugLocation(591, 44);
					PushFollow(Follow._exprList_in_identPrimary3071);
					exprList264=exprList();
					PopFollow();

					adaptor.AddChild(root_0, exprList264.Tree);
					DebugLocation(591, 58);
					CLOSE265=(IToken)Match(input,CLOSE,Follow._CLOSE_in_identPrimary3073); 

					}


					}
					break;

				}
				} finally { DebugExitSubRule(93); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:594:4: aggregate
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(594, 4);
				PushFollow(Follow._aggregate_in_identPrimary3089);
				aggregate266=aggregate();
				PopFollow();

				adaptor.AddChild(root_0, aggregate266.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identPrimary", 68);
			LeaveRule("identPrimary", 68);
			LeaveRule_identPrimary();
		}
		DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "identPrimary"); }
		return retval;

	}
	// $ANTLR end "identPrimary"

	partial void EnterRule_aggregate();
	partial void LeaveRule_aggregate();
	// $ANTLR start "aggregate"
	// Hql.g:602:1: aggregate : ( (op= SUM |op= AVG |op= MAX |op= MIN ) OPEN additiveExpression CLOSE -> ^( AGGREGATE[$op] additiveExpression ) | COUNT OPEN (s= STAR |p= aggregateDistinctAll ) CLOSE -> {s == null}? ^( COUNT $p) -> ^( COUNT ^( ROW_STAR[\"*\"] ) ) | collectionExpr );
	[GrammarRule("aggregate")]
	private AstParserRuleReturnScope<IASTNode, IToken> aggregate()
	{
		EnterRule_aggregate();
		EnterRule("aggregate", 69);
		TraceIn("aggregate", 69);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken op = default(IToken);
		IToken s = default(IToken);
		IToken OPEN267 = default(IToken);
		IToken CLOSE269 = default(IToken);
		IToken COUNT270 = default(IToken);
		IToken OPEN271 = default(IToken);
		IToken CLOSE272 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> p = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> additiveExpression268 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> collectionExpr273 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode op_tree = default(IASTNode);
		IASTNode s_tree = default(IASTNode);
		IASTNode OPEN267_tree = default(IASTNode);
		IASTNode CLOSE269_tree = default(IASTNode);
		IASTNode COUNT270_tree = default(IASTNode);
		IASTNode OPEN271_tree = default(IASTNode);
		IASTNode CLOSE272_tree = default(IASTNode);
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_AVG=new RewriteRuleITokenStream(adaptor,"token AVG");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_OPEN=new RewriteRuleITokenStream(adaptor,"token OPEN");
		RewriteRuleITokenStream stream_CLOSE=new RewriteRuleITokenStream(adaptor,"token CLOSE");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
		RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
		RewriteRuleSubtreeStream stream_aggregateDistinctAll=new RewriteRuleSubtreeStream(adaptor,"rule aggregateDistinctAll");
		try { DebugEnterRule(GrammarFileName, "aggregate");
		DebugLocation(602, 1);
		try
		{
			// Hql.g:603:2: ( (op= SUM |op= AVG |op= MAX |op= MIN ) OPEN additiveExpression CLOSE -> ^( AGGREGATE[$op] additiveExpression ) | COUNT OPEN (s= STAR |p= aggregateDistinctAll ) CLOSE -> {s == null}? ^( COUNT $p) -> ^( COUNT ^( ROW_STAR[\"*\"] ) ) | collectionExpr )
			int alt97=3;
			try { DebugEnterDecision(97, false);
			switch (input.LA(1))
			{
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				{
				alt97 = 1;
				}
				break;
			case COUNT:
				{
				alt97 = 2;
				}
				break;
			case ELEMENTS:
			case INDICES:
				{
				alt97 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:603:4: (op= SUM |op= AVG |op= MAX |op= MIN ) OPEN additiveExpression CLOSE
				{
				DebugLocation(603, 4);
				// Hql.g:603:4: (op= SUM |op= AVG |op= MAX |op= MIN )
				int alt95=4;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				switch (input.LA(1))
				{
				case SUM:
					{
					alt95 = 1;
					}
					break;
				case AVG:
					{
					alt95 = 2;
					}
					break;
				case MAX:
					{
					alt95 = 3;
					}
					break;
				case MIN:
					{
					alt95 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 95, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:603:6: op= SUM
					{
					DebugLocation(603, 8);
					op=(IToken)Match(input,SUM,Follow._SUM_in_aggregate3110);  
					stream_SUM.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:603:15: op= AVG
					{
					DebugLocation(603, 17);
					op=(IToken)Match(input,AVG,Follow._AVG_in_aggregate3116);  
					stream_AVG.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:603:24: op= MAX
					{
					DebugLocation(603, 26);
					op=(IToken)Match(input,MAX,Follow._MAX_in_aggregate3122);  
					stream_MAX.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Hql.g:603:33: op= MIN
					{
					DebugLocation(603, 35);
					op=(IToken)Match(input,MIN,Follow._MIN_in_aggregate3128);  
					stream_MIN.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(603, 42);
				OPEN267=(IToken)Match(input,OPEN,Follow._OPEN_in_aggregate3132);  
				stream_OPEN.Add(OPEN267);

				DebugLocation(603, 47);
				PushFollow(Follow._additiveExpression_in_aggregate3134);
				additiveExpression268=additiveExpression();
				PopFollow();

				stream_additiveExpression.Add(additiveExpression268.Tree);
				DebugLocation(603, 66);
				CLOSE269=(IToken)Match(input,CLOSE,Follow._CLOSE_in_aggregate3136);  
				stream_CLOSE.Add(CLOSE269);



				{
				// AST REWRITE
				// elements: additiveExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 604:3: -> ^( AGGREGATE[$op] additiveExpression )
				{
					DebugLocation(604, 6);
					// Hql.g:604:6: ^( AGGREGATE[$op] additiveExpression )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(604, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(AGGREGATE, op), root_1);

					DebugLocation(604, 23);
					adaptor.AddChild(root_1, stream_additiveExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:606:5: COUNT OPEN (s= STAR |p= aggregateDistinctAll ) CLOSE
				{
				DebugLocation(606, 5);
				COUNT270=(IToken)Match(input,COUNT,Follow._COUNT_in_aggregate3155);  
				stream_COUNT.Add(COUNT270);

				DebugLocation(606, 11);
				OPEN271=(IToken)Match(input,OPEN,Follow._OPEN_in_aggregate3157);  
				stream_OPEN.Add(OPEN271);

				DebugLocation(606, 16);
				// Hql.g:606:16: (s= STAR |p= aggregateDistinctAll )
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==STAR))
				{
					alt96 = 1;
				}
				else if ((LA96_1==ALL||LA96_1==DISTINCT||LA96_1==ELEMENTS||LA96_1==IDENT||LA96_1==INDICES))
				{
					alt96 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:606:18: s= STAR
					{
					DebugLocation(606, 19);
					s=(IToken)Match(input,STAR,Follow._STAR_in_aggregate3163);  
					stream_STAR.Add(s);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:606:27: p= aggregateDistinctAll
					{
					DebugLocation(606, 28);
					PushFollow(Follow._aggregateDistinctAll_in_aggregate3169);
					p=aggregateDistinctAll();
					PopFollow();

					stream_aggregateDistinctAll.Add(p.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(606, 52);
				CLOSE272=(IToken)Match(input,CLOSE,Follow._CLOSE_in_aggregate3173);  
				stream_CLOSE.Add(CLOSE272);



				{
				// AST REWRITE
				// elements: COUNT, p, COUNT
				// token labels: 
				// rule labels: p, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 607:3: -> {s == null}? ^( COUNT $p)
				if (s == null)
				{
					DebugLocation(607, 19);
					// Hql.g:607:19: ^( COUNT $p)
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(607, 21);
					root_1 = (IASTNode)adaptor.BecomeRoot(stream_COUNT.NextNode(), root_1);

					DebugLocation(607, 28);
					adaptor.AddChild(root_1, stream_p.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 608:3: -> ^( COUNT ^( ROW_STAR[\"*\"] ) )
				{
					DebugLocation(608, 6);
					// Hql.g:608:6: ^( COUNT ^( ROW_STAR[\"*\"] ) )
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(608, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(stream_COUNT.NextNode(), root_1);

					DebugLocation(608, 14);
					// Hql.g:608:14: ^( ROW_STAR[\"*\"] )
					{
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(608, 16);
					root_2 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(ROW_STAR, "*"), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:609:5: collectionExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(609, 5);
				PushFollow(Follow._collectionExpr_in_aggregate3205);
				collectionExpr273=collectionExpr();
				PopFollow();

				adaptor.AddChild(root_0, collectionExpr273.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregate", 69);
			LeaveRule("aggregate", 69);
			LeaveRule_aggregate();
		}
		DebugLocation(610, 1);
		} finally { DebugExitRule(GrammarFileName, "aggregate"); }
		return retval;

	}
	// $ANTLR end "aggregate"

	partial void EnterRule_aggregateDistinctAll();
	partial void LeaveRule_aggregateDistinctAll();
	// $ANTLR start "aggregateDistinctAll"
	// Hql.g:612:1: aggregateDistinctAll : ( ( DISTINCT | ALL )? ( path | collectionExpr ) ) ;
	[GrammarRule("aggregateDistinctAll")]
	private AstParserRuleReturnScope<IASTNode, IToken> aggregateDistinctAll()
	{
		EnterRule_aggregateDistinctAll();
		EnterRule("aggregateDistinctAll", 70);
		TraceIn("aggregateDistinctAll", 70);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken set274 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path275 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> collectionExpr276 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode set274_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "aggregateDistinctAll");
		DebugLocation(612, 1);
		try
		{
			// Hql.g:613:2: ( ( ( DISTINCT | ALL )? ( path | collectionExpr ) ) )
			DebugEnterAlt(1);
			// Hql.g:613:4: ( ( DISTINCT | ALL )? ( path | collectionExpr ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(613, 4);
			// Hql.g:613:4: ( ( DISTINCT | ALL )? ( path | collectionExpr ) )
			DebugEnterAlt(1);
			// Hql.g:613:6: ( DISTINCT | ALL )? ( path | collectionExpr )
			{
			DebugLocation(613, 6);
			// Hql.g:613:6: ( DISTINCT | ALL )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_1 = input.LA(1);

			if ((LA98_1==ALL||LA98_1==DISTINCT))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:
				{
				DebugLocation(613, 6);

				set274=(IToken)input.LT(1);
				if (input.LA(1)==ALL||input.LA(1)==DISTINCT)
				{
					input.Consume();
					adaptor.AddChild(root_0, (IASTNode)adaptor.Create(set274));
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(613, 26);
			// Hql.g:613:26: ( path | collectionExpr )
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_1 = input.LA(1);

			if ((LA99_1==IDENT))
			{
				alt99 = 1;
			}
			else if ((LA99_1==ELEMENTS||LA99_1==INDICES))
			{
				alt99 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:613:28: path
				{
				DebugLocation(613, 28);
				PushFollow(Follow._path_in_aggregateDistinctAll3231);
				path275=path();
				PopFollow();

				adaptor.AddChild(root_0, path275.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:613:35: collectionExpr
				{
				DebugLocation(613, 35);
				PushFollow(Follow._collectionExpr_in_aggregateDistinctAll3235);
				collectionExpr276=collectionExpr();
				PopFollow();

				adaptor.AddChild(root_0, collectionExpr276.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(99); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregateDistinctAll", 70);
			LeaveRule("aggregateDistinctAll", 70);
			LeaveRule_aggregateDistinctAll();
		}
		DebugLocation(614, 1);
		} finally { DebugExitRule(GrammarFileName, "aggregateDistinctAll"); }
		return retval;

	}
	// $ANTLR end "aggregateDistinctAll"

	partial void EnterRule_collectionExpr();
	partial void LeaveRule_collectionExpr();
	// $ANTLR start "collectionExpr"
	// Hql.g:618:1: collectionExpr : ( ELEMENTS ^| INDICES ^) OPEN ! path CLOSE !;
	[GrammarRule("collectionExpr")]
	private AstParserRuleReturnScope<IASTNode, IToken> collectionExpr()
	{
		EnterRule_collectionExpr();
		EnterRule("collectionExpr", 71);
		TraceIn("collectionExpr", 71);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken ELEMENTS277 = default(IToken);
		IToken INDICES278 = default(IToken);
		IToken OPEN279 = default(IToken);
		IToken CLOSE281 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> path280 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode ELEMENTS277_tree = default(IASTNode);
		IASTNode INDICES278_tree = default(IASTNode);
		IASTNode OPEN279_tree = default(IASTNode);
		IASTNode CLOSE281_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "collectionExpr");
		DebugLocation(618, 1);
		try
		{
			// Hql.g:619:2: ( ( ELEMENTS ^| INDICES ^) OPEN ! path CLOSE !)
			DebugEnterAlt(1);
			// Hql.g:619:4: ( ELEMENTS ^| INDICES ^) OPEN ! path CLOSE !
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(619, 4);
			// Hql.g:619:4: ( ELEMENTS ^| INDICES ^)
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==ELEMENTS))
			{
				alt100 = 1;
			}
			else if ((LA100_1==INDICES))
			{
				alt100 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:619:5: ELEMENTS ^
				{
				DebugLocation(619, 13);
				ELEMENTS277=(IToken)Match(input,ELEMENTS,Follow._ELEMENTS_in_collectionExpr3254); 
				ELEMENTS277_tree = (IASTNode)adaptor.Create(ELEMENTS277);
				root_0 = (IASTNode)adaptor.BecomeRoot(ELEMENTS277_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:619:17: INDICES ^
				{
				DebugLocation(619, 24);
				INDICES278=(IToken)Match(input,INDICES,Follow._INDICES_in_collectionExpr3259); 
				INDICES278_tree = (IASTNode)adaptor.Create(INDICES278);
				root_0 = (IASTNode)adaptor.BecomeRoot(INDICES278_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(100); }

			DebugLocation(619, 31);
			OPEN279=(IToken)Match(input,OPEN,Follow._OPEN_in_collectionExpr3263); 
			DebugLocation(619, 33);
			PushFollow(Follow._path_in_collectionExpr3266);
			path280=path();
			PopFollow();

			adaptor.AddChild(root_0, path280.Tree);
			DebugLocation(619, 43);
			CLOSE281=(IToken)Match(input,CLOSE,Follow._CLOSE_in_collectionExpr3268); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionExpr", 71);
			LeaveRule("collectionExpr", 71);
			LeaveRule_collectionExpr();
		}
		DebugLocation(620, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionExpr"); }
		return retval;

	}
	// $ANTLR end "collectionExpr"

	partial void EnterRule_compoundExpr();
	partial void LeaveRule_compoundExpr();
	// $ANTLR start "compoundExpr"
	// Hql.g:622:1: compoundExpr : ( collectionExpr | path | ( OPEN ! ( subQuery | ( expression ( COMMA ! expression )* ) ) CLOSE !) );
	[GrammarRule("compoundExpr")]
	private AstParserRuleReturnScope<IASTNode, IToken> compoundExpr()
	{
		EnterRule_compoundExpr();
		EnterRule("compoundExpr", 72);
		TraceIn("compoundExpr", 72);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken OPEN284 = default(IToken);
		IToken COMMA287 = default(IToken);
		IToken CLOSE289 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> collectionExpr282 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> path283 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> subQuery285 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression286 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression288 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode OPEN284_tree = default(IASTNode);
		IASTNode COMMA287_tree = default(IASTNode);
		IASTNode CLOSE289_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "compoundExpr");
		DebugLocation(622, 1);
		try
		{
			// Hql.g:623:2: ( collectionExpr | path | ( OPEN ! ( subQuery | ( expression ( COMMA ! expression )* ) ) CLOSE !) )
			int alt103=3;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case ELEMENTS:
			case INDICES:
				{
				alt103 = 1;
				}
				break;
			case IDENT:
				{
				alt103 = 2;
				}
				break;
			case OPEN:
				{
				alt103 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:623:4: collectionExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(623, 4);
				PushFollow(Follow._collectionExpr_in_compoundExpr3323);
				collectionExpr282=collectionExpr();
				PopFollow();

				adaptor.AddChild(root_0, collectionExpr282.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:624:4: path
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(624, 4);
				PushFollow(Follow._path_in_compoundExpr3328);
				path283=path();
				PopFollow();

				adaptor.AddChild(root_0, path283.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:625:4: ( OPEN ! ( subQuery | ( expression ( COMMA ! expression )* ) ) CLOSE !)
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(625, 4);
				// Hql.g:625:4: ( OPEN ! ( subQuery | ( expression ( COMMA ! expression )* ) ) CLOSE !)
				DebugEnterAlt(1);
				// Hql.g:625:5: OPEN ! ( subQuery | ( expression ( COMMA ! expression )* ) ) CLOSE !
				{
				DebugLocation(625, 9);
				OPEN284=(IToken)Match(input,OPEN,Follow._OPEN_in_compoundExpr3334); 
				DebugLocation(625, 11);
				// Hql.g:625:11: ( subQuery | ( expression ( COMMA ! expression )* ) )
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_1 = input.LA(1);

				if ((LA102_1==EOF||LA102_1==CLOSE||LA102_1==FROM||LA102_1==GROUP||LA102_1==HAVING||LA102_1==ORDER||LA102_1==SELECT||LA102_1==SKIP||LA102_1==TAKE||LA102_1==UNION||LA102_1==WHERE))
				{
					alt102 = 1;
				}
				else if ((LA102_1==ALL||LA102_1==ANY||LA102_1==AVG||LA102_1==BNOT||LA102_1==CASE||LA102_1==COLON||LA102_1==COUNT||LA102_1==ELEMENTS||LA102_1==EMPTY||LA102_1==EXISTS||LA102_1==FALSE||LA102_1==IDENT||LA102_1==INDICES||LA102_1==MAX||(LA102_1>=MIN && LA102_1<=MINUS)||LA102_1==NOT||(LA102_1>=NULL && LA102_1<=NUM_LONG)||LA102_1==OPEN||(LA102_1>=PARAM && LA102_1<=PLUS)||LA102_1==QUOTED_String||LA102_1==SOME||LA102_1==SUM||LA102_1==TRUE))
				{
					alt102 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:625:13: subQuery
					{
					DebugLocation(625, 13);
					PushFollow(Follow._subQuery_in_compoundExpr3339);
					subQuery285=subQuery();
					PopFollow();

					adaptor.AddChild(root_0, subQuery285.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:625:24: ( expression ( COMMA ! expression )* )
					{
					DebugLocation(625, 24);
					// Hql.g:625:24: ( expression ( COMMA ! expression )* )
					DebugEnterAlt(1);
					// Hql.g:625:25: expression ( COMMA ! expression )*
					{
					DebugLocation(625, 25);
					PushFollow(Follow._expression_in_compoundExpr3344);
					expression286=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression286.Tree);
					DebugLocation(625, 36);
					// Hql.g:625:36: ( COMMA ! expression )*
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_1 = input.LA(1);

						if ((LA101_1==COMMA))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch ( alt101 )
						{
						case 1:
							DebugEnterAlt(1);
							// Hql.g:625:37: COMMA ! expression
							{
							DebugLocation(625, 42);
							COMMA287=(IToken)Match(input,COMMA,Follow._COMMA_in_compoundExpr3347); 
							DebugLocation(625, 44);
							PushFollow(Follow._expression_in_compoundExpr3350);
							expression288=expression();
							PopFollow();

							adaptor.AddChild(root_0, expression288.Tree);

							}
							break;

						default:
							goto loop101;
						}
					}

					loop101:
						;

					} finally { DebugExitSubRule(101); }


					}


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(625, 65);
				CLOSE289=(IToken)Match(input,CLOSE,Follow._CLOSE_in_compoundExpr3357); 

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compoundExpr", 72);
			LeaveRule("compoundExpr", 72);
			LeaveRule_compoundExpr();
		}
		DebugLocation(626, 1);
		} finally { DebugExitRule(GrammarFileName, "compoundExpr"); }
		return retval;

	}
	// $ANTLR end "compoundExpr"

	partial void EnterRule_exprList();
	partial void LeaveRule_exprList();
	// $ANTLR start "exprList"
	// Hql.g:628:1: exprList : ( TRAILING | LEADING | BOTH )? ( expression ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )? |f2= FROM expression )? ;
	[GrammarRule("exprList")]
	private AstParserRuleReturnScope<IASTNode, IToken> exprList()
	{
		EnterRule_exprList();
		EnterRule("exprList", 73);
		TraceIn("exprList", 73);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken f = default(IToken);
		IToken f2 = default(IToken);
		IToken TRAILING290 = default(IToken);
		IToken LEADING291 = default(IToken);
		IToken BOTH292 = default(IToken);
		IToken COMMA294 = default(IToken);
		IToken AS297 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> expression293 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression295 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression296 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier298 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> expression299 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode f_tree = default(IASTNode);
		IASTNode f2_tree = default(IASTNode);
		IASTNode TRAILING290_tree = default(IASTNode);
		IASTNode LEADING291_tree = default(IASTNode);
		IASTNode BOTH292_tree = default(IASTNode);
		IASTNode COMMA294_tree = default(IASTNode);
		IASTNode AS297_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "exprList");
		DebugLocation(628, 1);
		try
		{
			// Hql.g:634:2: ( ( TRAILING | LEADING | BOTH )? ( expression ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )? |f2= FROM expression )? )
			DebugEnterAlt(1);
			// Hql.g:634:4: ( TRAILING | LEADING | BOTH )? ( expression ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )? |f2= FROM expression )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(634, 4);
			// Hql.g:634:4: ( TRAILING | LEADING | BOTH )?
			int alt104=4;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			switch (input.LA(1))
			{
			case TRAILING:
				{
				alt104 = 1;
				}
				break;
			case LEADING:
				{
				alt104 = 2;
				}
				break;
			case BOTH:
				{
				alt104 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:634:5: TRAILING
				{
				DebugLocation(634, 5);
				TRAILING290=(IToken)Match(input,TRAILING,Follow._TRAILING_in_exprList3376); 
				TRAILING290_tree = (IASTNode)adaptor.Create(TRAILING290);
				adaptor.AddChild(root_0, TRAILING290_tree);
				DebugLocation(634, 14);
				TRAILING290.Type = IDENT;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:635:10: LEADING
				{
				DebugLocation(635, 10);
				LEADING291=(IToken)Match(input,LEADING,Follow._LEADING_in_exprList3389); 
				LEADING291_tree = (IASTNode)adaptor.Create(LEADING291);
				adaptor.AddChild(root_0, LEADING291_tree);
				DebugLocation(635, 18);
				LEADING291.Type = IDENT;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Hql.g:636:10: BOTH
				{
				DebugLocation(636, 10);
				BOTH292=(IToken)Match(input,BOTH,Follow._BOTH_in_exprList3402); 
				BOTH292_tree = (IASTNode)adaptor.Create(BOTH292);
				adaptor.AddChild(root_0, BOTH292_tree);
				DebugLocation(636, 15);
				BOTH292.Type = IDENT;

				}
				break;

			}
			} finally { DebugExitSubRule(104); }

			DebugLocation(638, 4);
			// Hql.g:638:4: ( expression ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )? |f2= FROM expression )?
			int alt107=3;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_1 = input.LA(1);

			if ((LA107_1==ALL||LA107_1==ANY||LA107_1==AVG||LA107_1==BNOT||LA107_1==CASE||LA107_1==COLON||LA107_1==COUNT||LA107_1==ELEMENTS||LA107_1==EMPTY||LA107_1==EXISTS||LA107_1==FALSE||LA107_1==IDENT||LA107_1==INDICES||LA107_1==MAX||(LA107_1>=MIN && LA107_1<=MINUS)||LA107_1==NOT||(LA107_1>=NULL && LA107_1<=NUM_LONG)||LA107_1==OPEN||(LA107_1>=PARAM && LA107_1<=PLUS)||LA107_1==QUOTED_String||LA107_1==SOME||LA107_1==SUM||LA107_1==TRUE))
			{
				alt107 = 1;
			}
			else if ((LA107_1==FROM))
			{
				alt107 = 2;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// Hql.g:639:5: expression ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )?
				{
				DebugLocation(639, 5);
				PushFollow(Follow._expression_in_exprList3426);
				expression293=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression293.Tree);
				DebugLocation(639, 16);
				// Hql.g:639:16: ( ( COMMA ! expression )+ |f= FROM expression | AS ! identifier )?
				int alt106=4;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				switch (input.LA(1))
				{
				case COMMA:
					{
					alt106 = 1;
					}
					break;
				case FROM:
					{
					alt106 = 2;
					}
					break;
				case AS:
					{
					alt106 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:639:18: ( COMMA ! expression )+
					{
					DebugLocation(639, 18);
					// Hql.g:639:18: ( COMMA ! expression )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_1 = input.LA(1);

						if ((LA105_1==COMMA))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// Hql.g:639:19: COMMA ! expression
							{
							DebugLocation(639, 24);
							COMMA294=(IToken)Match(input,COMMA,Follow._COMMA_in_exprList3431); 
							DebugLocation(639, 26);
							PushFollow(Follow._expression_in_exprList3434);
							expression295=expression();
							PopFollow();

							adaptor.AddChild(root_0, expression295.Tree);

							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Hql.g:640:9: f= FROM expression
					{
					DebugLocation(640, 10);
					f=(IToken)Match(input,FROM,Follow._FROM_in_exprList3449); 
					f_tree = (IASTNode)adaptor.Create(f);
					adaptor.AddChild(root_0, f_tree);
					DebugLocation(640, 16);
					PushFollow(Follow._expression_in_exprList3451);
					expression296=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression296.Tree);
					DebugLocation(640, 27);
					f.Type = IDENT;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Hql.g:641:9: AS ! identifier
					{
					DebugLocation(641, 11);
					AS297=(IToken)Match(input,AS,Follow._AS_in_exprList3463); 
					DebugLocation(641, 13);
					PushFollow(Follow._identifier_in_exprList3466);
					identifier298=identifier();
					PopFollow();

					adaptor.AddChild(root_0, identifier298.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(106); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Hql.g:642:7: f2= FROM expression
				{
				DebugLocation(642, 9);
				f2=(IToken)Match(input,FROM,Follow._FROM_in_exprList3480); 
				f2_tree = (IASTNode)adaptor.Create(f2);
				adaptor.AddChild(root_0, f2_tree);
				DebugLocation(642, 15);
				PushFollow(Follow._expression_in_exprList3482);
				expression299=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression299.Tree);
				DebugLocation(642, 26);
				f2.Type = IDENT;

				}
				break;

			}
			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			   IASTNode root = (IASTNode) adaptor.Create(EXPR_LIST, "exprList");
			   root.AddChild((IASTNode)retval.Tree);
			   retval.Tree = root;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprList", 73);
			LeaveRule("exprList", 73);
			LeaveRule_exprList();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "exprList"); }
		return retval;

	}
	// $ANTLR end "exprList"

	partial void EnterRule_subQuery();
	partial void LeaveRule_subQuery();
	// $ANTLR start "subQuery"
	// Hql.g:646:1: subQuery : innerSubQuery ( UNION ^ innerSubQuery )* ;
	[GrammarRule("subQuery")]
	private AstParserRuleReturnScope<IASTNode, IToken> subQuery()
	{
		EnterRule_subQuery();
		EnterRule("subQuery", 74);
		TraceIn("subQuery", 74);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken UNION301 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> innerSubQuery300 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> innerSubQuery302 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode UNION301_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "subQuery");
		DebugLocation(646, 1);
		try
		{
			// Hql.g:647:2: ( innerSubQuery ( UNION ^ innerSubQuery )* )
			DebugEnterAlt(1);
			// Hql.g:647:4: innerSubQuery ( UNION ^ innerSubQuery )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(647, 4);
			PushFollow(Follow._innerSubQuery_in_subQuery3502);
			innerSubQuery300=innerSubQuery();
			PopFollow();

			adaptor.AddChild(root_0, innerSubQuery300.Tree);
			DebugLocation(647, 18);
			// Hql.g:647:18: ( UNION ^ innerSubQuery )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==UNION))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:647:19: UNION ^ innerSubQuery
					{
					DebugLocation(647, 24);
					UNION301=(IToken)Match(input,UNION,Follow._UNION_in_subQuery3505); 
					UNION301_tree = (IASTNode)adaptor.Create(UNION301);
					root_0 = (IASTNode)adaptor.BecomeRoot(UNION301_tree, root_0);
					DebugLocation(647, 26);
					PushFollow(Follow._innerSubQuery_in_subQuery3508);
					innerSubQuery302=innerSubQuery();
					PopFollow();

					adaptor.AddChild(root_0, innerSubQuery302.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subQuery", 74);
			LeaveRule("subQuery", 74);
			LeaveRule_subQuery();
		}
		DebugLocation(648, 1);
		} finally { DebugExitRule(GrammarFileName, "subQuery"); }
		return retval;

	}
	// $ANTLR end "subQuery"

	partial void EnterRule_innerSubQuery();
	partial void LeaveRule_innerSubQuery();
	// $ANTLR start "innerSubQuery"
	// Hql.g:650:1: innerSubQuery : queryRule -> ^( QUERY[\"query\"] queryRule ) ;
	[GrammarRule("innerSubQuery")]
	private AstParserRuleReturnScope<IASTNode, IToken> innerSubQuery()
	{
		EnterRule_innerSubQuery();
		EnterRule("innerSubQuery", 75);
		TraceIn("innerSubQuery", 75);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		AstParserRuleReturnScope<IASTNode, IToken> queryRule303 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		RewriteRuleSubtreeStream stream_queryRule=new RewriteRuleSubtreeStream(adaptor,"rule queryRule");
		try { DebugEnterRule(GrammarFileName, "innerSubQuery");
		DebugLocation(650, 1);
		try
		{
			// Hql.g:651:2: ( queryRule -> ^( QUERY[\"query\"] queryRule ) )
			DebugEnterAlt(1);
			// Hql.g:651:4: queryRule
			{
			DebugLocation(651, 4);
			PushFollow(Follow._queryRule_in_innerSubQuery3522);
			queryRule303=queryRule();
			PopFollow();

			stream_queryRule.Add(queryRule303.Tree);


			{
			// AST REWRITE
			// elements: queryRule
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 652:2: -> ^( QUERY[\"query\"] queryRule )
			{
				DebugLocation(652, 5);
				// Hql.g:652:5: ^( QUERY[\"query\"] queryRule )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(652, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(QUERY, "query"), root_1);

				DebugLocation(652, 22);
				adaptor.AddChild(root_1, stream_queryRule.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerSubQuery", 75);
			LeaveRule("innerSubQuery", 75);
			LeaveRule_innerSubQuery();
		}
		DebugLocation(653, 1);
		} finally { DebugExitRule(GrammarFileName, "innerSubQuery"); }
		return retval;

	}
	// $ANTLR end "innerSubQuery"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// Hql.g:655:1: constant : ( NUM_INT | NUM_FLOAT | NUM_LONG | NUM_DOUBLE | NUM_DECIMAL | QUOTED_String | NULL | TRUE | FALSE | EMPTY );
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<IASTNode, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 76);
		TraceIn("constant", 76);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken set304 = default(IToken);

		IASTNode set304_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(655, 1);
		try
		{
			// Hql.g:656:2: ( NUM_INT | NUM_FLOAT | NUM_LONG | NUM_DOUBLE | NUM_DECIMAL | QUOTED_String | NULL | TRUE | FALSE | EMPTY )
			DebugEnterAlt(1);
			// Hql.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(656, 2);

			set304=(IToken)input.LT(1);
			if (input.LA(1)==EMPTY||input.LA(1)==FALSE||(input.LA(1)>=NULL && input.LA(1)<=NUM_LONG)||input.LA(1)==QUOTED_String||input.LA(1)==TRUE)
			{
				input.Consume();
				adaptor.AddChild(root_0, (IASTNode)adaptor.Create(set304));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 76);
			LeaveRule("constant", 76);
			LeaveRule_constant();
		}
		DebugLocation(666, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_path();
	partial void LeaveRule_path();
	// $ANTLR start "path"
	// Hql.g:674:1: path : identifier ( DOT ^ identifier )* ;
	[GrammarRule("path")]
	private AstParserRuleReturnScope<IASTNode, IToken> path()
	{
		EnterRule_path();
		EnterRule("path", 77);
		TraceIn("path", 77);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken DOT306 = default(IToken);
		AstParserRuleReturnScope<IASTNode, IToken> identifier305 = default(AstParserRuleReturnScope<IASTNode, IToken>);
		AstParserRuleReturnScope<IASTNode, IToken> identifier307 = default(AstParserRuleReturnScope<IASTNode, IToken>);

		IASTNode DOT306_tree = default(IASTNode);

		// TODO - need to clean up DotIdent - suspect that DotIdent2 supersedes the other one, but need to do the analysis
		//HandleDotIdent2();

		try { DebugEnterRule(GrammarFileName, "path");
		DebugLocation(674, 1);
		try
		{
			// Hql.g:679:2: ( identifier ( DOT ^ identifier )* )
			DebugEnterAlt(1);
			// Hql.g:679:4: identifier ( DOT ^ identifier )*
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(679, 4);
			PushFollow(Follow._identifier_in_path3610);
			identifier305=identifier();
			PopFollow();

			adaptor.AddChild(root_0, identifier305.Tree);
			DebugLocation(679, 15);
			// Hql.g:679:15: ( DOT ^ identifier )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_1 = input.LA(1);

				if ((LA109_1==DOT))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// Hql.g:679:17: DOT ^ identifier
					{
					DebugLocation(679, 20);
					DOT306=(IToken)Match(input,DOT,Follow._DOT_in_path3614); 
					DOT306_tree = (IASTNode)adaptor.Create(DOT306);
					root_0 = (IASTNode)adaptor.BecomeRoot(DOT306_tree, root_0);
					DebugLocation(679, 22);
					 WeakKeywords(); 
					DebugLocation(679, 42);
					PushFollow(Follow._identifier_in_path3619);
					identifier307=identifier();
					PopFollow();

					adaptor.AddChild(root_0, identifier307.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (IASTNode)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("path", 77);
			LeaveRule("path", 77);
			LeaveRule_path();
		}
		DebugLocation(680, 1);
		} finally { DebugExitRule(GrammarFileName, "path"); }
		return retval;

	}
	// $ANTLR end "path"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// Hql.g:684:1: identifier : IDENT ;
	[GrammarRule("identifier")]
	private AstParserRuleReturnScope<IASTNode, IToken> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 78);
		TraceIn("identifier", 78);
		AstParserRuleReturnScope<IASTNode, IToken> retval = new AstParserRuleReturnScope<IASTNode, IToken>();
		retval.Start = (IToken)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IToken IDENT308 = default(IToken);

		IASTNode IDENT308_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(684, 1);
		try
		{
			// Hql.g:685:2: ( IDENT )
			DebugEnterAlt(1);
			// Hql.g:685:4: IDENT
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(685, 4);
			IDENT308=(IToken)Match(input,IDENT,Follow._IDENT_in_identifier3635); 
			IDENT308_tree = (IASTNode)adaptor.Create(IDENT308);
			adaptor.AddChild(root_0, IDENT308_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException ex)
		{

					retval.Tree = HandleIdentifierError(input.LT(1),ex);
				
		}

		finally
		{
			TraceOut("identifier", 78);
			LeaveRule("identifier", 78);
			LeaveRule_identifier();
		}
		DebugLocation(686, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _updateStatement_in_statement620 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _deleteStatement_in_statement624 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _insertStatement_in_statement628 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _selectStatement_in_statement637 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_statement642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatement654 = new BitSet(new ulong[]{0x81000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _VERSIONED_in_updateStatement658 = new BitSet(new ulong[]{0x81000000000000UL});
		public static readonly BitSet _optionalFromTokenFromClause_in_updateStatement664 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _setClause_in_updateStatement668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_updateStatement673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setClause687 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _assignment_in_setClause690 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_setClause693 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _assignment_in_setClause696 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _stateField_in_assignment710 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignment712 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _newValue_in_assignment715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _path_in_stateField728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _concatenation_in_newValue741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_deleteStatement752 = new BitSet(new ulong[]{0x81000000000000UL});
		public static readonly BitSet _optionalFromTokenFromClause_in_deleteStatement758 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_deleteStatement764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _optionalFromTokenFromClause2_in_optionalFromTokenFromClause779 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_optionalFromTokenFromClause781 = new BitSet(new ulong[]{0x80000000000202UL});
		public static readonly BitSet _asAlias_in_optionalFromTokenFromClause784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_optionalFromTokenFromClause2815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _queryRule_in_selectStatement829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_in_insertStatement858 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _intoClause_in_insertStatement861 = new BitSet(new ulong[]{0x29000000000000UL,0x42400800000000UL,0x4UL});
		public static readonly BitSet _selectStatement_in_insertStatement863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_intoClause874 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_intoClause877 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _insertablePropertySpec_in_intoClause881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_insertablePropertySpec892 = new BitSet(new ulong[]{0x1080101410800800UL,0x22004411F809000UL});
		public static readonly BitSet _primaryExpression_in_insertablePropertySpec894 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _COMMA_in_insertablePropertySpec898 = new BitSet(new ulong[]{0x1080101410800800UL,0x22004411F809000UL});
		public static readonly BitSet _primaryExpression_in_insertablePropertySpec900 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _CLOSE_in_insertablePropertySpec905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectFrom_in_queryRule943 = new BitSet(new ulong[]{0x28000000000002UL,0x42000800000000UL,0x4UL});
		public static readonly BitSet _whereClause_in_queryRule948 = new BitSet(new ulong[]{0x28000000000002UL,0x42000800000000UL});
		public static readonly BitSet _groupByClause_in_queryRule955 = new BitSet(new ulong[]{0x20000000000002UL,0x42000800000000UL});
		public static readonly BitSet _havingClause_in_queryRule962 = new BitSet(new ulong[]{0x2UL,0x42000800000000UL});
		public static readonly BitSet _orderByClause_in_queryRule969 = new BitSet(new ulong[]{0x2UL,0x42000000000000UL});
		public static readonly BitSet _skipClause_in_queryRule976 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _takeClause_in_queryRule983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectClause_in_selectFrom1001 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _fromClause_in_selectFrom1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectClause1057 = new BitSet(new ulong[]{0x1080121490844940UL,0x22404C13F8D9000UL});
		public static readonly BitSet _DISTINCT_in_selectClause1069 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C13F8D9000UL});
		public static readonly BitSet _selectedPropertiesList_in_selectClause1075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_selectClause1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectObject_in_selectClause1083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression1097 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_newExpression1099 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_newExpression1104 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _selectedPropertiesList_in_newExpression1106 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_newExpression1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OBJECT_in_selectObject1134 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_selectObject1137 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_selectObject1140 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_selectObject1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromClause1160 = new BitSet(new ulong[]{0x480000400000000UL});
		public static readonly BitSet _fromRange_in_fromClause1165 = new BitSet(new ulong[]{0x2002000001000002UL,0x100000000120UL});
		public static readonly BitSet _fromJoin_in_fromClause1169 = new BitSet(new ulong[]{0x2002000001000002UL,0x100000000120UL});
		public static readonly BitSet _COMMA_in_fromClause1173 = new BitSet(new ulong[]{0x480000400000000UL});
		public static readonly BitSet _fromRange_in_fromClause1178 = new BitSet(new ulong[]{0x2002000001000002UL,0x100000000120UL});
		public static readonly BitSet _set_in_fromJoin1196 = new BitSet(new ulong[]{0x0UL,0x2000000020UL});
		public static readonly BitSet _OUTER_in_fromJoin1207 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _FULL_in_fromJoin1215 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _INNER_in_fromJoin1219 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _JOIN_in_fromJoin1224 = new BitSet(new ulong[]{0x80200000000000UL});
		public static readonly BitSet _FETCH_in_fromJoin1228 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_fromJoin1232 = new BitSet(new ulong[]{0x80200000000202UL,0x0UL,0x8UL});
		public static readonly BitSet _asAlias_in_fromJoin1235 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _propertyFetch_in_fromJoin1240 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _withClause_in_fromJoin1245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fromJoin1256 = new BitSet(new ulong[]{0x0UL,0x2000000020UL});
		public static readonly BitSet _OUTER_in_fromJoin1267 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _FULL_in_fromJoin1275 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _INNER_in_fromJoin1279 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _JOIN_in_fromJoin1284 = new BitSet(new ulong[]{0x200400000000UL});
		public static readonly BitSet _FETCH_in_fromJoin1288 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ELEMENTS_in_fromJoin1292 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_fromJoin1295 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_fromJoin1298 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_fromJoin1300 = new BitSet(new ulong[]{0x80200000000202UL,0x0UL,0x8UL});
		public static readonly BitSet _asAlias_in_fromJoin1304 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _propertyFetch_in_fromJoin1309 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _withClause_in_fromJoin1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withClause1327 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _logicalExpression_in_withClause1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fromClassOrOuterQueryPath_in_fromRange1341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inClassDeclaration_in_fromRange1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inCollectionDeclaration_in_fromRange1351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inCollectionElementsDeclaration_in_fromRange1356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _path_in_fromClassOrOuterQueryPath1368 = new BitSet(new ulong[]{0x80200000000202UL});
		public static readonly BitSet _asAlias_in_fromClassOrOuterQueryPath1373 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _propertyFetch_in_fromClassOrOuterQueryPath1378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alias_in_inClassDeclaration1408 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _IN_in_inClassDeclaration1410 = new BitSet(new ulong[]{0x80000000100000UL});
		public static readonly BitSet _CLASS_in_inClassDeclaration1412 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_inClassDeclaration1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IN_in_inCollectionDeclaration1443 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_inCollectionDeclaration1445 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_inCollectionDeclaration1447 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_inCollectionDeclaration1449 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _alias_in_inCollectionDeclaration1451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alias_in_inCollectionElementsDeclaration1485 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _IN_in_inCollectionElementsDeclaration1487 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ELEMENTS_in_inCollectionElementsDeclaration1489 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_inCollectionElementsDeclaration1491 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_inCollectionElementsDeclaration1493 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_inCollectionElementsDeclaration1495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELEMENTS_in_inCollectionElementsDeclaration1517 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_inCollectionElementsDeclaration1519 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_inCollectionElementsDeclaration1521 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_inCollectionElementsDeclaration1523 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _AS_in_inCollectionElementsDeclaration1525 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _alias_in_inCollectionElementsDeclaration1527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_asAlias1559 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _alias_in_asAlias1564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_alias1576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FETCH_in_propertyFetch1595 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ALL_in_propertyFetch1597 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _PROPERTIES_in_propertyFetch1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupByClause1612 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _LITERAL_by_in_groupByClause1618 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_groupByClause1621 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_groupByClause1625 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_groupByClause1628 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _ORDER_in_orderByClause1642 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _LITERAL_by_in_orderByClause1645 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _orderElement_in_orderByClause1648 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_orderByClause1652 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _orderElement_in_orderByClause1655 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _SKIP_in_skipClause1669 = new BitSet(new ulong[]{0x800000UL,0x4008000000UL});
		public static readonly BitSet _NUM_INT_in_skipClause1673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_skipClause1677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeClause1689 = new BitSet(new ulong[]{0x800000UL,0x4008000000UL});
		public static readonly BitSet _NUM_INT_in_takeClause1693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_takeClause1697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_parameter1709 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_parameter1712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_parameter1717 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _NUM_INT_in_parameter1721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_orderElement1734 = new BitSet(new ulong[]{0x40000402UL,0x0UL,0x60UL});
		public static readonly BitSet _ascendingOrDescending_in_orderElement1738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASCENDING_in_ascendingOrDescending1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_ascendingOrDescending1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESCENDING_in_ascendingOrDescending1782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_ascendingOrDescending1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_havingClause1809 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _logicalExpression_in_havingClause1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereClause1823 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _logicalExpression_in_whereClause1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _aliasedExpression_in_selectedPropertiesList1837 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_selectedPropertiesList1841 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _aliasedExpression_in_selectedPropertiesList1844 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _expression_in_aliasedExpression1859 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _AS_in_aliasedExpression1863 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_aliasedExpression1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_logicalExpression1905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_expression1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression1929 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _OR_in_logicalOrExpression1933 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression1936 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _negatedExpression_in_logicalAndExpression1951 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_logicalAndExpression1955 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _negatedExpression_in_logicalAndExpression1958 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _NOT_in_negatedExpression1979 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _negatedExpression_in_negatedExpression1983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _equalityExpression_in_negatedExpression1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2018 = new BitSet(new ulong[]{0x4000000002UL,0x8000000020002UL});
		public static readonly BitSet _EQ_in_equalityExpression2026 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _IS_in_equalityExpression2035 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _NOT_in_equalityExpression2041 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _NE_in_equalityExpression2053 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _SQL_NE_in_equalityExpression2062 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2073 = new BitSet(new ulong[]{0x4000000002UL,0x8000000020002UL});
		public static readonly BitSet _concatenation_in_relationalExpression2090 = new BitSet(new ulong[]{0x414000000002002UL,0x82A40UL});
		public static readonly BitSet _LT_in_relationalExpression2102 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _GT_in_relationalExpression2107 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _LE_in_relationalExpression2112 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _GE_in_relationalExpression2117 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseNotExpression_in_relationalExpression2122 = new BitSet(new ulong[]{0x14000000000002UL,0x840UL});
		public static readonly BitSet _NOT_in_relationalExpression2139 = new BitSet(new ulong[]{0x400000000002000UL,0x2200UL});
		public static readonly BitSet _IN_in_relationalExpression2160 = new BitSet(new ulong[]{0x1080000400000000UL,0x100000000UL});
		public static readonly BitSet _inList_in_relationalExpression2169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_relationalExpression2180 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _betweenList_in_relationalExpression2189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_relationalExpression2201 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _concatenation_in_relationalExpression2210 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _likeEscape_in_relationalExpression2212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEMBER_in_relationalExpression2221 = new BitSet(new ulong[]{0x80000000000000UL,0x40000000UL});
		public static readonly BitSet _OF_in_relationalExpression2225 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_relationalExpression2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ESCAPE_in_likeEscape2259 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _concatenation_in_likeEscape2262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compoundExpr_in_inList2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _concatenation_in_betweenList2296 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _AND_in_betweenList2298 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _concatenation_in_betweenList2301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseNotExpression_in_concatenation2320 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _CONCAT_in_concatenation2328 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseNotExpression_in_concatenation2337 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _CONCAT_in_concatenation2344 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseNotExpression_in_concatenation2347 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _BNOT_in_bitwiseNotExpression2371 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseOrExpression_in_bitwiseNotExpression2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseOrExpression_in_bitwiseNotExpression2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitwiseXOrExpression_in_bitwiseOrExpression2392 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _BOR_in_bitwiseOrExpression2395 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseXOrExpression_in_bitwiseOrExpression2398 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXOrExpression2412 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _BXOR_in_bitwiseXOrExpression2415 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXOrExpression2418 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _additiveExpression_in_bitwiseAndExpression2432 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BAND_in_bitwiseAndExpression2435 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _additiveExpression_in_bitwiseAndExpression2438 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _multiplyExpression_in_additiveExpression2452 = new BitSet(new ulong[]{0x2UL,0x8000010000UL});
		public static readonly BitSet _PLUS_in_additiveExpression2458 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _MINUS_in_additiveExpression2463 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _multiplyExpression_in_additiveExpression2468 = new BitSet(new ulong[]{0x2UL,0x8000010000UL});
		public static readonly BitSet _unaryExpression_in_multiplyExpression2483 = new BitSet(new ulong[]{0x100000002UL,0x10000000000000UL});
		public static readonly BitSet _STAR_in_multiplyExpression2489 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _DIV_in_multiplyExpression2494 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _unaryExpression_in_multiplyExpression2499 = new BitSet(new ulong[]{0x100000002UL,0x10000000000000UL});
		public static readonly BitSet _MINUS_in_unaryExpression2517 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression2538 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseExpression_in_unaryExpression2557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _quantifiedExpression_in_unaryExpression2562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_unaryExpression2567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpression2579 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _whenClause_in_caseExpression2582 = new BitSet(new ulong[]{0x2800000000UL,0x0UL,0x2UL});
		public static readonly BitSet _elseClause_in_caseExpression2587 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _END_in_caseExpression2591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpression2611 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _unaryExpression_in_caseExpression2613 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _altWhenClause_in_caseExpression2616 = new BitSet(new ulong[]{0x2800000000UL,0x0UL,0x2UL});
		public static readonly BitSet _elseClause_in_caseExpression2621 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _END_in_caseExpression2625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenClause2654 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _logicalExpression_in_whenClause2657 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _THEN_in_whenClause2659 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_whenClause2662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_altWhenClause2676 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _unaryExpression_in_altWhenClause2679 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _THEN_in_altWhenClause2681 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_altWhenClause2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_elseClause2698 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_elseClause2701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOME_in_quantifiedExpression2716 = new BitSet(new ulong[]{0x1080000400000000UL,0x100000000UL});
		public static readonly BitSet _EXISTS_in_quantifiedExpression2721 = new BitSet(new ulong[]{0x1080000400000000UL,0x100000000UL});
		public static readonly BitSet _ALL_in_quantifiedExpression2726 = new BitSet(new ulong[]{0x1080000400000000UL,0x100000000UL});
		public static readonly BitSet _ANY_in_quantifiedExpression2731 = new BitSet(new ulong[]{0x1080000400000000UL,0x100000000UL});
		public static readonly BitSet _identifier_in_quantifiedExpression2740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionExpr_in_quantifiedExpression2744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_quantifiedExpression2749 = new BitSet(new ulong[]{0x29000000000000UL,0x42400800000000UL,0x4UL});
		public static readonly BitSet _subQuery_in_quantifiedExpression2754 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_quantifiedExpression2758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_atom2777 = new BitSet(new ulong[]{0x200000002UL,0x200000000UL});
		public static readonly BitSet _DOT_in_atom2786 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_atom2789 = new BitSet(new ulong[]{0x200000002UL,0x300000000UL});
		public static readonly BitSet _OPEN_in_atom2817 = new BitSet(new ulong[]{0x1081121410A54940UL,0x32404C11F899080UL});
		public static readonly BitSet _exprList_in_atom2822 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_atom2824 = new BitSet(new ulong[]{0x200000002UL,0x200000000UL});
		public static readonly BitSet _OPEN_BRACKET_in_atom2838 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_atom2843 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _CLOSE_BRACKET_in_atom2845 = new BitSet(new ulong[]{0x200000002UL,0x200000000UL});
		public static readonly BitSet _identPrimary_in_primaryExpression2865 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _DOT_in_primaryExpression2878 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _CLASS_in_primaryExpression2881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primaryExpression2891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_primaryExpression2898 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_primaryExpression2901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_primaryExpression2910 = new BitSet(new ulong[]{0x10A9121410844940UL,0x26644C91F899000UL,0x4UL});
		public static readonly BitSet _expressionOrVector_in_primaryExpression2914 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _subQuery_in_primaryExpression2918 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_primaryExpression2921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PARAM_in_primaryExpression2929 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _NUM_INT_in_primaryExpression2933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionOrVector2951 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _vectorExpr_in_expressionOrVector2957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_vectorExpr2994 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_vectorExpr2997 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_vectorExpr3000 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_vectorExpr3003 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _identifier_in_identPrimary3019 = new BitSet(new ulong[]{0x200000002UL,0x100000000UL});
		public static readonly BitSet _DOT_in_identPrimary3037 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _identifier_in_identPrimary3042 = new BitSet(new ulong[]{0x200000002UL,0x100000000UL});
		public static readonly BitSet _OBJECT_in_identPrimary3048 = new BitSet(new ulong[]{0x200000002UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_identPrimary3066 = new BitSet(new ulong[]{0x1081121410A54940UL,0x32404C11F899080UL});
		public static readonly BitSet _exprList_in_identPrimary3071 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_identPrimary3073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _aggregate_in_identPrimary3089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUM_in_aggregate3110 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _AVG_in_aggregate3116 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _MAX_in_aggregate3122 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _MIN_in_aggregate3128 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_aggregate3132 = new BitSet(new ulong[]{0x1080121410840940UL,0x22404C11F819000UL});
		public static readonly BitSet _additiveExpression_in_aggregate3134 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_aggregate3136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_aggregate3155 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_aggregate3157 = new BitSet(new ulong[]{0x1080000480000040UL,0x10000000000000UL});
		public static readonly BitSet _STAR_in_aggregate3163 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _aggregateDistinctAll_in_aggregate3169 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_aggregate3173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionExpr_in_aggregate3205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _path_in_aggregateDistinctAll3231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionExpr_in_aggregateDistinctAll3235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELEMENTS_in_collectionExpr3254 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _INDICES_in_collectionExpr3259 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _OPEN_in_collectionExpr3263 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _path_in_collectionExpr3266 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _CLOSE_in_collectionExpr3268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionExpr_in_compoundExpr3323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _path_in_compoundExpr3328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_in_compoundExpr3334 = new BitSet(new ulong[]{0x10A9121410844940UL,0x26644C91F899000UL,0x4UL});
		public static readonly BitSet _subQuery_in_compoundExpr3339 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _expression_in_compoundExpr3344 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _COMMA_in_compoundExpr3347 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_compoundExpr3350 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _CLOSE_in_compoundExpr3357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRAILING_in_exprList3376 = new BitSet(new ulong[]{0x1081121410844942UL,0x22404C11F899000UL});
		public static readonly BitSet _LEADING_in_exprList3389 = new BitSet(new ulong[]{0x1081121410844942UL,0x22404C11F899000UL});
		public static readonly BitSet _BOTH_in_exprList3402 = new BitSet(new ulong[]{0x1081121410844942UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_exprList3426 = new BitSet(new ulong[]{0x1000001000202UL});
		public static readonly BitSet _COMMA_in_exprList3431 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_exprList3434 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _FROM_in_exprList3449 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_exprList3451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AS_in_exprList3463 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_exprList3466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_exprList3480 = new BitSet(new ulong[]{0x1080121410844940UL,0x22404C11F899000UL});
		public static readonly BitSet _expression_in_exprList3482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerSubQuery_in_subQuery3502 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _UNION_in_subQuery3505 = new BitSet(new ulong[]{0x29000000000000UL,0x42400800000000UL,0x4UL});
		public static readonly BitSet _innerSubQuery_in_subQuery3508 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _queryRule_in_innerSubQuery3522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_path3610 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _DOT_in_path3614 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _identifier_in_path3619 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _IDENT_in_identifier3635 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  NHibernate.Hql.Ast.ANTLR 
